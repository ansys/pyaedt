<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SixLabors.Fonts</name>
    </assembly>
    <members>
        <member name="T:SixLabors.Fonts.BigEndianBinaryReader">
            <summary>
            BinaryReader using big-endian encoding.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.BigEndianBinaryReader.buffer">
            <summary>
            Buffer used for temporary storage before conversion into primitives
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.BigEndianBinaryReader.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Fonts.BigEndianBinaryReader" /> class.
            Constructs a new binary reader with the given bit converter, reading
            to the given stream, using the given encoding.
            </summary>
            <param name="stream">Stream to read data from</param>
            <param name="leaveOpen">if set to <c>true</c> [leave open].</param>
        </member>
        <member name="P:SixLabors.Fonts.BigEndianBinaryReader.BaseStream">
            <summary>
            Gets the underlying stream of the EndianBinaryReader.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.BigEndianBinaryReader.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Seeks within the stream.
            </summary>
            <param name="offset">Offset to seek to.</param>
            <param name="origin">Origin of seek operation. If SeekOrigin.Begin, the offset will be set to the start of stream position.</param>
        </member>
        <member name="M:SixLabors.Fonts.BigEndianBinaryReader.ReadByte">
            <summary>
            Reads a single byte from the stream.
            </summary>
            <returns>The byte read</returns>
        </member>
        <member name="M:SixLabors.Fonts.BigEndianBinaryReader.ReadSByte">
            <summary>
            Reads a single signed byte from the stream.
            </summary>
            <returns>The byte read</returns>
        </member>
        <member name="M:SixLabors.Fonts.BigEndianBinaryReader.ReadInt16">
            <summary>
            Reads a 16-bit signed integer from the stream, using the bit converter
            for this reader. 2 bytes are read.
            </summary>
            <returns>The 16-bit integer read</returns>
        </member>
        <member name="M:SixLabors.Fonts.BigEndianBinaryReader.ReadFixed">
            <summary>
            Reads a fixed 32-bit value from the stream.
            4 bytes are read.
            </summary>
            <returns>The 32-bit value read.</returns>
        </member>
        <member name="M:SixLabors.Fonts.BigEndianBinaryReader.ReadInt64">
            <summary>
            Reads a 64-bit signed integer from the stream.
            8 bytes are read.
            </summary>
            <returns>The 64-bit integer read.</returns>
        </member>
        <member name="M:SixLabors.Fonts.BigEndianBinaryReader.ReadUInt16">
            <summary>
            Reads a 16-bit unsigned integer from the stream.
            2 bytes are read.
            </summary>
            <returns>The 16-bit unsigned integer read.</returns>
        </member>
        <member name="M:SixLabors.Fonts.BigEndianBinaryReader.ReadOffset16">
            <summary>
            Reads a 16-bit unsigned integer from the stream representing an offset position.
            2 bytes are read.
            </summary>
            <returns>The 16-bit unsigned integer read.</returns>
        </member>
        <member name="M:SixLabors.Fonts.BigEndianBinaryReader.ReadUInt16Array(System.Int32)">
            <summary>
            Reads array of 16-bit unsigned integers from the stream.
            </summary>
            <param name="length">The length.</param>
            <returns>
            The 16-bit unsigned integer read.
            </returns>
        </member>
        <member name="M:SixLabors.Fonts.BigEndianBinaryReader.ReadUInt16Array(System.Span{System.UInt16})">
            <summary>
            Reads array of 16-bit unsigned integers from the stream to the buffer.
            </summary>
            <param name="buffer">The buffer to read to.</param>
        </member>
        <member name="M:SixLabors.Fonts.BigEndianBinaryReader.ReadUInt32Array(System.Int32)">
            <summary>
            Reads array or 32-bit unsigned integers from the stream.
            </summary>
            <param name="length">The length.</param>
            <returns>
            The 32-bit unsigned integer read.
            </returns>
        </member>
        <member name="M:SixLabors.Fonts.BigEndianBinaryReader.ReadInt16Array(System.Int32)">
            <summary>
            Reads array of 16-bit unsigned integers from the stream.
            </summary>
            <param name="length">The length.</param>
            <returns>
            The 16-bit signed integer read.
            </returns>
        </member>
        <member name="M:SixLabors.Fonts.BigEndianBinaryReader.ReadInt16Array(System.Span{System.Int16})">
            <summary>
            Reads an array of 16-bit signed integers from the stream to the buffer.
            </summary>
            <param name="buffer">The buffer to read to.</param>
        </member>
        <member name="M:SixLabors.Fonts.BigEndianBinaryReader.ReadUInt8">
            <summary>
            Reads a 8-bit unsigned integer from the stream, using the bit converter
            for this reader. 1 bytes are read.
            </summary>
            <returns>The 8-bit unsigned integer read.</returns>
        </member>
        <member name="M:SixLabors.Fonts.BigEndianBinaryReader.ReadUInt24">
            <summary>
            Reads a 24-bit unsigned integer from the stream, using the bit converter
            for this reader. 3 bytes are read.
            </summary>
            <returns>The 24-bit unsigned integer read.</returns>
        </member>
        <member name="M:SixLabors.Fonts.BigEndianBinaryReader.ReadUInt32">
            <summary>
            Reads a 32-bit unsigned integer from the stream, using the bit converter
            for this reader. 4 bytes are read.
            </summary>
            <returns>The 32-bit unsigned integer read.</returns>
        </member>
        <member name="M:SixLabors.Fonts.BigEndianBinaryReader.ReadOffset32">
            <summary>
            Reads a 32-bit unsigned integer from the stream representing an offset position.
            4 bytes are read.
            </summary>
            <returns>The 32-bit unsigned integer read.</returns>
        </member>
        <member name="M:SixLabors.Fonts.BigEndianBinaryReader.ReadBytes(System.Int32)">
            <summary>
            Reads the specified number of bytes, returning them in a new byte array.
            If not enough bytes are available before the end of the stream, this
            method will return what is available.
            </summary>
            <param name="count">The number of bytes to read.</param>
            <returns>The bytes read.</returns>
        </member>
        <member name="M:SixLabors.Fonts.BigEndianBinaryReader.ReadString(System.Int32,System.Text.Encoding)">
            <summary>
            Reads a string of a specific length, which specifies the number of bytes
            to read from the stream. These bytes are then converted into a string with
            the encoding for this reader.
            </summary>
            <param name="bytesToRead">The bytes to read.</param>
            <param name="encoding">The encoding.</param>
            <returns>
            The string read from the stream.
            </returns>
        </member>
        <member name="M:SixLabors.Fonts.BigEndianBinaryReader.ReadTag">
            <summary>
            Reads the uint32 string.
            </summary>
            <returns>a 4 character long UTF8 encoded string.</returns>
        </member>
        <member name="M:SixLabors.Fonts.BigEndianBinaryReader.ReadInternal(System.Byte[],System.Int32)">
            <summary>
            Reads the given number of bytes from the stream, throwing an exception
            if they can't all be read.
            </summary>
            <param name="data">Buffer to read into.</param>
            <param name="size">Number of bytes to read.</param>
        </member>
        <member name="T:SixLabors.Fonts.Buffer`1">
            <summary>
            An disposable buffer that is backed by an array pool.
            </summary>
            <typeparam name="T">The type of buffer element.</typeparam>
        </member>
        <member name="T:SixLabors.Fonts.ColorFontSupport">
            <summary>
            Options for enabling color font support during layout and rendering.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.ColorFontSupport.None">
            <summary>
            Don't try rendering color glyphs at all
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.ColorFontSupport.MicrosoftColrFormat">
            <summary>
            Render using glyphs accessed via Microsoft's COLR/CPAL table extensions to OpenType
            </summary>
        </member>
        <member name="T:SixLabors.Fonts.FontException">
            <summary>
            Base class for exceptions thrown by this library.
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:SixLabors.Fonts.FontException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Fonts.FontException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="T:SixLabors.Fonts.FontFamilyNotFoundException">
            <summary>
            Exception for detailing missing font families.
            </summary>
            <seealso cref="T:SixLabors.Fonts.FontException" />
        </member>
        <member name="M:SixLabors.Fonts.FontFamilyNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Fonts.FontFamilyNotFoundException"/> class.
            </summary>
            <param name="family">The name of the missing font family.</param>
        </member>
        <member name="M:SixLabors.Fonts.FontFamilyNotFoundException.#ctor(System.String,System.Collections.Generic.IReadOnlyCollection{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Fonts.FontFamilyNotFoundException"/> class.
            </summary>
            <param name="family">The name of the missing font family.</param>
            <param name="searchDirectories">
            The collection of directories that were searched for the font family.
            Pass an empty collection if font families were not searched in directories.
            </param>
        </member>
        <member name="P:SixLabors.Fonts.FontFamilyNotFoundException.FontFamily">
            <summary>
            Gets the name of the font family that was not found.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.FontFamilyNotFoundException.SearchDirectories">
            <summary>
            Gets the collection of directories that were unsuccessfully searched for the font family.
            </summary>
            <remarks>
            If the exception did not originate from the <see cref="P:SixLabors.Fonts.SystemFonts.Collection"/> then this property will be empty.
            </remarks>
        </member>
        <member name="T:SixLabors.Fonts.FontsThrowHelper">
            <summary>
            Helper methods to throw exceptions
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.FontsThrowHelper.ThrowGlyphMissingException``1(SixLabors.Fonts.Unicode.CodePoint)">
            <summary>
            Throws an <see cref="T:SixLabors.Fonts.GlyphMissingException"/>.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.FontsThrowHelper.ThrowDefaultInstance">
            <summary>
            Throws an <see cref="T:SixLabors.Fonts.FontException"/>.
            </summary>
        </member>
        <member name="T:SixLabors.Fonts.GlyphMissingException">
            <summary>
            Exception for detailing missing font families.
            </summary>
            <seealso cref="T:SixLabors.Fonts.FontException" />
        </member>
        <member name="M:SixLabors.Fonts.GlyphMissingException.#ctor(SixLabors.Fonts.Unicode.CodePoint)">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Fonts.GlyphMissingException"/> class.
            </summary>
            <param name="codePoint">The code point for the glyph we where unable to find.</param>
        </member>
        <member name="T:SixLabors.Fonts.InvalidFontFileException">
            <summary>
            Exception font loading can throw if it encounters invalid data during font loading.
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:SixLabors.Fonts.InvalidFontFileException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Fonts.InvalidFontFileException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="T:SixLabors.Fonts.InvalidFontTableException">
            <summary>
            Exception font loading can throw if it encounters invalid data during font loading.
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:SixLabors.Fonts.InvalidFontTableException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Fonts.InvalidFontTableException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="table">The table.</param>
        </member>
        <member name="P:SixLabors.Fonts.InvalidFontTableException.Table">
            <summary>
            Gets the table where the error originated.
            </summary>
        </member>
        <member name="T:SixLabors.Fonts.MissingFontTableException">
            <summary>
            Exception font loading can throw if it finds a required table is missing during font loading.
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:SixLabors.Fonts.MissingFontTableException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Fonts.MissingFontTableException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="table">The table.</param>
        </member>
        <member name="P:SixLabors.Fonts.MissingFontTableException.Table">
            <summary>
            Gets the table where the error originated.
            </summary>
        </member>
        <member name="T:SixLabors.Fonts.FileFontMetrics">
            <summary>
            <para>
            Represents a font face with metrics, which is a set of glyphs with a specific style (regular, italic, bold etc).
            </para>
            <para>The font source is a filesystem path.</para>
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.FileFontMetrics.Description">
            <inheritdoc cref="P:SixLabors.Fonts.FontMetrics.Description"/>
        </member>
        <member name="P:SixLabors.Fonts.FileFontMetrics.Path">
            <summary>
            Gets the filesystem path to the font face source.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.FileFontMetrics.UnitsPerEm">
            <inheritdoc />
        </member>
        <member name="P:SixLabors.Fonts.FileFontMetrics.ScaleFactor">
            <inheritdoc />
        </member>
        <member name="P:SixLabors.Fonts.FileFontMetrics.Ascender">
            <inheritdoc />
        </member>
        <member name="P:SixLabors.Fonts.FileFontMetrics.Descender">
            <inheritdoc />
        </member>
        <member name="P:SixLabors.Fonts.FileFontMetrics.LineGap">
            <inheritdoc />
        </member>
        <member name="P:SixLabors.Fonts.FileFontMetrics.LineHeight">
            <inheritdoc />
        </member>
        <member name="P:SixLabors.Fonts.FileFontMetrics.AdvanceWidthMax">
            <inheritdoc/>
        </member>
        <member name="P:SixLabors.Fonts.FileFontMetrics.AdvanceHeightMax">
            <inheritdoc/>
        </member>
        <member name="P:SixLabors.Fonts.FileFontMetrics.SubscriptXSize">
            <inheritdoc/>
        </member>
        <member name="P:SixLabors.Fonts.FileFontMetrics.SubscriptYSize">
            <inheritdoc/>
        </member>
        <member name="P:SixLabors.Fonts.FileFontMetrics.SubscriptXOffset">
            <inheritdoc/>
        </member>
        <member name="P:SixLabors.Fonts.FileFontMetrics.SubscriptYOffset">
            <inheritdoc/>
        </member>
        <member name="P:SixLabors.Fonts.FileFontMetrics.SuperscriptXSize">
            <inheritdoc/>
        </member>
        <member name="P:SixLabors.Fonts.FileFontMetrics.SuperscriptYSize">
            <inheritdoc/>
        </member>
        <member name="P:SixLabors.Fonts.FileFontMetrics.SuperscriptXOffset">
            <inheritdoc/>
        </member>
        <member name="P:SixLabors.Fonts.FileFontMetrics.SuperscriptYOffset">
            <inheritdoc/>
        </member>
        <member name="P:SixLabors.Fonts.FileFontMetrics.StrikeoutSize">
            <inheritdoc/>
        </member>
        <member name="P:SixLabors.Fonts.FileFontMetrics.StrikeoutPosition">
            <inheritdoc/>
        </member>
        <member name="P:SixLabors.Fonts.FileFontMetrics.UnderlinePosition">
            <inheritdoc/>
        </member>
        <member name="P:SixLabors.Fonts.FileFontMetrics.UnderlineThickness">
            <inheritdoc/>
        </member>
        <member name="P:SixLabors.Fonts.FileFontMetrics.ItalicAngle">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Fonts.FileFontMetrics.TryGetGlyphId(SixLabors.Fonts.Unicode.CodePoint,System.UInt16@)">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Fonts.FileFontMetrics.TryGetGlyphId(SixLabors.Fonts.Unicode.CodePoint,System.Nullable{SixLabors.Fonts.Unicode.CodePoint},System.UInt16@,System.Boolean@)">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Fonts.FileFontMetrics.TryGetGlyphClass(System.UInt16,System.Nullable{SixLabors.Fonts.Tables.AdvancedTypographic.GlyphClassDef}@)">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Fonts.FileFontMetrics.TryGetMarkAttachmentClass(System.UInt16,System.Nullable{SixLabors.Fonts.Tables.AdvancedTypographic.GlyphClassDef}@)">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Fonts.FileFontMetrics.GetGlyphMetrics(SixLabors.Fonts.Unicode.CodePoint,SixLabors.Fonts.ColorFontSupport)">
            <inheritdoc />
        </member>
        <member name="M:SixLabors.Fonts.FileFontMetrics.GetGlyphMetrics(SixLabors.Fonts.Unicode.CodePoint,System.UInt16,SixLabors.Fonts.ColorFontSupport)">
            <inheritdoc />
        </member>
        <member name="M:SixLabors.Fonts.FileFontMetrics.ApplySubstitution(SixLabors.Fonts.GlyphSubstitutionCollection)">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Fonts.FileFontMetrics.UpdatePositions(SixLabors.Fonts.GlyphPositioningCollection)">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Fonts.FileFontMetrics.LoadFontCollection(System.String)">
            <summary>
            Reads a <see cref="T:SixLabors.Fonts.StreamFontMetrics"/> from the specified stream.
            </summary>
            <param name="path">The file path.</param>
            <returns>a <see cref="T:SixLabors.Fonts.StreamFontMetrics"/>.</returns>
        </member>
        <member name="T:SixLabors.Fonts.Font">
            <summary>
            Defines a particular format for text, including font face, size, and style attributes.
            This class cannot be inherited.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.Font.#ctor(SixLabors.Fonts.FontFamily,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Fonts.Font"/> class.
            </summary>
            <param name="family">The font family.</param>
            <param name="size">The size of the font in PT units.</param>
        </member>
        <member name="M:SixLabors.Fonts.Font.#ctor(SixLabors.Fonts.FontFamily,System.Single,SixLabors.Fonts.FontStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Fonts.Font"/> class.
            </summary>
            <param name="family">The font family.</param>
            <param name="size">The size of the font in PT units.</param>
            <param name="style">The font style.</param>
        </member>
        <member name="M:SixLabors.Fonts.Font.#ctor(SixLabors.Fonts.Font,SixLabors.Fonts.FontStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Fonts.Font"/> class.
            </summary>
            <param name="prototype">The prototype.</param>
            <param name="style">The font style.</param>
        </member>
        <member name="M:SixLabors.Fonts.Font.#ctor(SixLabors.Fonts.Font,System.Single,SixLabors.Fonts.FontStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Fonts.Font"/> class.
            </summary>
            <param name="prototype">The prototype.</param>
            <param name="size">The size of the font in PT units.</param>
            <param name="style">The font style.</param>
        </member>
        <member name="M:SixLabors.Fonts.Font.#ctor(SixLabors.Fonts.Font,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Fonts.Font"/> class.
            </summary>
            <param name="prototype">The prototype.</param>
            <param name="size">The size of the font in PT units.</param>
        </member>
        <member name="P:SixLabors.Fonts.Font.Family">
            <summary>
            Gets the family.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.Font.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.Font.Size">
            <summary>
            Gets the size of the font in PT units.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.Font.FontMetrics">
            <summary>
            Gets the font metrics.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.Font.IsBold">
            <summary>
            Gets a value indicating whether this <see cref="T:SixLabors.Fonts.Font"/> is bold.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.Font.IsItalic">
            <summary>
            Gets a value indicating whether this <see cref="T:SixLabors.Fonts.Font"/> is italic.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.Font.RequestedStyle">
            <summary>
            Gets the requested style.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.Font.TryGetPath(System.String@)">
            <summary>
            Gets the filesystem path to the font family source.
            </summary>
            <param name="path">
            When this method returns, contains the filesystem path to the font family source,
            if the path exists; otherwise, the default value for the type of the path parameter.
            This parameter is passed uninitialized.
            </param>
            <returns>
            <see langword="true" /> if the <see cref="T:SixLabors.Fonts.Font" /> was created via a filesystem path; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:SixLabors.Fonts.Font.GetGlyphs(SixLabors.Fonts.Unicode.CodePoint,SixLabors.Fonts.ColorFontSupport)">
            <summary>
            Gets the glyphs for the given codepoint.
            </summary>
            <param name="codePoint">The code point of the character.</param>
            <param name="support">Options for enabling color font support during layout and rendering.</param>
            <returns>Returns the glyph</returns>
        </member>
        <member name="M:SixLabors.Fonts.Font.GetGlyphs(SixLabors.Fonts.Unicode.CodePoint,SixLabors.Fonts.TextAttributes,SixLabors.Fonts.ColorFontSupport)">
            <summary>
            Gets the glyphs for the given codepoint.
            </summary>
            <param name="codePoint">The code point of the character.</param>
            <param name="textAttributes">The text attributes to apply to the glyphs.</param>
            <param name="support">Options for enabling color font support during layout and rendering.</param>
            <returns>Returns the glyph</returns>
        </member>
        <member name="T:SixLabors.Fonts.FontCollection">
            <summary>
            Represents a collection of font families.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.FontCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Fonts.FontCollection"/> class.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.FontCollection.#ctor(System.Collections.Generic.IReadOnlyCollection{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Fonts.FontCollection"/> class.
            </summary>
            <param name="searchDirectories">The collection of directories used to search for font families.</param>
            <remarks>
            Use this constructor instead of the parameterless constructor if the fonts added to that collection
            are actually added after searching inside physical file system directories. The message of the
            <see cref="T:SixLabors.Fonts.FontFamilyNotFoundException"/> will include the searched directories.
            </remarks>
        </member>
        <member name="P:SixLabors.Fonts.FontCollection.Families">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Fonts.FontCollection.Add(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Fonts.FontCollection.Add(System.String,SixLabors.Fonts.FontDescription@)">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Fonts.FontCollection.Add(System.IO.Stream)">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Fonts.FontCollection.Add(System.IO.Stream,SixLabors.Fonts.FontDescription@)">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Fonts.FontCollection.AddCollection(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Fonts.FontCollection.AddCollection(System.String,System.Collections.Generic.IEnumerable{SixLabors.Fonts.FontDescription}@)">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Fonts.FontCollection.AddCollection(System.IO.Stream)">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Fonts.FontCollection.AddCollection(System.IO.Stream,System.Collections.Generic.IEnumerable{SixLabors.Fonts.FontDescription}@)">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Fonts.FontCollection.Get(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Fonts.FontCollection.TryGet(System.String,SixLabors.Fonts.FontFamily@)">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Fonts.FontCollection.Add(System.String,System.Globalization.CultureInfo)">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Fonts.FontCollection.Add(System.String,System.Globalization.CultureInfo,SixLabors.Fonts.FontDescription@)">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Fonts.FontCollection.Add(System.IO.Stream,System.Globalization.CultureInfo)">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Fonts.FontCollection.Add(System.IO.Stream,System.Globalization.CultureInfo,SixLabors.Fonts.FontDescription@)">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Fonts.FontCollection.AddCollection(System.String,System.Globalization.CultureInfo)">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Fonts.FontCollection.AddCollection(System.String,System.Globalization.CultureInfo,System.Collections.Generic.IEnumerable{SixLabors.Fonts.FontDescription}@)">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Fonts.FontCollection.AddCollection(System.IO.Stream,System.Globalization.CultureInfo)">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Fonts.FontCollection.AddCollection(System.IO.Stream,System.Globalization.CultureInfo,System.Collections.Generic.IEnumerable{SixLabors.Fonts.FontDescription}@)">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Fonts.FontCollection.GetByCulture(System.Globalization.CultureInfo)">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Fonts.FontCollection.Get(System.String,System.Globalization.CultureInfo)">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Fonts.FontCollection.TryGet(System.String,System.Globalization.CultureInfo,SixLabors.Fonts.FontFamily@)">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Fonts.FontCollection.SixLabors#Fonts#IFontMetricsCollection#AddMetrics(SixLabors.Fonts.FontMetrics,System.Globalization.CultureInfo)">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Fonts.FontCollection.SixLabors#Fonts#IFontMetricsCollection#AddMetrics(SixLabors.Fonts.FontMetrics)">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Fonts.FontCollection.SixLabors#Fonts#IReadOnlyFontMetricsCollection#TryGetMetrics(System.String,System.Globalization.CultureInfo,SixLabors.Fonts.FontStyle,SixLabors.Fonts.FontMetrics@)">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Fonts.FontCollection.SixLabors#Fonts#IReadOnlyFontMetricsCollection#GetAllMetrics(System.String,System.Globalization.CultureInfo)">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Fonts.FontCollection.SixLabors#Fonts#IReadOnlyFontMetricsCollection#GetAllStyles(System.String,System.Globalization.CultureInfo)">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Fonts.FontCollection.SixLabors#Fonts#IReadOnlyFontMetricsCollection#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:SixLabors.Fonts.FontCollectionExtensions">
            <summary>
            Extension methods for <see cref="T:SixLabors.Fonts.IFontCollection"/>.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.FontCollectionExtensions.AddSystemFonts(SixLabors.Fonts.FontCollection)">
            <summary>
            Adds the fonts from the <see cref="T:SixLabors.Fonts.SystemFonts"/> collection to this <see cref="T:SixLabors.Fonts.FontCollection"/>.
            </summary>
            <param name="collection">The font collection.</param>
            <returns>The <see cref="T:SixLabors.Fonts.FontCollection"/> containing the system fonts.</returns>
        </member>
        <member name="M:SixLabors.Fonts.FontCollectionExtensions.AddSystemFonts(SixLabors.Fonts.FontCollection,System.Predicate{SixLabors.Fonts.FontMetrics})">
            <summary>
            Adds the fonts from the <see cref="T:SixLabors.Fonts.SystemFonts"/> collection to this <see cref="T:SixLabors.Fonts.FontCollection"/>.
            </summary>
            <param name="collection">The font collection.</param>
            <param name="match">The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of <see cref="T:SixLabors.Fonts.FontMetrics"/> to add into the font collection.</param>
            <returns>The <see cref="T:SixLabors.Fonts.FontCollection"/> containing the system fonts.</returns>
        </member>
        <member name="T:SixLabors.Fonts.FontDescription">
            <summary>
            Provides basic descriptive metadata for the font.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.FontDescription.#ctor(SixLabors.Fonts.Tables.General.NameTable,SixLabors.Fonts.Tables.General.OS2Table,SixLabors.Fonts.Tables.General.HeadTable)">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Fonts.FontDescription" /> class.
            </summary>
            <param name="nameTable">The name table.</param>
            <param name="os2">The os2 table.</param>
            <param name="head">The head table.</param>
        </member>
        <member name="P:SixLabors.Fonts.FontDescription.Style">
            <summary>
            Gets the style.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.FontDescription.FontNameInvariantCulture">
            <summary>
            Gets the name of the font in the invariant culture.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.FontDescription.FontFamilyInvariantCulture">
            <summary>
            Gets the name of the font family in the invariant culture.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.FontDescription.FontSubFamilyNameInvariantCulture">
            <summary>
            Gets the font sub family in the invariant culture.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.FontDescription.FontName(System.Globalization.CultureInfo)">
            <summary>
            Gets the name of the font.
            </summary>
            <param name="culture">The culture to load metadata in.</param>
            <returns>The font name.</returns>
        </member>
        <member name="M:SixLabors.Fonts.FontDescription.FontFamily(System.Globalization.CultureInfo)">
            <summary>
            Gets the name of the font family.
            </summary>
            <param name="culture">The culture to load metadata in.</param>
            <returns>The font family name.</returns>
        </member>
        <member name="M:SixLabors.Fonts.FontDescription.FontSubFamilyName(System.Globalization.CultureInfo)">
            <summary>
            Gets the font sub family.
            </summary>
            <param name="culture">The culture to load metadata in.</param>
            <returns>The font sub family name.</returns>
        </member>
        <member name="M:SixLabors.Fonts.FontDescription.GetNameById(System.Globalization.CultureInfo,SixLabors.Fonts.WellKnownIds.KnownNameIds)">
            <summary>
            Gets the name matching the given culture and id.
            If <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/> is passed this method will return the first name matching the id.
            </summary>
            <param name="culture">The culture to load metadata in.</param>
            <param name="nameId">The name id to match.</param>
            <returns>The <see cref="T:System.String"/> name.</returns>
        </member>
        <member name="M:SixLabors.Fonts.FontDescription.LoadDescription(System.String)">
            <summary>
            Reads a <see cref="T:SixLabors.Fonts.FontDescription"/> from the specified stream.
            </summary>
            <param name="path">The file path.</param>
            <returns>a <see cref="T:SixLabors.Fonts.FontDescription"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.FontDescription.LoadDescription(System.IO.Stream)">
            <summary>
            Reads a <see cref="T:SixLabors.Fonts.FontDescription"/> from the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <returns>a <see cref="T:SixLabors.Fonts.FontDescription"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.FontDescription.LoadDescription(SixLabors.Fonts.FontReader)">
            <summary>
            Reads a <see cref="T:SixLabors.Fonts.FontDescription" /> from the specified stream.
            </summary>
            <param name="reader">The reader.</param>
            <returns>
            a <see cref="T:SixLabors.Fonts.FontDescription" />.
            </returns>
        </member>
        <member name="M:SixLabors.Fonts.FontDescription.LoadFontCollectionDescriptions(System.String)">
            <summary>
            Reads all the <see cref="T:SixLabors.Fonts.FontDescription"/>s from the file at the specified path (typically a .ttc file like simsun.ttc).
            </summary>
            <param name="path">The file path.</param>
            <returns>a <see cref="T:SixLabors.Fonts.FontDescription"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.FontDescription.LoadFontCollectionDescriptions(System.IO.Stream)">
            <summary>
            Reads all the <see cref="T:SixLabors.Fonts.FontDescription"/>s from the specified stream (typically a .ttc file like simsun.ttc).
            </summary>
            <param name="stream">The stream to read the font collection from.</param>
            <returns>a <see cref="T:SixLabors.Fonts.FontDescription"/>.</returns>
        </member>
        <member name="T:SixLabors.Fonts.FontFamily">
            <summary>
            Defines a group of type faces having a similar basic design and certain
            variations in styles.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.FontFamily.#ctor(System.String,SixLabors.Fonts.IReadOnlyFontMetricsCollection,System.Globalization.CultureInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Fonts.FontFamily"/> struct.
            </summary>
            <param name="name">The name.</param>
            <param name="collection">The collection.</param>
            <param name="culture">The culture the family was extracted against</param>
        </member>
        <member name="P:SixLabors.Fonts.FontFamily.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.FontFamily.Culture">
            <summary>
            Gets the culture this instance was extracted against.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.FontFamily.op_Equality(SixLabors.Fonts.FontFamily,SixLabors.Fonts.FontFamily)">
            <summary>
            Compares two <see cref="T:SixLabors.Fonts.FontFamily"/> objects for equality.
            </summary>
            <param name="left">The <see cref="T:SixLabors.Fonts.FontFamily"/> on the left side of the operand.</param>
            <param name="right">The <see cref="T:SixLabors.Fonts.FontFamily"/> on the right side of the operand.</param>
            <returns>
            <see langword="true"/> if the current left is equal to the <paramref name="right"/>
            parameter; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:SixLabors.Fonts.FontFamily.op_Inequality(SixLabors.Fonts.FontFamily,SixLabors.Fonts.FontFamily)">
            <summary>
            Compares two <see cref="T:SixLabors.Fonts.FontFamily"/> objects for inequality.
            </summary>
            <param name="left">The <see cref="T:SixLabors.Fonts.FontFamily"/> on the left side of the operand.</param>
            <param name="right">The <see cref="T:SixLabors.Fonts.FontFamily"/> on the right side of the operand.</param>
            <returns>
            <see langword="true"/> if the current left is unequal to the <paramref name="right"/>
            parameter; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:SixLabors.Fonts.FontFamily.CreateFont(System.Single)">
            <summary>
            Create a new instance of the <see cref="T:SixLabors.Fonts.Font" /> for the named font family with regular styling.
            </summary>
            <param name="size">The size of the font in PT units.</param>
            <returns>The new <see cref="T:SixLabors.Fonts.Font" />.</returns>
        </member>
        <member name="M:SixLabors.Fonts.FontFamily.CreateFont(System.Single,SixLabors.Fonts.FontStyle)">
            <summary>
            Create a new instance of the <see cref="T:SixLabors.Fonts.Font" /> for the named font family.
            </summary>
            <param name="size">The size of the font in PT units.</param>
            <param name="style">The font style.</param>
            <returns>The new <see cref="T:SixLabors.Fonts.Font" />.</returns>
        </member>
        <member name="M:SixLabors.Fonts.FontFamily.GetAvailableStyles">
            <summary>
            Gets the collection of <see cref="T:SixLabors.Fonts.FontStyle" /> that are currently available.
            </summary>
            <returns>The <see cref="T:System.Collections.Generic.IEnumerable`1" />.</returns>
        </member>
        <member name="M:SixLabors.Fonts.FontFamily.TryGetPaths(System.Collections.Generic.IEnumerable{System.String}@)">
            <summary>
            Gets the collection of filesystem paths to the font family sources.
            </summary>
            <param name="paths">
            When this method returns, contains the filesystem paths to the font family sources,
            if the path exists; otherwise, an empty value for the type of the paths parameter.
            This parameter is passed uninitialized.
            </param>
            <returns>
            <see langword="true" /> if the <see cref="T:SixLabors.Fonts.FontFamily" /> was created via filesystem paths; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:SixLabors.Fonts.FontFamily.TryGetMetrics(SixLabors.Fonts.FontStyle,SixLabors.Fonts.FontMetrics@)">
            <summary>
            Gets the specified font metrics matching the given font style.
            </summary>
            <param name="style">The font style to use when searching for a match.</param>
            <param name="metrics">
            When this method returns, contains the metrics associated with the specified name,
            if the name is found; otherwise, the default value for the type of the metrics parameter.
            This parameter is passed uninitialized.
            </param>
            <returns>
            <see langword="true"/> if the <see cref="T:SixLabors.Fonts.FontFamily"/> contains font metrics
            with the specified name; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:SixLabors.Fonts.FontFamily.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Fonts.FontFamily.Equals(SixLabors.Fonts.FontFamily)">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Fonts.FontFamily.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Fonts.FontFamily.ToString">
            <inheritdoc/>
        </member>
        <member name="T:SixLabors.Fonts.FontMetrics">
            <summary>
            Represents a font face with metrics, which is a set of glyphs with a specific style (regular, italic, bold etc).
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.FontMetrics.Description">
            <summary>
            Gets the basic description of the face.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.FontMetrics.UnitsPerEm">
            <summary>
            Gets the number of font units per EM square for this face.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.FontMetrics.ScaleFactor">
            <summary>
            Gets the scale factor that is applied to all glyphs in this face.
            Calculated as 72 * <see cref="P:SixLabors.Fonts.FontMetrics.UnitsPerEm"/> so that 1pt = 1px.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.FontMetrics.Ascender">
            <summary>
            Gets the typographic ascender of the face, expressed in font units.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.FontMetrics.Descender">
            <summary>
            Gets the typographic descender of the face, expressed in font units.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.FontMetrics.LineGap">
            <summary>
            Gets the typographic line gap of the face, expressed in font units.
            This field should be combined with the <see cref="P:SixLabors.Fonts.FontMetrics.Ascender"/> and <see cref="P:SixLabors.Fonts.FontMetrics.Descender"/>
            values to determine default line spacing.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.FontMetrics.LineHeight">
            <summary>
            Gets the typographic line spacing of the face, expressed in font units.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.FontMetrics.AdvanceWidthMax">
            <summary>
            Gets the maximum advance width, in font units, for all glyphs in this face.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.FontMetrics.AdvanceHeightMax">
            <summary>
            Gets the maximum advance height, in font units, for all glyphs in this
            face.This is only relevant for vertical layouts, and is set to <see cref="P:SixLabors.Fonts.FontMetrics.LineHeight"/> for
            fonts that do not provide vertical metrics.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.FontMetrics.SubscriptXSize">
            <summary>
            Gets the recommended horizontal size in font design units for subscripts for this font.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.FontMetrics.SubscriptYSize">
            <summary>
            Gets the recommended vertical size in font design units for subscripts for this font.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.FontMetrics.SubscriptXOffset">
            <summary>
            Gets the recommended horizontal offset in font design units for subscripts for this font.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.FontMetrics.SubscriptYOffset">
            <summary>
            Gets the recommended vertical offset in font design units for subscripts for this font.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.FontMetrics.SuperscriptXSize">
            <summary>
            Gets the recommended horizontal size in font design units for superscripts for this font.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.FontMetrics.SuperscriptYSize">
            <summary>
            Gets the recommended vertical size in font design units for superscripts for this font.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.FontMetrics.SuperscriptXOffset">
            <summary>
            Gets the recommended horizontal offset in font design units for superscripts for this font.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.FontMetrics.SuperscriptYOffset">
            <summary>
            Gets the recommended vertical offset in font design units for superscripts for this font.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.FontMetrics.StrikeoutSize">
            <summary>
            Gets thickness of the strikeout stroke in font design units.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.FontMetrics.StrikeoutPosition">
            <summary>
            Gets the position of the top of the strikeout stroke relative to the baseline in font design units.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.FontMetrics.UnderlinePosition">
            <summary>
            Gets the suggested distance of the top of the underline from the baseline (negative values indicate below baseline).
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.FontMetrics.UnderlineThickness">
            <summary>
            Gets the suggested values for the underline thickness. In general, the underline thickness should match the thickness of
            the underscore character (U+005F LOW LINE), and should also match the strikeout thickness, which is specified in the OS/2 table.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.FontMetrics.ItalicAngle">
            <summary>
            Gets the italic angle in counter-clockwise degrees from the vertical. Zero for upright text, negative for text that leans to the right (forward).
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.FontMetrics.TryGetGlyphId(SixLabors.Fonts.Unicode.CodePoint,System.UInt16@)">
            <summary>
            Gets the specified glyph id matching the codepoint.
            </summary>
            <param name="codePoint">The codepoint.</param>
            <param name="glyphId">
            When this method returns, contains the glyph id associated with the specified codepoint,
            if the codepoint is found; otherwise, <value>0</value>.
            This parameter is passed uninitialized.
            </param>
            <returns>
            <see langword="true"/> if the face contains a glyph for the specified codepoint; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:SixLabors.Fonts.FontMetrics.TryGetGlyphId(SixLabors.Fonts.Unicode.CodePoint,System.Nullable{SixLabors.Fonts.Unicode.CodePoint},System.UInt16@,System.Boolean@)">
            <summary>
            Gets the specified glyph id matching the codepoint pair.
            </summary>
            <param name="codePoint">The codepoint.</param>
            <param name="nextCodePoint">The next codepoint. Can be null.</param>
            <param name="glyphId">
            When this method returns, contains the glyph id associated with the specified codepoint,
            if the codepoint is found; otherwise, <value>0</value>.
            This parameter is passed uninitialized.
            </param>
            <param name="skipNextCodePoint">
            When this method return, contains a value indicating whether the next codepoint should be skipped.
            </param>
            <returns>
            <see langword="true"/> if the face contains a glyph for the specified codepoint; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:SixLabors.Fonts.FontMetrics.TryGetGlyphClass(System.UInt16,System.Nullable{SixLabors.Fonts.Tables.AdvancedTypographic.GlyphClassDef}@)">
            <summary>
            Tries to get the glyph class for a given glyph id.
            The font needs to have a GDEF table defined.
            </summary>
            <param name="glyphId">The glyph identifier.</param>
            <param name="glyphClass">The glyph class.</param>
            <returns>true, if the glyph class could be retrieved.</returns>
        </member>
        <member name="M:SixLabors.Fonts.FontMetrics.TryGetMarkAttachmentClass(System.UInt16,System.Nullable{SixLabors.Fonts.Tables.AdvancedTypographic.GlyphClassDef}@)">
            <summary>
            Tries to get the mark attachment class for a given glyph id.
            The font needs to have a GDEF table defined.
            </summary>
            <param name="glyphId">The glyph identifier.</param>
            <param name="markAttachmentClass">The mark attachment class.</param>
            <returns>true, if the mark attachment class could be retrieved.</returns>
        </member>
        <member name="M:SixLabors.Fonts.FontMetrics.GetGlyphMetrics(SixLabors.Fonts.Unicode.CodePoint,SixLabors.Fonts.ColorFontSupport)">
            <summary>
            Gets the glyph metrics for a given code point.
            </summary>
            <param name="codePoint">The Unicode code point to get the glyph for.</param>
            <param name="support">Options for enabling color font support during layout and rendering.</param>
            <returns>The glyph metrics to find.</returns>
        </member>
        <member name="M:SixLabors.Fonts.FontMetrics.GetGlyphMetrics(SixLabors.Fonts.Unicode.CodePoint,System.UInt16,SixLabors.Fonts.ColorFontSupport)">
            <summary>
            Gets the glyph metrics for a given code point and glyph id.
            </summary>
            <param name="codePoint">The Unicode codepoint.</param>
            <param name="glyphId">
            The previously matched or substituted glyph id for the codepoint in the face.
            If this value equals <value>0</value> the default fallback metrics are returned.
            </param>
            <param name="support">Options for enabling color font support during layout and rendering.</param>
            <returns>The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.FontMetrics.ApplySubstitution(SixLabors.Fonts.GlyphSubstitutionCollection)">
            <summary>
            Applies any available substitutions to the collection of glyphs.
            </summary>
            <param name="collection">The glyph substitution collection.</param>
        </member>
        <member name="M:SixLabors.Fonts.FontMetrics.UpdatePositions(SixLabors.Fonts.GlyphPositioningCollection)">
            <summary>
            Applies any available positioning updates to the collection of glyphs.
            </summary>
            <param name="collection">The glyph positioning collection.</param>
        </member>
        <member name="T:SixLabors.Fonts.FontRectangle">
            <summary>
            Stores a set of four single precision floating points that represent the location and size of a rectangle.
            </summary>
            <remarks>
            This struct is fully mutable. This is done (against the guidelines) for the sake of performance,
            as it avoids the need to create new values for modification operations.
            </remarks>
        </member>
        <member name="F:SixLabors.Fonts.FontRectangle.Empty">
            <summary>
            Represents a <see cref="T:SixLabors.Fonts.FontRectangle"/> that has X, Y, Width, and Height values set to zero.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.FontRectangle.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Fonts.FontRectangle"/> struct.
            </summary>
            <param name="x">The horizontal position of the rectangle.</param>
            <param name="y">The vertical position of the rectangle.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
        </member>
        <member name="M:SixLabors.Fonts.FontRectangle.#ctor(System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Fonts.FontRectangle"/> struct.
            </summary>
            <param name="point">
            The <see cref="T:System.Numerics.Vector2"/> which specifies the rectangles point in a two-dimensional plane.
            </param>
            <param name="size">
            The <see cref="T:System.Numerics.Vector2"/> which specifies the rectangles height and width.
            </param>
        </member>
        <member name="P:SixLabors.Fonts.FontRectangle.X">
            <summary>
            Gets the x-coordinate of this <see cref="T:SixLabors.Fonts.FontRectangle"/>.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.FontRectangle.Y">
            <summary>
            Gets the y-coordinate of this <see cref="T:SixLabors.Fonts.FontRectangle"/>.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.FontRectangle.Width">
            <summary>
            Gets the width of this <see cref="T:SixLabors.Fonts.FontRectangle"/>.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.FontRectangle.Height">
            <summary>
            Gets the height of this <see cref="T:SixLabors.Fonts.FontRectangle"/>.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.FontRectangle.Location">
            <summary>
            Gets the coordinates of the upper-left corner of the rectangular region represented by this <see cref="T:SixLabors.Fonts.FontRectangle"/>.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.FontRectangle.Size">
            <summary>
            Gets the size of this <see cref="T:SixLabors.Fonts.FontRectangle"/>.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.FontRectangle.IsEmpty">
            <summary>
            Gets a value indicating whether this <see cref="T:SixLabors.Fonts.FontRectangle"/> is empty.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.FontRectangle.Top">
            <summary>
            Gets the y-coordinate of the top edge of this <see cref="T:SixLabors.Fonts.FontRectangle"/>.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.FontRectangle.Right">
            <summary>
            Gets the x-coordinate of the right edge of this <see cref="T:SixLabors.Fonts.FontRectangle"/>.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.FontRectangle.Bottom">
            <summary>
            Gets the y-coordinate of the bottom edge of this <see cref="T:SixLabors.Fonts.FontRectangle"/>.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.FontRectangle.Left">
            <summary>
            Gets the x-coordinate of the left edge of this <see cref="T:SixLabors.Fonts.FontRectangle"/>.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.FontRectangle.op_Equality(SixLabors.Fonts.FontRectangle,SixLabors.Fonts.FontRectangle)">
            <summary>
            Compares two <see cref="T:SixLabors.Fonts.FontRectangle"/> objects for equality.
            </summary>
            <param name="left">The <see cref="T:SixLabors.Fonts.FontRectangle"/> on the left side of the operand.</param>
            <param name="right">The <see cref="T:SixLabors.Fonts.FontRectangle"/> on the right side of the operand.</param>
            <returns>
            True if the current left is equal to the <paramref name="right"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:SixLabors.Fonts.FontRectangle.op_Inequality(SixLabors.Fonts.FontRectangle,SixLabors.Fonts.FontRectangle)">
            <summary>
            Compares two <see cref="T:SixLabors.Fonts.FontRectangle"/> objects for inequality.
            </summary>
            <param name="left">The <see cref="T:SixLabors.Fonts.FontRectangle"/> on the left side of the operand.</param>
            <param name="right">The <see cref="T:SixLabors.Fonts.FontRectangle"/> on the right side of the operand.</param>
            <returns>
            True if the current left is unequal to the <paramref name="right"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:SixLabors.Fonts.FontRectangle.FromLTRB(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a new <see cref="T:SixLabors.Fonts.FontRectangle"/> with the specified location and size. </summary>
            <param name="left">The left coordinate of the rectangle.</param>
            <param name="top">The top coordinate of the rectangle.</param>
            <param name="right">The right coordinate of the rectangle.</param>
            <param name="bottom">The bottom coordinate of the rectangle.</param>
            <returns>The <see cref="T:SixLabors.Fonts.FontRectangle"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.FontRectangle.Center(SixLabors.Fonts.FontRectangle)">
            <summary>
            Returns the center point of the given <see cref="T:SixLabors.Fonts.FontRectangle"/>.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <returns>The <see cref="T:System.Numerics.Vector2"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.FontRectangle.Intersect(SixLabors.Fonts.FontRectangle,SixLabors.Fonts.FontRectangle)">
            <summary>
            Creates a rectangle that represents the intersection between <paramref name="a"/> and
            <paramref name="b"/>. If there is no intersection, an empty rectangle is returned.
            </summary>
            <param name="a">The first rectangle.</param>
            <param name="b">The second rectangle.</param>
            <returns>The <see cref="T:SixLabors.Fonts.FontRectangle"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.FontRectangle.Inflate(SixLabors.Fonts.FontRectangle,System.Single,System.Single)">
            <summary>
            Creates a new <see cref="T:SixLabors.Fonts.FontRectangle"/> from the given <paramref name="rectangle"/>
            that is inflated by the specified amount.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <param name="x">The amount to inflate the width by.</param>
            <param name="y">The amount to inflate the height by.</param>
            <returns>A new <see cref="T:SixLabors.Fonts.FontRectangle"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.FontRectangle.Transform(SixLabors.Fonts.FontRectangle,System.Numerics.Matrix3x2)">
            <summary>
            Creates a new <see cref="T:SixLabors.Fonts.FontRectangle"/> by transforming the given rectangle by the given matrix.
            </summary>
            <param name="rectangle">The source rectangle.</param>
            <param name="matrix">The transformation matrix.</param>
            <returns>A transformed <see cref="T:SixLabors.Fonts.FontRectangle"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.FontRectangle.Union(SixLabors.Fonts.FontRectangle,SixLabors.Fonts.FontRectangle)">
            <summary>
            Creates a rectangle that represents the union between <paramref name="a"/> and <paramref name="b"/>.
            </summary>
            <param name="a">The first rectangle.</param>
            <param name="b">The second rectangle.</param>
            <returns>The <see cref="T:SixLabors.Fonts.FontRectangle"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.FontRectangle.Deconstruct(System.Single@,System.Single@,System.Single@,System.Single@)">
            <summary>
            Deconstructs this rectangle into four floats.
            </summary>
            <param name="x">The out value for X.</param>
            <param name="y">The out value for Y.</param>
            <param name="width">The out value for the width.</param>
            <param name="height">The out value for the height.</param>
        </member>
        <member name="M:SixLabors.Fonts.FontRectangle.Intersect(SixLabors.Fonts.FontRectangle)">
            <summary>
            Creates a FontRectangle that represents the intersection between this FontRectangle and the <paramref name="rectangle"/>.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <returns>New <see cref="T:SixLabors.Fonts.FontRectangle"/> representing the intersections between the two rectangles.</returns>
        </member>
        <member name="M:SixLabors.Fonts.FontRectangle.Inflate(System.Single,System.Single)">
            <summary>
            Creates a new <see cref="T:SixLabors.Fonts.FontRectangle"/> inflated by the specified amount.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <returns>New <see cref="T:SixLabors.Fonts.FontRectangle"/> representing the inflated rectangle</returns>
        </member>
        <member name="M:SixLabors.Fonts.FontRectangle.Inflate(System.Numerics.Vector2)">
            <summary>
            Creates a new <see cref="T:SixLabors.Fonts.FontRectangle"/> inflated by the specified amount.
            </summary>
            <param name="size">The size.</param>
            <returns>New <see cref="T:SixLabors.Fonts.FontRectangle"/> representing the inflated rectangle</returns>
        </member>
        <member name="M:SixLabors.Fonts.FontRectangle.Contains(System.Single,System.Single)">
            <summary>
            Determines if the specified point is contained within the rectangular region defined by
            this <see cref="T:SixLabors.Fonts.FontRectangle"/>.
            </summary>
            <param name="x">The x-coordinate of the given point.</param>
            <param name="y">The y-coordinate of the given point.</param>
            <returns>The <see cref="T:System.Boolean"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.FontRectangle.Contains(System.Numerics.Vector2)">
            <summary>
            Determines if the specified point is contained within the rectangular region defined by this <see cref="T:SixLabors.Fonts.FontRectangle"/> .
            </summary>
            <param name="point">The point.</param>
            <returns>The <see cref="T:System.Boolean"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.FontRectangle.Contains(SixLabors.Fonts.FontRectangle)">
            <summary>
            Determines if the rectangular region represented by <paramref name="rectangle"/> is entirely contained
            within the rectangular region represented by this <see cref="T:SixLabors.Fonts.FontRectangle"/> .
            </summary>
            <param name="rectangle">The rectangle.</param>
            <returns>The <see cref="T:System.Boolean"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.FontRectangle.IntersectsWith(SixLabors.Fonts.FontRectangle)">
            <summary>
            Determines if the specified <see cref="T:SixLabors.Fonts.FontRectangle"/> intersects the rectangular region defined by
            this <see cref="T:SixLabors.Fonts.FontRectangle"/>.
            </summary>
            <param name="rectangle">The other rectangle.</param>
            <returns>The <see cref="T:System.Boolean"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.FontRectangle.Offset(System.Numerics.Vector2)">
            <summary>
            Adjusts the location of this rectangle by the specified amount.
            </summary>
            <param name="point">The point.</param>
            <returns>New <see cref="T:SixLabors.Fonts.FontRectangle"/> representing the offset rectangle.</returns>
        </member>
        <member name="M:SixLabors.Fonts.FontRectangle.Offset(System.Single,System.Single)">
            <summary>
            Adjusts the location of this rectangle by the specified amount.
            </summary>
            <param name="dx">The amount to offset the x-coordinate.</param>
            <param name="dy">The amount to offset the y-coordinate.</param>
            <returns>New <see cref="T:SixLabors.Fonts.FontRectangle"/> representing the inflated rectangle.</returns>
        </member>
        <member name="M:SixLabors.Fonts.FontRectangle.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Fonts.FontRectangle.ToString">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Fonts.FontRectangle.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Fonts.FontRectangle.Equals(SixLabors.Fonts.FontRectangle)">
            <inheritdoc/>
        </member>
        <member name="T:SixLabors.Fonts.FontStyle">
            <summary>
            The font styles
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.FontStyle.Regular">
            <summary>
            Regular
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.FontStyle.Bold">
            <summary>
            Bold
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.FontStyle.Italic">
            <summary>
            Italic
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.FontStyle.BoldItalic">
            <summary>
            Bold and Italic
            </summary>
        </member>
        <member name="T:SixLabors.Fonts.Glyph">
            <summary>
            A glyph from a particular font face.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.Glyph.GlyphMetrics">
            <summary>
            Gets the glyph metrics.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.Glyph.BoundingBox(System.Numerics.Vector2,System.Single)">
            <summary>
            Calculates the bounding box.
            </summary>
            <param name="location">The location to calculate from.</param>
            <param name="dpi">The dpi scale the bounds in relation to.</param>
            <returns>The bounding box</returns>
        </member>
        <member name="M:SixLabors.Fonts.Glyph.RenderTo(SixLabors.Fonts.IGlyphRenderer,System.Numerics.Vector2,SixLabors.Fonts.TextOptions)">
            <summary>
            Renders the glyph to the render surface in font units relative to a bottom left origin at (0,0)
            </summary>
            <param name="surface">The surface.</param>
            <param name="location">The location.</param>
            <param name="options">The options to render using.</param>
            <exception cref="T:System.NotSupportedException">Too many control points.</exception>
        </member>
        <member name="T:SixLabors.Fonts.GlyphBounds">
            <summary>
            Represents the bounds of a <see cref="T:SixLabors.Fonts.Glyph"/> for a given <see cref="T:SixLabors.Fonts.Unicode.CodePoint"/>.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.GlyphBounds.#ctor(SixLabors.Fonts.Unicode.CodePoint,SixLabors.Fonts.FontRectangle)">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Fonts.GlyphBounds"/> struct.
            </summary>
            <param name="codePoint">The Unicode codepoint for the glyph.</param>
            <param name="bounds">The glyph bounds.</param>
        </member>
        <member name="P:SixLabors.Fonts.GlyphBounds.Codepoint">
            <summary>
            Gets the Unicode codepoint of the glyph.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.GlyphBounds.Bounds">
            <summary>
            Gets the glyph bounds.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.GlyphBounds.ToString">
            <inheritdoc/>
        </member>
        <member name="T:SixLabors.Fonts.GlyphLayout">
            <summary>
            A glyphs layout and location
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.GlyphLayout.Glyph">
            <summary>
            Gets the glyph.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.GlyphLayout.CodePoint">
            <summary>
            Gets the codepoint represented by this glyph.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.GlyphLayout.Location">
            <summary>
            Gets the location.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.GlyphLayout.Ascender">
            <summary>
            Gets the ascender
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.GlyphLayout.Descender">
            <summary>
            Gets the ascender
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.GlyphLayout.LineGap">
            <summary>
            Gets the lie gap
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.GlyphLayout.LineHeight">
            <summary>
            Gets the line height of the glyph.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.GlyphLayout.Width">
            <summary>
            Gets the width.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.GlyphLayout.Height">
            <summary>
            Gets the height.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.GlyphLayout.IsStartOfLine">
            <summary>
            Gets a value indicating whether this glyph is the first glyph on a new line.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.GlyphLayout.IsWhiteSpace">
            <summary>
            Gets a value indicating whether the glyph represents a whitespace character.
            </summary>
            <returns>The <see cref="T:System.Boolean"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.GlyphLayout.ToString">
            <inheritdoc/>
        </member>
        <member name="T:SixLabors.Fonts.GlyphMetrics">
            <summary>
            Represents a glyph metric from a particular font face.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.GlyphMetrics.FontMetrics">
            <summary>
            Gets the font metrics.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.GlyphMetrics.CodePoint">
            <summary>
            Gets the Unicode codepoint of the glyph.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.GlyphMetrics.AdvanceWidth">
            <summary>
            Gets the advance width for horizontal layout, expressed in font units.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.GlyphMetrics.AdvanceHeight">
            <summary>
            Gets the advance height for vertical layout, expressed in font units.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.GlyphMetrics.LeftSideBearing">
            <summary>
            Gets the left side bearing for horizontal layout, expressed in font units.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.GlyphMetrics.RightSideBearing">
            <summary>
            Gets the right side bearing for horizontal layout, expressed in font units.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.GlyphMetrics.TopSideBearing">
            <summary>
            Gets the top side bearing for vertical layout, expressed in font units.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.GlyphMetrics.BottomSideBearing">
            <summary>
            Gets the bottom side bearing for vertical layout, expressed in font units.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.GlyphMetrics.Width">
            <summary>
            Gets the width, expressed in font units.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.GlyphMetrics.Height">
            <summary>
            Gets the height, expressed in font units.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.GlyphMetrics.GlyphType">
            <summary>
            Gets the glyph type.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.GlyphMetrics.GlyphColor">
            <summary>
            Gets the color of this glyph when the <see cref="P:SixLabors.Fonts.GlyphMetrics.GlyphType"/> is <see cref="F:SixLabors.Fonts.GlyphType.ColrLayer"/>
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.GlyphMetrics.UnitsPerEm">
            <inheritdoc cref="P:SixLabors.Fonts.FontMetrics.UnitsPerEm"/>
        </member>
        <member name="P:SixLabors.Fonts.GlyphMetrics.ScaleFactor">
            <inheritdoc cref="P:SixLabors.Fonts.FontMetrics.ScaleFactor"/>
        </member>
        <member name="P:SixLabors.Fonts.GlyphMetrics.GlyphId">
            <summary>
            Gets the glyph Id.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.GlyphMetrics.CloneForRendering(SixLabors.Fonts.GlyphMetrics,SixLabors.Fonts.TextRun,SixLabors.Fonts.Unicode.CodePoint)">
            <summary>
            Performs a semi-deep clone (FontMetrics are not cloned) for rendering
            This allows caching the original in the font metrics.
            </summary>
            <param name="other">The original glyph metrics.</param>
            <param name="textRun">The text run this glyph is a member of.</param>
            <param name="codePoint">The codepoint for this glyph.</param>
            <returns>The new <see cref="T:SixLabors.Fonts.GlyphMetrics"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.GlyphMetrics.GetOutline">
            <summary>
            Gets the outline for the current glyph.
            </summary>
            <returns>The <see cref="T:SixLabors.Fonts.Tables.General.Glyphs.GlyphOutline"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.GlyphMetrics.GetBounds">
            <summary>
            Gets the bounds.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.GlyphMetrics.ApplyOffset(System.Int16,System.Int16)">
            <summary>
            Apply an offset to the glyph.
            </summary>
            <param name="x">The x-offset.</param>
            <param name="y">The y-offset.</param>
        </member>
        <member name="M:SixLabors.Fonts.GlyphMetrics.ApplyAdvance(System.Int16,System.Int16)">
            <summary>
            Applies an advance to the glyph.
            </summary>
            <param name="x">The x-advance.</param>
            <param name="y">The y-advance.</param>
        </member>
        <member name="M:SixLabors.Fonts.GlyphMetrics.SetAdvanceWidth(System.UInt16)">
            <summary>
            Sets a new advance width.
            </summary>
            <param name="x">The x-advance.</param>
        </member>
        <member name="M:SixLabors.Fonts.GlyphMetrics.SetAdvanceHeight(System.UInt16)">
            <summary>
            Sets a new advance height.
            </summary>
            <param name="y">The y-advance.</param>
        </member>
        <member name="M:SixLabors.Fonts.GlyphMetrics.RenderTo(SixLabors.Fonts.IGlyphRenderer,System.Single,System.Numerics.Vector2,SixLabors.Fonts.TextOptions)">
            <summary>
            Renders the glyph to the render surface in font units relative to a bottom left origin at (0,0)
            </summary>
            <param name="surface">The surface.</param>
            <param name="pointSize">Size of the point.</param>
            <param name="location">The location.</param>
            <param name="options">The options used to influence the rendering of this glyph.</param>
            <exception cref="T:System.NotSupportedException">Too many control points</exception>
        </member>
        <member name="T:SixLabors.Fonts.GlyphPositioningCollection">
            <summary>
            Represents a collection of glyph metrics that are mapped to input codepoints.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.GlyphPositioningCollection.glyphs">
            <summary>
            Contains a map the index of a map within the collection, non-sequential codepoint offsets, and their glyph ids, point size, and mtrics.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.GlyphPositioningCollection.#ctor(SixLabors.Fonts.TextOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Fonts.GlyphPositioningCollection"/> class.
            </summary>
            <param name="textOptions">The text options.</param>
        </member>
        <member name="P:SixLabors.Fonts.GlyphPositioningCollection.Count">
            <inheritdoc />
        </member>
        <member name="P:SixLabors.Fonts.GlyphPositioningCollection.IsVerticalLayoutMode">
            <inheritdoc />
        </member>
        <member name="P:SixLabors.Fonts.GlyphPositioningCollection.TextOptions">
            <inheritdoc />
        </member>
        <member name="P:SixLabors.Fonts.GlyphPositioningCollection.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:SixLabors.Fonts.GlyphPositioningCollection.GetGlyphShapingData(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:SixLabors.Fonts.GlyphPositioningCollection.AddShapingFeature(System.Int32,SixLabors.Fonts.Tables.AdvancedTypographic.TagEntry)">
            <inheritdoc />
        </member>
        <member name="M:SixLabors.Fonts.GlyphPositioningCollection.EnableShapingFeature(System.Int32,SixLabors.Fonts.Tables.AdvancedTypographic.Tag)">
            <inheritdoc />
        </member>
        <member name="M:SixLabors.Fonts.GlyphPositioningCollection.DisableShapingFeature(System.Int32,SixLabors.Fonts.Tables.AdvancedTypographic.Tag)">
            <inheritdoc />
        </member>
        <member name="M:SixLabors.Fonts.GlyphPositioningCollection.TryGetGlyphMetricsAtOffset(System.Int32,System.Single@,System.Boolean@,System.Collections.Generic.IReadOnlyList{SixLabors.Fonts.GlyphMetrics}@)">
            <summary>
            Gets the glyph metrics at the given codepoint offset.
            </summary>
            <param name="offset">The zero-based index within the input codepoint collection.</param>
            <param name="pointSize">The font size in PT units of the font containing this glyph.</param>
            <param name="isDecomposed">Whether the glyph is the result of a decomposition substitution.</param>
            <param name="metrics">
            When this method returns, contains the glyph metrics associated with the specified offset,
            if the value is found; otherwise, the default value for the type of the metrics parameter.
            This parameter is passed uninitialized.
            </param>
            <returns>The metrics.</returns>
        </member>
        <member name="M:SixLabors.Fonts.GlyphPositioningCollection.TryUpdate(SixLabors.Fonts.Font,SixLabors.Fonts.GlyphSubstitutionCollection)">
            <summary>
            Updates the collection of glyph ids to the metrics collection to overwrite any glyphs that have been previously
            identified as fallbacks.
            </summary>
            <param name="font">The font face with metrics.</param>
            <param name="collection">The glyph substitution collection.</param>
            <returns><see langword="true"/> if the metrics collection does not contain any fallbacks; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.GlyphPositioningCollection.TryAdd(SixLabors.Fonts.Font,SixLabors.Fonts.GlyphSubstitutionCollection)">
            <summary>
            Adds the collection of glyph ids to the metrics collection.
            identified as fallbacks.
            </summary>
            <param name="font">The font face with metrics.</param>
            <param name="collection">The glyph substitution collection.</param>
            <returns><see langword="true"/> if the metrics collection does not contain any fallbacks; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.GlyphPositioningCollection.UpdatePosition(SixLabors.Fonts.FontMetrics,System.UInt16)">
            <summary>
            Updates the position of the glyph at the specified index.
            </summary>
            <param name="fontMetrics">The font metrics.</param>
            <param name="index">The zero-based index of the element.</param>
        </member>
        <member name="M:SixLabors.Fonts.GlyphPositioningCollection.Advance(SixLabors.Fonts.FontMetrics,System.UInt16,System.UInt16,System.Int16,System.Int16)">
            <summary>
            Updates the advanced metrics of the glyphs at the given index and id,
            adding dx and dy to the current advance.
            </summary>
            <param name="fontMetrics">The font face with metrics.</param>
            <param name="index">The zero-based index of the element.</param>
            <param name="glyphId">The id of the glyph to offset.</param>
            <param name="dx">The delta x-advance.</param>
            <param name="dy">The delta y-advance.</param>
        </member>
        <member name="M:SixLabors.Fonts.GlyphPositioningCollection.ShouldProcess(SixLabors.Fonts.FontMetrics,System.UInt16)">
            <summary>
            Returns a value indicating whether the element at the given index should be processed.
            </summary>
            <param name="fontMetrics">The font face with metrics.</param>
            <param name="index">The zero-based index of the elements to position.</param>
            <returns><see langword="true"/> if the element should be processed; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:SixLabors.Fonts.GlyphRendererParameters">
            <summary>
            The combined set of properties that uniquely identify the glyph that is to be rendered
            at a particular size and dpi.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.GlyphRendererParameters.Font">
            <summary>
            Gets the name of the Font this glyph belongs to.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.GlyphRendererParameters.GlyphColor">
            <summary>
            Gets the color details of this glyph.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.GlyphRendererParameters.GlyphType">
            <summary>
            Gets the type of this glyph.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.GlyphRendererParameters.FontStyle">
            <summary>
            Gets the style of the font this glyph belongs to.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.GlyphRendererParameters.GlyphIndex">
            <summary>
            Gets the index of the glyph within the font tables.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.GlyphRendererParameters.CodePoint">
            <summary>
            Gets the codepoint represented by this glyph.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.GlyphRendererParameters.PointSize">
            <summary>
            Gets the rendered point size.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.GlyphRendererParameters.Dpi">
            <summary>
            Gets the dots-per-inch the glyph is to be rendered at.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.GlyphRendererParameters.TextRun">
            <summary>
            Gets the text run this glyph belongs to.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.GlyphRendererParameters.op_Equality(SixLabors.Fonts.GlyphRendererParameters,SixLabors.Fonts.GlyphRendererParameters)">
            <summary>
            Compares two <see cref="T:SixLabors.Fonts.GlyphRendererParameters"/> objects for equality.
            </summary>
            <param name="left">
            The <see cref="T:SixLabors.Fonts.GlyphRendererParameters"/> on the left side of the operand.
            </param>
            <param name="right">
            The <see cref="T:SixLabors.Fonts.GlyphRendererParameters"/> on the right side of the operand.
            </param>
            <returns>
            True if the current left is equal to the <paramref name="right"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:SixLabors.Fonts.GlyphRendererParameters.op_Inequality(SixLabors.Fonts.GlyphRendererParameters,SixLabors.Fonts.GlyphRendererParameters)">
            <summary>
            Compares two <see cref="T:SixLabors.Fonts.GlyphRendererParameters"/> objects for inequality.
            </summary>
            <param name="left">
            The <see cref="T:SixLabors.Fonts.GlyphRendererParameters"/> on the left side of the operand.
            </param>
            <param name="right">
            The <see cref="T:SixLabors.Fonts.GlyphRendererParameters"/> on the right side of the operand.
            </param>
            <returns>
            True if the current left is unequal to the <paramref name="right"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:SixLabors.Fonts.GlyphRendererParameters.Equals(SixLabors.Fonts.GlyphRendererParameters)">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Fonts.GlyphRendererParameters.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Fonts.GlyphRendererParameters.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:SixLabors.Fonts.GlyphShapingBounds">
            <summary>
            Represents the shaped bounds of a glyph.
            Uses a class over a struct for ease of use.
            </summary>
        </member>
        <member name="T:SixLabors.Fonts.GlyphShapingData">
            <summary>
            Contains supplementary data that allows the shaping of glyphs.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.GlyphShapingData.#ctor(SixLabors.Fonts.TextRun)">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Fonts.GlyphShapingData"/> class.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.GlyphShapingData.#ctor(SixLabors.Fonts.GlyphShapingData,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Fonts.GlyphShapingData"/> class.
            </summary>
            <param name="data">The data to copy properties from.</param>
            <param name="clearFeatures">Whether to clear features.</param>
        </member>
        <member name="P:SixLabors.Fonts.GlyphShapingData.GlyphId">
            <summary>
            Gets or sets the glyph id.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.GlyphShapingData.CodePoint">
            <summary>
            Gets or sets the leading codepoint.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.GlyphShapingData.CodePointCount">
            <summary>
            Gets or sets the codepoint count represented by this glyph.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.GlyphShapingData.Direction">
            <summary>
            Gets or sets the text direction.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.GlyphShapingData.TextRun">
            <summary>
            Gets or sets the text run this glyph belongs to.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.GlyphShapingData.LigatureId">
            <summary>
            Gets or sets the id of any ligature this glyph is a member of.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.GlyphShapingData.LigatureComponent">
            <summary>
            Gets or sets the ligature component index of the glyph.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.GlyphShapingData.MarkAttachment">
            <summary>
            Gets or sets the index of any mark attachment.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.GlyphShapingData.CursiveAttachment">
            <summary>
            Gets or sets the index of any cursive attachment.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.GlyphShapingData.Features">
            <summary>
            Gets or sets the collection of features.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.GlyphShapingData.Bounds">
            <summary>
            Gets or sets the shaping bounds.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.GlyphShapingData.IsDecomposed">
            <summary>
            Gets or sets a value indicating whether this glyph is the result of a decomposition substitution
            </summary>
        </member>
        <member name="T:SixLabors.Fonts.GlyphSubstitutionCollection">
            <summary>
            Represents a collection of glyph indices that are mapped to input codepoints.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.GlyphSubstitutionCollection.glyphs">
            <summary>
            Contains a map the index of a map within the collection, non-sequential codepoint offsets, and their glyph ids.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.GlyphSubstitutionCollection.#ctor(SixLabors.Fonts.TextOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Fonts.GlyphSubstitutionCollection"/> class.
            </summary>
            <param name="textOptions">The text options.</param>
        </member>
        <member name="P:SixLabors.Fonts.GlyphSubstitutionCollection.Count">
            <summary>
            Gets the number of glyphs ids contained in the collection.
            This may be more or less than original input codepoint count (due to substitution process).
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.GlyphSubstitutionCollection.IsVerticalLayoutMode">
            <inheritdoc />
        </member>
        <member name="P:SixLabors.Fonts.GlyphSubstitutionCollection.TextOptions">
            <inheritdoc />
        </member>
        <member name="P:SixLabors.Fonts.GlyphSubstitutionCollection.LigatureId">
            <summary>
            Gets or sets the running id of any ligature glyphs contained withing this collection are a member of.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.GlyphSubstitutionCollection.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:SixLabors.Fonts.GlyphSubstitutionCollection.GetGlyphShapingData(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:SixLabors.Fonts.GlyphSubstitutionCollection.GetGlyphShapingData(System.Int32,System.Int32@)">
            <summary>
            Gets the shaping data at the specified position.
            </summary>
            <param name="index">The zero-based index of the elements to get.</param>
            <param name="offset">The zero-based index within the input codepoint collection.</param>
            <returns>The <see cref="T:SixLabors.Fonts.GlyphShapingData"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.GlyphSubstitutionCollection.AddShapingFeature(System.Int32,SixLabors.Fonts.Tables.AdvancedTypographic.TagEntry)">
            <inheritdoc />
        </member>
        <member name="M:SixLabors.Fonts.GlyphSubstitutionCollection.EnableShapingFeature(System.Int32,SixLabors.Fonts.Tables.AdvancedTypographic.Tag)">
            <inheritdoc />
        </member>
        <member name="M:SixLabors.Fonts.GlyphSubstitutionCollection.DisableShapingFeature(System.Int32,SixLabors.Fonts.Tables.AdvancedTypographic.Tag)">
            <inheritdoc />
        </member>
        <member name="M:SixLabors.Fonts.GlyphSubstitutionCollection.AddGlyph(System.UInt16,SixLabors.Fonts.Unicode.CodePoint,SixLabors.Fonts.TextDirection,SixLabors.Fonts.TextRun,System.Int32)">
            <summary>
            Adds the glyph id and the codepoint it represents to the collection.
            </summary>
            <param name="glyphId">The id of the glyph to add.</param>
            <param name="codePoint">The codepoint the glyph represents.</param>
            <param name="direction">The resolved text direction for the codepoint.</param>
            <param name="textRun">The text run this glyph belongs to.</param>
            <param name="offset">The zero-based index within the input codepoint collection.</param>
        </member>
        <member name="M:SixLabors.Fonts.GlyphSubstitutionCollection.MoveGlyph(System.Int32,System.Int32)">
            <summary>
            Moves the specified glyph to the specified position.
            </summary>
            <param name="fromIndex">The index to move from.</param>
            <param name="toIndex">The index to move to.</param>
        </member>
        <member name="M:SixLabors.Fonts.GlyphSubstitutionCollection.Clear">
            <summary>
            Removes all elements from the collection.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.GlyphSubstitutionCollection.TryGetGlyphShapingDataAtOffset(System.Int32,System.Collections.Generic.IReadOnlyList{SixLabors.Fonts.GlyphShapingData}@)">
            <summary>
            Gets the specified glyph ids matching the given codepoint offset.
            </summary>
            <param name="offset">The zero-based index within the input codepoint collection.</param>
            <param name="data">
            When this method returns, contains the shaping data associated with the specified offset,
            if the value is found; otherwise, the default value for the type of the data parameter.
            This parameter is passed uninitialized.
            </param>
            <returns>
            <see langword="true"/> if the <see cref="T:SixLabors.Fonts.GlyphSubstitutionCollection"/> contains glyph ids
            for the specified offset; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:SixLabors.Fonts.GlyphSubstitutionCollection.Replace(System.Int32,System.UInt16)">
            <summary>
            Performs a 1:1 replacement of a glyph id at the given position.
            </summary>
            <param name="index">The zero-based index of the element to replace.</param>
            <param name="glyphId">The replacement glyph id.</param>
        </member>
        <member name="M:SixLabors.Fonts.GlyphSubstitutionCollection.Replace(System.Int32,System.ReadOnlySpan{System.Int32},System.UInt16,System.Int32)">
            <summary>
            Performs a 1:1 replacement of a glyph id at the given position while removing a series of glyph ids at the given positions within the sequence.
            </summary>
            <param name="index">The zero-based index of the element to replace.</param>
            <param name="removalIndices">The indices at which to remove elements.</param>
            <param name="glyphId">The replacement glyph id.</param>
            <param name="ligatureId">The ligature id.</param>
        </member>
        <member name="M:SixLabors.Fonts.GlyphSubstitutionCollection.Replace(System.Int32,System.Int32,System.UInt16)">
            <summary>
            Performs a 1:1 replacement of a glyph id at the given position while removing a series of glyph ids.
            </summary>
            <param name="index">The zero-based index of the element to replace.</param>
            <param name="count">The number of glyphs to remove.</param>
            <param name="glyphId">The replacement glyph id.</param>
        </member>
        <member name="M:SixLabors.Fonts.GlyphSubstitutionCollection.Replace(System.Int32,System.ReadOnlySpan{System.UInt16})">
            <summary>
            Replaces a single glyph id with a collection of glyph ids.
            </summary>
            <param name="index">The zero-based index of the element to replace.</param>
            <param name="glyphIds">The collection of replacement glyph ids.</param>
        </member>
        <member name="T:SixLabors.Fonts.GlyphType">
            <summary>
            Represents the various versions of a glyph records.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.GlyphType.Fallback">
            <summary>
            This is a fall back glyph due to a missing code point.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.GlyphType.Standard">
            <summary>
            This is a standard glyph to be drawn in the style the user defines.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.GlyphType.ColrLayer">
            <summary>
            This is a single layer of the multi-layer colored glyph (emoji).
            </summary>
        </member>
        <member name="T:SixLabors.Fonts.HintingMode">
            <summary>
            Defines modes to determine how to apply hinting. The use of mathematical instructions
            to adjust the display of an outline font so that it lines up with a rasterized grid.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.HintingMode.None">
            <summary>
            Do not hint the glyphs.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.HintingMode.HintY">
            <summary>
            Hint the glyphs in a vertical direction only. <see href="http://agg.sourceforge.net/antigrain.com/research/font_rasterization/"/>.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.HintingMode.HintXY">
            <summary>
            Hint the glyphs in both directions.
            </summary>
        </member>
        <member name="T:SixLabors.Fonts.HorizontalAlignment">
            <summary>
            Horizontal alignment modes.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.HorizontalAlignment.Left">
            <summary>
            Aligns text from the left.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.HorizontalAlignment.Right">
            <summary>
            Aligns text from the right.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.HorizontalAlignment.Center">
            <summary>
            Aligns text from the center.
            </summary>
        </member>
        <member name="T:SixLabors.Fonts.IColorGlyphRenderer">
            <summary>
            A surface that can have a glyph rendered to it as a series of actions, where the engine support colored glyphs (emoji).
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.IColorGlyphRenderer.SetColor(SixLabors.Fonts.GlyphColor)">
            <summary>
            Sets the color to use for the current glyph.
            </summary>
            <param name="color">The color to override the renders brush with.</param>
        </member>
        <member name="T:SixLabors.Fonts.GlyphColor">
            <summary>
            Provides access to the color details for the current glyph.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.GlyphColor.Blue">
            <summary>
            Gets the blue component
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.GlyphColor.Green">
            <summary>
            Gets the green component
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.GlyphColor.Red">
            <summary>
            Gets the red component
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.GlyphColor.Alpha">
            <summary>
            Gets the alpha component
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.GlyphColor.op_Equality(SixLabors.Fonts.GlyphColor,SixLabors.Fonts.GlyphColor)">
            <summary>
            Compares two <see cref="T:SixLabors.Fonts.GlyphColor"/> objects for equality.
            </summary>
            <param name="left">
            The <see cref="T:SixLabors.Fonts.GlyphColor"/> on the left side of the operand.
            </param>
            <param name="right">
            The <see cref="T:SixLabors.Fonts.GlyphColor"/> on the right side of the operand.
            </param>
            <returns>
            True if the current left is equal to the <paramref name="right"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:SixLabors.Fonts.GlyphColor.op_Inequality(SixLabors.Fonts.GlyphColor,SixLabors.Fonts.GlyphColor)">
            <summary>
            Compares two <see cref="T:SixLabors.Fonts.GlyphColor"/> objects for inequality.
            </summary>
            <param name="left">
            The <see cref="T:SixLabors.Fonts.GlyphColor"/> on the left side of the operand.
            </param>
            <param name="right">
            The <see cref="T:SixLabors.Fonts.GlyphColor"/> on the right side of the operand.
            </param>
            <returns>
            True if the current left is unequal to the <paramref name="right"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:SixLabors.Fonts.GlyphColor.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Fonts.GlyphColor.Equals(SixLabors.Fonts.GlyphColor)">
            <summary>
            Compares the <see cref="T:SixLabors.Fonts.GlyphColor"/> for equality to this color.
            </summary>
            <param name="other">
            The other <see cref="T:SixLabors.Fonts.GlyphColor"/> to compare to.
            </param>
            <returns>
            True if the current color is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:SixLabors.Fonts.GlyphColor.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:SixLabors.Fonts.IFontCollection">
            <summary>
            A readable and writable collection of fonts.
            </summary>
            <seealso cref="T:SixLabors.Fonts.IReadOnlyFontCollection" />
        </member>
        <member name="M:SixLabors.Fonts.IFontCollection.Add(System.String)">
            <summary>
            Adds a font to the collection.
            </summary>
            <param name="path">The filesystem path to the font file.</param>
            <returns>The new <see cref="T:SixLabors.Fonts.FontFamily"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.IFontCollection.Add(System.String,SixLabors.Fonts.FontDescription@)">
            <summary>
            Adds a font to the collection.
            </summary>
            <param name="path">The filesystem path to the font file.</param>
            <param name="description">The description of the added font.</param>
            <returns>The new <see cref="T:SixLabors.Fonts.FontFamily"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.IFontCollection.Add(System.IO.Stream)">
            <summary>
            Adds a font to the collection.
            </summary>
            <param name="stream">The font stream.</param>
            <returns>The new <see cref="T:SixLabors.Fonts.FontFamily"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.IFontCollection.Add(System.IO.Stream,SixLabors.Fonts.FontDescription@)">
            <summary>
            Adds a font to the collection.
            </summary>
            <param name="stream">The font stream.</param>
            <param name="description">The description of the added font.</param>
            <returns>The new <see cref="T:SixLabors.Fonts.FontFamily"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.IFontCollection.AddCollection(System.String)">
            <summary>
            Adds a true type font collection (.ttc).
            </summary>
            <param name="path">The font collection path.</param>
            <returns>The new <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.IFontCollection.AddCollection(System.String,System.Collections.Generic.IEnumerable{SixLabors.Fonts.FontDescription}@)">
            <summary>
            Adds a true type font collection (.ttc).
            </summary>
            <param name="path">The font collection path.</param>
            <param name="descriptions">The descriptions of the added fonts.</param>
            <returns>The new <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.IFontCollection.AddCollection(System.IO.Stream)">
            <summary>
            Adds a true type font collection (.ttc).
            </summary>
            <param name="stream">The font stream.</param>
            <returns>The new <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.IFontCollection.AddCollection(System.IO.Stream,System.Collections.Generic.IEnumerable{SixLabors.Fonts.FontDescription}@)">
            <summary>
            Adds a true type font collection (.ttc).
            </summary>
            <param name="stream">The font stream.</param>
            <param name="descriptions">The descriptions of the added fonts.</param>
            <returns>The new <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.IFontCollection.Add(System.String,System.Globalization.CultureInfo)">
            <summary>
            Adds a font to the collection.
            </summary>
            <param name="path">The filesystem path to the font file.</param>
            <param name="culture">The culture of the font to add.</param>
            <returns>The new <see cref="T:SixLabors.Fonts.FontFamily"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.IFontCollection.Add(System.String,System.Globalization.CultureInfo,SixLabors.Fonts.FontDescription@)">
            <summary>
            Adds a font to the collection.
            </summary>
            <param name="path">The filesystem path to the font file.</param>
            <param name="culture">The culture of the font to add.</param>
            <param name="description">The description of the added font.</param>
            <returns>The new <see cref="T:SixLabors.Fonts.FontFamily"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.IFontCollection.Add(System.IO.Stream,System.Globalization.CultureInfo)">
            <summary>
            Adds a font to the collection.
            </summary>
            <param name="stream">The font stream.</param>
            <param name="culture">The culture of the font to add.</param>
            <returns>The new <see cref="T:SixLabors.Fonts.FontFamily"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.IFontCollection.Add(System.IO.Stream,System.Globalization.CultureInfo,SixLabors.Fonts.FontDescription@)">
            <summary>
            Adds a font to the collection.
            </summary>
            <param name="stream">The font stream.</param>
            <param name="culture">The culture of the font to add.</param>
            <param name="description">The description of the added font.</param>
            <returns>The new <see cref="T:SixLabors.Fonts.FontFamily"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.IFontCollection.AddCollection(System.String,System.Globalization.CultureInfo)">
            <summary>
            Adds a true type font collection (.ttc).
            </summary>
            <param name="path">The font collection path.</param>
            <param name="culture">The culture of the fonts to add.</param>
            <returns>The new <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.IFontCollection.AddCollection(System.String,System.Globalization.CultureInfo,System.Collections.Generic.IEnumerable{SixLabors.Fonts.FontDescription}@)">
            <summary>
            Adds a true type font collection (.ttc).
            </summary>
            <param name="path">The font collection path.</param>
            <param name="culture">The culture of the fonts to add.</param>
            <param name="descriptions">The descriptions of the added fonts.</param>
            <returns>The new <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.IFontCollection.AddCollection(System.IO.Stream,System.Globalization.CultureInfo)">
            <summary>
            Adds a true type font collection (.ttc).
            </summary>
            <param name="stream">The font stream.</param>
            <param name="culture">The culture of the fonts to add.</param>
            <returns>The new <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.IFontCollection.AddCollection(System.IO.Stream,System.Globalization.CultureInfo,System.Collections.Generic.IEnumerable{SixLabors.Fonts.FontDescription}@)">
            <summary>
            Adds a true type font collection (.ttc).
            </summary>
            <param name="stream">The font stream.</param>
            <param name="culture">The culture of the fonts to add.</param>
            <param name="descriptions">The descriptions of the added fonts.</param>
            <returns>The new <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</returns>
        </member>
        <member name="T:SixLabors.Fonts.IFontMetricsCollection">
            <summary>
            Represents a collection of <see cref="T:SixLabors.Fonts.FontMetrics"/>
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.IFontMetricsCollection.AddMetrics(SixLabors.Fonts.FontMetrics,System.Globalization.CultureInfo)">
            <summary>
            Adds the font metrics and culture to the <see cref="T:SixLabors.Fonts.IFontMetricsCollection"/>.
            </summary>
            <param name="metrics">The font metrics to add.</param>
            <param name="culture">The culture of the font metrics to add.</param>
            <returns>The new <see cref="T:SixLabors.Fonts.FontFamily"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.IFontMetricsCollection.AddMetrics(SixLabors.Fonts.FontMetrics)">
            <summary>
            Adds the font metrics to the <see cref="T:SixLabors.Fonts.IFontMetricsCollection"/>.
            </summary>
            <param name="metrics">The font metrics to add.</param>
        </member>
        <member name="T:SixLabors.Fonts.IGlyphDecorationRenderer">
            <summary>
            A surface that can have a glyph rendered to it as a series of actions with the options of providing glyph decoration details.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.IGlyphDecorationRenderer.EnabledDecorations">
            <summary>
            Provides a callback to enable custom logic to request decoration details.
            a custom TextRun might use alternative triggers to determine what decorations it needs access to.
            </summary>
            <returns>The text decorations the render wants render info for.</returns>
        </member>
        <member name="M:SixLabors.Fonts.IGlyphDecorationRenderer.SetDecoration(SixLabors.Fonts.TextDecorations,System.Numerics.Vector2,System.Numerics.Vector2,System.Single)">
            <summary>
            Provides the positions required for drawing text decorations onto the <see cref="T:SixLabors.Fonts.IGlyphRenderer"/>
            </summary>
            <param name="textDecorations">The type of decoration these details correspond to.</param>
            <param name="start">The start position from where to draw the decorations from.</param>
            <param name="end">The end position from where to draw the decorations to.</param>
            <param name="thickness">The thickness to draw the decoration.</param>
        </member>
        <member name="T:SixLabors.Fonts.IGlyphRenderer">
            <summary>
            A surface that can have a glyph rendered to it as a series of actions.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.IGlyphRenderer.BeginFigure">
            <summary>
            Begins the figure.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.IGlyphRenderer.MoveTo(System.Numerics.Vector2)">
            <summary>
            Sets a new start point to draw lines from.
            </summary>
            <param name="point">The point.</param>
        </member>
        <member name="M:SixLabors.Fonts.IGlyphRenderer.QuadraticBezierTo(System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
            Draw a quadratic bezier curve connecting the previous point to <paramref name="point"/>.
            </summary>
            <param name="secondControlPoint">The second control point.</param>
            <param name="point">The point.</param>
        </member>
        <member name="M:SixLabors.Fonts.IGlyphRenderer.CubicBezierTo(System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
            Draw a cubic bezier curve connecting the previous point to <paramref name="point"/>.
            </summary>
            <param name="secondControlPoint">The second control point.</param>
            <param name="thirdControlPoint">The third control point.</param>
            <param name="point">The point.</param>
        </member>
        <member name="M:SixLabors.Fonts.IGlyphRenderer.LineTo(System.Numerics.Vector2)">
            <summary>
            Draw a straight line connecting the previous point to <paramref name="point"/>.
            </summary>
            <param name="point">The point.</param>
        </member>
        <member name="M:SixLabors.Fonts.IGlyphRenderer.EndFigure">
            <summary>
            Ends the figure.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.IGlyphRenderer.EndGlyph">
            <summary>
            Ends the glyph.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.IGlyphRenderer.BeginGlyph(SixLabors.Fonts.FontRectangle,SixLabors.Fonts.GlyphRendererParameters)">
            <summary>
            Begins the glyph.
            </summary>
            <param name="bounds">The bounds the glyph will be rendered at and at what size.</param>
            <param name="parameters">The set of parameters that uniquely represents a version of a glyph in at particular font size, font family, font style and DPI.</param>
            <returns>Returns true if the glyph should be rendered otherwise it returns false.</returns>
        </member>
        <member name="M:SixLabors.Fonts.IGlyphRenderer.EndText">
            <summary>
            Called once all glyphs have completed rendering.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.IGlyphRenderer.BeginText(SixLabors.Fonts.FontRectangle)">
            <summary>
            Called before any glyphs have been rendered.
            </summary>
            <param name="bounds">The bounds the text will be rendered at and at whats size.</param>
        </member>
        <member name="T:SixLabors.Fonts.IGlyphRendererExtensions">
            <summary>
            A surface that can have a glyph rendered to it as a series of actions.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.IGlyphRendererExtensions.Render(SixLabors.Fonts.IGlyphRenderer,System.ReadOnlySpan{System.Char},SixLabors.Fonts.TextOptions)">
            <summary>
            Renders the text.
            </summary>
            <param name="renderer">The target renderer surface.</param>
            <param name="text">The text.</param>
            <param name="options">The options.</param>
            <returns>Returns the original <paramref name="renderer"/></returns>
        </member>
        <member name="T:SixLabors.Fonts.IGlyphShapingCollection">
            <summary>
            Defines the contract for glyph shaping collections.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.IGlyphShapingCollection.Count">
            <summary>
            Gets the collection count.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.IGlyphShapingCollection.IsVerticalLayoutMode">
            <summary>
            Gets a value indicating whether the text layout mode is vertical.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.IGlyphShapingCollection.TextOptions">
            <summary>
            Gets the text options used by this collection.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.IGlyphShapingCollection.Item(System.Int32)">
            <summary>
            Gets the glyph id at the specified index.
            </summary>
            <param name="index">The zero-based index of the elements to get.</param>
            <returns>The <see cref="T:System.UInt16"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.IGlyphShapingCollection.GetGlyphShapingData(System.Int32)">
            <summary>
            Gets the shaping data at the specified position.
            </summary>
            <param name="index">The zero-based index of the elements to get.</param>
            <returns>The <see cref="T:SixLabors.Fonts.GlyphShapingData"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.IGlyphShapingCollection.AddShapingFeature(System.Int32,SixLabors.Fonts.Tables.AdvancedTypographic.TagEntry)">
            <summary>
            Adds the shaping feature to the collection which should be applied to the glyph at a specified index.
            </summary>
            <param name="index">The zero-based index of the element.</param>
            <param name="feature">The feature to apply.</param>
        </member>
        <member name="M:SixLabors.Fonts.IGlyphShapingCollection.EnableShapingFeature(System.Int32,SixLabors.Fonts.Tables.AdvancedTypographic.Tag)">
            <summary>
            Enables a previously added shaping feature.
            </summary>
            <param name="index">The zero-based index of the element.</param>
            <param name="feature">The feature to enable.</param>
        </member>
        <member name="M:SixLabors.Fonts.IGlyphShapingCollection.DisableShapingFeature(System.Int32,SixLabors.Fonts.Tables.AdvancedTypographic.Tag)">
            <summary>
            Disables a previously added shaping feature.
            </summary>
            <param name="index">The zero-based index of the element.</param>
            <param name="feature">The feature to disable.</param>
        </member>
        <member name="F:SixLabors.Fonts.IO.ZlibInflateStream.rawStream">
            <summary>
            The raw stream containing the uncompressed image data.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.IO.ZlibInflateStream.isDisposed">
            <summary>
            A value indicating whether this instance of the given entity has been disposed.
            </summary>
            <value><see langword="true"/> if this instance has been disposed; otherwise, <see langword="false"/>.</value>
            <remarks>
            If the entity is disposed, it must not be disposed a second
            time. The isDisposed field is set the first time the entity
            is disposed. If the isDisposed field is true, then the Dispose()
            method will not dispose again. This help not to prolong the entity's
            life in the Garbage Collector.
            </remarks>
        </member>
        <member name="F:SixLabors.Fonts.IO.ZlibInflateStream.crcRead">
            <summary>
            The read crc data.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.IO.ZlibInflateStream.deflateStream">
            <summary>
            The stream responsible for decompressing the input stream.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.IO.ZlibInflateStream.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Fonts.IO.ZlibInflateStream"/> class.
            </summary>
            <param name="stream">The stream.</param>
            <exception cref="T:System.Exception">
            Thrown if the compression method is incorrect.
            </exception>
        </member>
        <member name="P:SixLabors.Fonts.IO.ZlibInflateStream.CanRead">
            <inheritdoc/>
        </member>
        <member name="P:SixLabors.Fonts.IO.ZlibInflateStream.CanSeek">
            <inheritdoc/>
        </member>
        <member name="P:SixLabors.Fonts.IO.ZlibInflateStream.CanWrite">
            <inheritdoc/>
        </member>
        <member name="P:SixLabors.Fonts.IO.ZlibInflateStream.Length">
            <inheritdoc/>
        </member>
        <member name="P:SixLabors.Fonts.IO.ZlibInflateStream.Position">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Fonts.IO.ZlibInflateStream.Flush">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Fonts.IO.ZlibInflateStream.Read(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Fonts.IO.ZlibInflateStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Fonts.IO.ZlibInflateStream.SetLength(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Fonts.IO.ZlibInflateStream.Write(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Fonts.IO.ZlibInflateStream.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:SixLabors.Fonts.IReadOnlyFontCollection">
            <summary>
            Represents a readonly collection of fonts.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.IReadOnlyFontCollection.Families">
            <summary>
            Gets the collection of <see cref="T:SixLabors.Fonts.FontFamily"/> in this <see cref="T:SixLabors.Fonts.IReadOnlyFontCollection"/>
            using the invariant culture.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.IReadOnlyFontCollection.Get(System.String)">
            <summary>
            Gets the specified font family matching the invariant culture and font family name.
            </summary>
            <param name="name">The font family name.</param>
            <returns>The first <see cref="T:SixLabors.Fonts.FontFamily"/> matching the given name.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is <see langword="null"/></exception>
            <exception cref="T:SixLabors.Fonts.FontFamilyNotFoundException">The collection contains no matches.</exception>
        </member>
        <member name="M:SixLabors.Fonts.IReadOnlyFontCollection.TryGet(System.String,SixLabors.Fonts.FontFamily@)">
            <summary>
            Gets the specified font family matching the invariant culture and font family name.
            </summary>
            <param name="name">The font family name.</param>
            <param name="family">
            When this method returns, contains the family associated with the specified name,
            if the name is found; otherwise, the default value for the type of the family parameter.
            This parameter is passed uninitialized.
            </param>
            <returns>
            <see langword="true"/> if the <see cref="T:SixLabors.Fonts.IReadOnlyFontCollection"/> contains a family
            with the specified name; otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is <see langword="null"/></exception>
        </member>
        <member name="M:SixLabors.Fonts.IReadOnlyFontCollection.GetByCulture(System.Globalization.CultureInfo)">
            <summary>
            Gets the collection of <see cref="T:SixLabors.Fonts.FontFamily"/> in this <see cref="T:SixLabors.Fonts.FontCollection"/>
            using the given culture.
            </summary>
            <param name="culture">The culture of the families to return.</param>
            <returns>The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.IReadOnlyFontCollection.Get(System.String,System.Globalization.CultureInfo)">
            <summary>
            Gets the specified font family matching the given culture and font family name.
            </summary>
            <param name="name">The font family name.</param>
            <param name="culture">The culture to use when searching for a match.</param>
            <returns>The first <see cref="T:SixLabors.Fonts.FontFamily"/> matching the given name.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is <see langword="null"/></exception>
            <exception cref="T:SixLabors.Fonts.FontFamilyNotFoundException">The collection contains no matches.</exception>
        </member>
        <member name="M:SixLabors.Fonts.IReadOnlyFontCollection.TryGet(System.String,System.Globalization.CultureInfo,SixLabors.Fonts.FontFamily@)">
            <summary>
            Gets the specified font family matching the given culture and font family name.
            </summary>
            <param name="name">The font family name.</param>
            <param name="culture">The culture to use when searching for a match.</param>
            <param name="family">
            When this method returns, contains the family associated with the specified name,
            if the name is found; otherwise, the default value for the type of the family parameter.
            This parameter is passed uninitialized.
            </param>
            <returns>
            <see langword="true"/> if the <see cref="T:SixLabors.Fonts.IReadOnlyFontCollection"/> contains a family
            with the specified name; otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is <see langword="null"/></exception>
        </member>
        <member name="T:SixLabors.Fonts.IReadOnlyFontMetricsCollection">
            <summary>
            Represents a readonly collection of font metrics.
            The interface uses compiler pattern matching to provide enumeration capabilities.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.IReadOnlyFontMetricsCollection.TryGetMetrics(System.String,System.Globalization.CultureInfo,SixLabors.Fonts.FontStyle,SixLabors.Fonts.FontMetrics@)">
            <summary>
            Gets the specified font metrics matching the given culture and font family name.
            </summary>
            <param name="name">The font family name.</param>
            <param name="culture">The culture to use when searching for a match.</param>
            <param name="style">The font style to use when searching for a match.</param>
            <param name="metrics">
            When this method returns, contains the metrics associated with the specified name,
            if the name is found; otherwise, the default value for the type of the family parameter.
            This parameter is passed uninitialized.
            </param>
            <returns>
            <see langword="true"/> if the <see cref="T:SixLabors.Fonts.IReadOnlyFontMetricsCollection"/> contains font metrics
            with the specified name; otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is <see langword="null"/></exception>
        </member>
        <member name="M:SixLabors.Fonts.IReadOnlyFontMetricsCollection.GetAllMetrics(System.String,System.Globalization.CultureInfo)">
            <summary>
            Gets the collection of available font metrics for a given culture and font family name.
            </summary>
            <param name="name">The font family name.</param>
            <param name="culture">The culture to use when searching for a match.</param>
            <returns>The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is <see langword="null"/></exception>
        </member>
        <member name="M:SixLabors.Fonts.IReadOnlyFontMetricsCollection.GetAllStyles(System.String,System.Globalization.CultureInfo)">
            <summary>
            Gets the collection of available font styles for a given culture and font family name.
            </summary>
            <param name="name">The font family name.</param>
            <param name="culture">The culture to use when searching for a match.</param>
            <returns>The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is <see langword="null"/></exception>
        </member>
        <member name="M:SixLabors.Fonts.IReadOnlyFontMetricsCollection.GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="T:SixLabors.Fonts.IReadOnlySystemFontCollection">
            <summary>
            Represents a readonly collection of Operating System fonts.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.IReadOnlySystemFontCollection.SearchDirectories">
            <summary>
            <para>
            Gets the collection of Operating System directories that were searched for font families.
            </para>
            </summary>
        </member>
        <member name="T:SixLabors.Fonts.KerningMode">
            <summary>
            Kerning is the contextual adjustment of inter-glyph spacing.
            This property controls metric kerning, kerning that utilizes adjustment data contained in the font.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.KerningMode.Normal">
            <summary>
            Specifies that kerning is applied.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.KerningMode.None">
            <summary>
            Specifies that kerning is not applied.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.KerningMode.Auto">
            <summary>
            Specifies that kerning is applied at the discretion of the layout engine.
            </summary>
        </member>
        <member name="T:SixLabors.Fonts.LayoutMode">
            <summary>
            Defines modes to determine the layout direction of text.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.LayoutMode.HorizontalTopBottom">
            <summary>
            Text is laid out horizontally from top to bottom.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.LayoutMode.HorizontalBottomTop">
            <summary>
            Text is laid out horizontally from bottom to top.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.LayoutMode.VerticalLeftRight">
            <summary>
            Text is laid out vertically from left to right.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.LayoutMode.VerticalRightLeft">
            <summary>
            Text is laid out vertically from right to left.
            </summary>
        </member>
        <member name="T:SixLabors.Fonts.Native.CFStringEncoding">
            <summary>
            An integer type for constants used to specify supported string encodings in various CFString functions.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Native.CFStringEncoding.kCFStringEncodingUTF8">
            <summary>
            An encoding constant that identifies the UTF 8 encoding.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Native.CFStringEncoding.kCFStringEncodingUTF16LE">
            <summary>
            An encoding constant that identifies kTextEncodingUnicodeDefault + kUnicodeUTF16LEFormat encoding. This constant specifies little-endian byte order.
            </summary>
        </member>
        <member name="T:SixLabors.Fonts.Native.CFURLPathStyle">
            <summary>
            Options you can use to determine how CFURL functions parse a file system path name.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Native.CFURLPathStyle.kCFURLPOSIXPathStyle">
            <summary>
            Indicates a POSIX style path name. Components are slash delimited. A leading slash indicates an absolute path; a trailing slash is not significant.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.Native.CoreFoundation.CFArrayGetCount(System.IntPtr)">
            <summary>
            Returns the number of values currently in an array.
            </summary>
            <param name="theArray">The array to examine.</param>
            <returns>The number of values in <paramref name="theArray"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.Native.CoreFoundation.CFArrayGetTypeID">
            <summary>
            Returns the type identifier for the CFArray opaque type.
            </summary>
            <returns>The type identifier for the CFArray opaque type.</returns>
            <remarks>CFMutableArray objects have the same type identifier as CFArray objects.</remarks>
        </member>
        <member name="M:SixLabors.Fonts.Native.CoreFoundation.CFArrayGetValueAtIndex(System.IntPtr,System.Int64)">
            <summary>
            Retrieves a value at a given index.
            </summary>
            <param name="theArray">The array to examine.</param>
            <param name="idx">The index of the value to retrieve. If the index is outside the index space of <paramref name="theArray"/> (<c>0</c> to <c>N-1</c> inclusive where <c>N</c> is the count of <paramref name="theArray"/>), the behavior is undefined.</param>
            <returns>The value at the <paramref name="idx"/> index in <paramref name="theArray"/>. If the return value is a Core Foundation Object, ownership follows The Get Rule.</returns>
        </member>
        <member name="M:SixLabors.Fonts.Native.CoreFoundation.CFGetTypeID(System.IntPtr)">
            <summary>
            Returns the unique identifier of an opaque type to which a Core Foundation object belongs.
            </summary>
            <param name="cf">The CFType object to examine.</param>
            <returns>A value of type <c>CFTypeID</c> that identifies the opaque type of <paramref name="cf"/>.</returns>
            <remarks>
            This function returns a value that uniquely identifies the opaque type of any Core Foundation object.
            You can compare this value with the known <c>CFTypeID</c> identifier obtained with a “GetTypeID” function specific to a type, for example CFDateGetTypeID.
            These values might change from release to release or platform to platform.
            </remarks>
        </member>
        <member name="M:SixLabors.Fonts.Native.CoreFoundation.CFStringGetLength(System.IntPtr)">
            <summary>
            Returns the number (in terms of UTF-16 code pairs) of Unicode characters in a string.
            </summary>
            <param name="theString">The string to examine.</param>
            <returns>The number (in terms of UTF-16 code pairs) of characters stored in <paramref name="theString"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.Native.CoreFoundation.CFStringGetCString(System.IntPtr,System.Byte[],System.Int64,SixLabors.Fonts.Native.CFStringEncoding)">
            <summary>
            Copies the character contents of a string to a local C string buffer after converting the characters to a given encoding.
            </summary>
            <param name="theString">The string whose contents you wish to access.</param>
            <param name="buffer">
            The C string buffer into which to copy the string. On return, the buffer contains the converted characters. If there is an error in conversion, the buffer contains only partial results.
            The buffer must be large enough to contain the converted characters and a NUL terminator. For example, if the string is <c>Toby</c>, the buffer must be at least 5 bytes long.
            </param>
            <param name="bufferSize">The length of <paramref name="buffer"/> in bytes.</param>
            <param name="encoding">The string encoding to which the character contents of <paramref name="theString"/> should be converted. The encoding must specify an 8-bit encoding.</param>
            <returns><see langword="true"/> upon success or <see langword="false"/> if the conversion fails or the provided buffer is too small.</returns>
            <remarks>This function is useful when you need your own copy of a string’s character data as a C string. You also typically call it as a “backup” when a prior call to the <see cref="M:SixLabors.Fonts.Native.CoreFoundation.CFStringGetCStringPtr(System.IntPtr,SixLabors.Fonts.Native.CFStringEncoding)"/> function fails.</remarks>
        </member>
        <member name="M:SixLabors.Fonts.Native.CoreFoundation.CFStringGetCStringPtr(System.IntPtr,SixLabors.Fonts.Native.CFStringEncoding)">
            <summary>
            Quickly obtains a pointer to a C-string buffer containing the characters of a string in a given encoding.
            </summary>
            <param name="theString">The string whose contents you wish to access.</param>
            <param name="encoding">The string encoding to which the character contents of <paramref name="theString"/> should be converted. The encoding must specify an 8-bit encoding.</param>
            <returns>A pointer to a C string or <c>NULL</c> if the internal storage of <paramref name="theString"/> does not allow this to be returned efficiently.</returns>
            <remarks>
            <para>
            This function either returns the requested pointer immediately, with no memory allocations and no copying, in constant time, or returns <c>NULL</c>. If the latter is the result, call an alternative function such as the <see cref="M:SixLabors.Fonts.Native.CoreFoundation.CFStringGetCString(System.IntPtr,System.Byte[],System.Int64,SixLabors.Fonts.Native.CFStringEncoding)"/> function to extract the characters.
            </para>
            <para>
            Whether or not this function returns a valid pointer or <c>NULL</c> depends on many factors, all of which depend on how the string was created and its properties. In addition, the function result might change between different releases and on different platforms. So do not count on receiving a non-<c>NULL</c> result from this function under any circumstances.
            </para>
            </remarks>
        </member>
        <member name="M:SixLabors.Fonts.Native.CoreFoundation.CFRelease(System.IntPtr)">
            <summary>
            Releases a Core Foundation object.
            </summary>
            <param name="cf">A CFType object to release. This value must not be <c>NULL</c>.</param>
        </member>
        <member name="M:SixLabors.Fonts.Native.CoreFoundation.CFURLCopyFileSystemPath(System.IntPtr,SixLabors.Fonts.Native.CFURLPathStyle)">
            <summary>
            Returns the path portion of a given URL.
            </summary>
            <param name="anURL">The <c>CFURL</c> object whose path you want to obtain.</param>
            <param name="pathStyle">The operating system path style to be used to create the path. See <see cref="T:SixLabors.Fonts.Native.CFURLPathStyle"/> for a list of possible values.</param>
            <returns>The URL's path in the format specified by <paramref name="pathStyle"/>. Ownership follows the create rule. See The Create Rule.</returns>
            <remarks>This function returns the URL's path as a file system path for a given path style.</remarks>
        </member>
        <member name="M:SixLabors.Fonts.Native.CoreFoundation.CFURLGetTypeID">
            <summary>
            Returns the type identifier for the CFURL opaque type.
            </summary>
            <returns>The type identifier for the CFURL opaque type.</returns>
        </member>
        <member name="M:SixLabors.Fonts.Native.CoreText.CTFontManagerCopyAvailableFontURLs">
            <summary>
            Returns an array of font URLs.
            </summary>
            <returns>This function returns a retained reference to a <c>CFArray</c> of <c>CFURLRef</c> objects representing the URLs of the available fonts, or <c>NULL</c> on error. The caller is responsible for releasing the array.</returns>
        </member>
        <member name="T:SixLabors.Fonts.Native.MacSystemFontsEnumerator">
            <summary>
            An enumerator that enumerates over available macOS system fonts.
            The enumerated strings are the absolute paths to the font files.
            </summary>
            <remarks>
            Internally, it calls the native CoreText's <see cref="M:SixLabors.Fonts.Native.CoreText.CTFontManagerCopyAvailableFontURLs"/> method to retrieve
            the list of fonts so using this class must be guarded by <c>RuntimeInformation.IsOSPlatform(OSPlatform.OSX)</c>.
            </remarks>
        </member>
        <member name="T:SixLabors.Fonts.StreamFontMetrics">
            <summary>
            <para>
            Represents a font face with metrics, which is a set of glyphs with a specific style (regular, italic, bold etc).
            </para>
            <para>The font source is a stream.</para>
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.StreamFontMetrics.#ctor(SixLabors.Fonts.Tables.General.NameTable,SixLabors.Fonts.Tables.General.MaximumProfileTable,SixLabors.Fonts.Tables.General.CMapTable,SixLabors.Fonts.Tables.General.GlyphTable,SixLabors.Fonts.Tables.General.OS2Table,SixLabors.Fonts.Tables.General.HorizontalHeadTable,SixLabors.Fonts.Tables.General.HorizontalMetricsTable,SixLabors.Fonts.Tables.General.VerticalHeadTable,SixLabors.Fonts.Tables.General.VerticalMetricsTable,SixLabors.Fonts.Tables.General.HeadTable,SixLabors.Fonts.Tables.General.KerningTable,SixLabors.Fonts.Tables.General.PostTable,SixLabors.Fonts.Tables.AdvancedTypographic.GSubTable,SixLabors.Fonts.Tables.AdvancedTypographic.GPosTable,SixLabors.Fonts.Tables.General.ColrTable,SixLabors.Fonts.Tables.General.CpalTable,SixLabors.Fonts.Tables.Hinting.FpgmTable,SixLabors.Fonts.Tables.Hinting.CvtTable,SixLabors.Fonts.Tables.Hinting.PrepTable,SixLabors.Fonts.Tables.AdvancedTypographic.GlyphDefinitionTable)">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Fonts.StreamFontMetrics"/> class.
            </summary>
            <param name="nameTable">The name table.</param>
            <param name="maximumProfileTable">The maximum profile table.</param>
            <param name="cmap">The cmap table.</param>
            <param name="glyphs">The glyph table.</param>
            <param name="os2">The os2 table.</param>
            <param name="horizontalHeadTable">The horizontal head table.</param>
            <param name="horizontalMetrics">The horizontal metrics table.</param>
            <param name="verticalHeadTable">The vertical head table.</param>
            <param name="verticalMetrics">The vertical metrics table.</param>
            <param name="head">The head table.</param>
            <param name="kern">The kerning table.</param>
            <param name="postTable">The table needed to use TrueType or OpenType fonts on PostScript printers.</param>
            <param name="gSubTable">The glyph substitution table.</param>
            <param name="gPosTable">The glyph positioning table.</param>
            <param name="colrTable">The COLR table</param>
            <param name="cpalTable">The CPAL table</param>
            <param name="fpgm">The font program table.</param>
            <param name="cvt">The control value table.</param>
            <param name="prep">The control value program table.</param>
            <param name="glyphDefinitionTable">The glyph definition table.</param>
        </member>
        <member name="P:SixLabors.Fonts.StreamFontMetrics.Description">
            <inheritdoc/>
        </member>
        <member name="P:SixLabors.Fonts.StreamFontMetrics.UnitsPerEm">
            <inheritdoc/>
        </member>
        <member name="P:SixLabors.Fonts.StreamFontMetrics.ScaleFactor">
            <inheritdoc/>
        </member>
        <member name="P:SixLabors.Fonts.StreamFontMetrics.Ascender">
            <inheritdoc/>
        </member>
        <member name="P:SixLabors.Fonts.StreamFontMetrics.Descender">
            <inheritdoc/>
        </member>
        <member name="P:SixLabors.Fonts.StreamFontMetrics.LineGap">
            <inheritdoc/>
        </member>
        <member name="P:SixLabors.Fonts.StreamFontMetrics.LineHeight">
            <inheritdoc/>
        </member>
        <member name="P:SixLabors.Fonts.StreamFontMetrics.AdvanceWidthMax">
            <inheritdoc/>
        </member>
        <member name="P:SixLabors.Fonts.StreamFontMetrics.AdvanceHeightMax">
            <inheritdoc/>
        </member>
        <member name="P:SixLabors.Fonts.StreamFontMetrics.SubscriptXSize">
            <inheritdoc/>
        </member>
        <member name="P:SixLabors.Fonts.StreamFontMetrics.SubscriptYSize">
            <inheritdoc/>
        </member>
        <member name="P:SixLabors.Fonts.StreamFontMetrics.SubscriptXOffset">
            <inheritdoc/>
        </member>
        <member name="P:SixLabors.Fonts.StreamFontMetrics.SubscriptYOffset">
            <inheritdoc/>
        </member>
        <member name="P:SixLabors.Fonts.StreamFontMetrics.SuperscriptXSize">
            <inheritdoc/>
        </member>
        <member name="P:SixLabors.Fonts.StreamFontMetrics.SuperscriptYSize">
            <inheritdoc/>
        </member>
        <member name="P:SixLabors.Fonts.StreamFontMetrics.SuperscriptXOffset">
            <inheritdoc/>
        </member>
        <member name="P:SixLabors.Fonts.StreamFontMetrics.SuperscriptYOffset">
            <inheritdoc/>
        </member>
        <member name="P:SixLabors.Fonts.StreamFontMetrics.StrikeoutSize">
            <inheritdoc/>
        </member>
        <member name="P:SixLabors.Fonts.StreamFontMetrics.StrikeoutPosition">
            <inheritdoc/>
        </member>
        <member name="P:SixLabors.Fonts.StreamFontMetrics.UnderlinePosition">
            <inheritdoc/>
        </member>
        <member name="P:SixLabors.Fonts.StreamFontMetrics.UnderlineThickness">
            <inheritdoc/>
        </member>
        <member name="P:SixLabors.Fonts.StreamFontMetrics.ItalicAngle">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Fonts.StreamFontMetrics.TryGetGlyphId(SixLabors.Fonts.Unicode.CodePoint,System.UInt16@)">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Fonts.StreamFontMetrics.TryGetGlyphId(SixLabors.Fonts.Unicode.CodePoint,System.Nullable{SixLabors.Fonts.Unicode.CodePoint},System.UInt16@,System.Boolean@)">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Fonts.StreamFontMetrics.TryGetGlyphClass(System.UInt16,System.Nullable{SixLabors.Fonts.Tables.AdvancedTypographic.GlyphClassDef}@)">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Fonts.StreamFontMetrics.TryGetMarkAttachmentClass(System.UInt16,System.Nullable{SixLabors.Fonts.Tables.AdvancedTypographic.GlyphClassDef}@)">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Fonts.StreamFontMetrics.GetGlyphMetrics(SixLabors.Fonts.Unicode.CodePoint,SixLabors.Fonts.ColorFontSupport)">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Fonts.StreamFontMetrics.GetGlyphMetrics(SixLabors.Fonts.Unicode.CodePoint,System.UInt16,SixLabors.Fonts.ColorFontSupport)">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Fonts.StreamFontMetrics.ApplySubstitution(SixLabors.Fonts.GlyphSubstitutionCollection)">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Fonts.StreamFontMetrics.UpdatePositions(SixLabors.Fonts.GlyphPositioningCollection)">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Fonts.StreamFontMetrics.LoadFont(System.String)">
            <summary>
            Reads a <see cref="T:SixLabors.Fonts.StreamFontMetrics"/> from the specified stream.
            </summary>
            <param name="path">The file path.</param>
            <returns>a <see cref="T:SixLabors.Fonts.StreamFontMetrics"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.StreamFontMetrics.LoadFont(System.String,System.Int64)">
            <summary>
            Reads a <see cref="T:SixLabors.Fonts.StreamFontMetrics"/> from the specified stream.
            </summary>
            <param name="path">The file path.</param>
            <param name="offset">Position in the stream to read the font from.</param>
            <returns>a <see cref="T:SixLabors.Fonts.StreamFontMetrics"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.StreamFontMetrics.LoadFont(System.IO.Stream)">
            <summary>
            Reads a <see cref="T:SixLabors.Fonts.StreamFontMetrics"/> from the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <returns>a <see cref="T:SixLabors.Fonts.StreamFontMetrics"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.StreamFontMetrics.LoadFontCollection(System.String)">
            <summary>
            Reads a <see cref="T:SixLabors.Fonts.StreamFontMetrics"/> from the specified stream.
            </summary>
            <param name="path">The file path.</param>
            <returns>a <see cref="T:SixLabors.Fonts.StreamFontMetrics"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.StreamFontMetrics.LoadFontCollection(System.IO.Stream)">
            <summary>
            Reads a <see cref="T:SixLabors.Fonts.StreamFontMetrics"/> from the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <returns>a <see cref="T:SixLabors.Fonts.StreamFontMetrics"/>.</returns>
        </member>
        <member name="T:SixLabors.Fonts.SystemFontCollection">
            <summary>
            Provides a collection of fonts.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.SystemFontCollection.StandardFontLocations">
            <summary>
            Gets the default set of locations we probe for System Fonts.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.SystemFontCollection.Families">
            <inheritdoc/>
        </member>
        <member name="P:SixLabors.Fonts.SystemFontCollection.SearchDirectories">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Fonts.SystemFontCollection.Get(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Fonts.SystemFontCollection.TryGet(System.String,SixLabors.Fonts.FontFamily@)">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Fonts.SystemFontCollection.GetByCulture(System.Globalization.CultureInfo)">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Fonts.SystemFontCollection.Get(System.String,System.Globalization.CultureInfo)">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Fonts.SystemFontCollection.TryGet(System.String,System.Globalization.CultureInfo,SixLabors.Fonts.FontFamily@)">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Fonts.SystemFontCollection.SixLabors#Fonts#IReadOnlyFontMetricsCollection#TryGetMetrics(System.String,System.Globalization.CultureInfo,SixLabors.Fonts.FontStyle,SixLabors.Fonts.FontMetrics@)">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Fonts.SystemFontCollection.SixLabors#Fonts#IReadOnlyFontMetricsCollection#GetAllMetrics(System.String,System.Globalization.CultureInfo)">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Fonts.SystemFontCollection.SixLabors#Fonts#IReadOnlyFontMetricsCollection#GetAllStyles(System.String,System.Globalization.CultureInfo)">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Fonts.SystemFontCollection.SixLabors#Fonts#IReadOnlyFontMetricsCollection#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:SixLabors.Fonts.SystemFonts">
            <summary>
            Provides a collection of fonts.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.SystemFonts.Collection">
            <summary>
            Gets the collection containing the globally installed system fonts.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.SystemFonts.Families">
            <summary>
            Gets the collection of <see cref="T:SixLabors.Fonts.FontFamily"/>s installed on current system.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.SystemFonts.Get(System.String)">
            <inheritdoc cref="M:SixLabors.Fonts.IReadOnlyFontCollection.Get(System.String)"/>
        </member>
        <member name="M:SixLabors.Fonts.SystemFonts.TryGet(System.String,SixLabors.Fonts.FontFamily@)">
            <inheritdoc cref="M:SixLabors.Fonts.IReadOnlyFontCollection.TryGet(System.String,SixLabors.Fonts.FontFamily@)" />
        </member>
        <member name="M:SixLabors.Fonts.SystemFonts.CreateFont(System.String,System.Single)">
            <summary>
            Create a new instance of the <see cref="T:SixLabors.Fonts.Font"/> for the named font family with regular styling.
            </summary>
            <param name="name">The font family name.</param>
            <param name="size">The size of the font in PT units.</param>
            <returns>The new <see cref="T:SixLabors.Fonts.Font"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.SystemFonts.CreateFont(System.String,System.Single,SixLabors.Fonts.FontStyle)">
            <summary>
            Create a new instance of the <see cref="T:SixLabors.Fonts.Font"/> for the named font family.
            </summary>
            <param name="name">The font family name.</param>
            <param name="size">The size of the font in PT units.</param>
            <param name="style">The font style.</param>
            <returns>The new <see cref="T:SixLabors.Fonts.Font"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.SystemFonts.GetByCulture(System.Globalization.CultureInfo)">
            <inheritdoc cref="M:SixLabors.Fonts.IReadOnlyFontCollection.GetByCulture(System.Globalization.CultureInfo)"/>
        </member>
        <member name="M:SixLabors.Fonts.SystemFonts.Get(System.String,System.Globalization.CultureInfo)">
            <inheritdoc cref="M:SixLabors.Fonts.IReadOnlyFontCollection.Get(System.String,System.Globalization.CultureInfo)" />
        </member>
        <member name="M:SixLabors.Fonts.SystemFonts.TryGet(System.String,System.Globalization.CultureInfo,SixLabors.Fonts.FontFamily@)">
            <inheritdoc cref="M:SixLabors.Fonts.IReadOnlyFontCollection.TryGet(System.String,System.Globalization.CultureInfo,SixLabors.Fonts.FontFamily@)" />
        </member>
        <member name="M:SixLabors.Fonts.SystemFonts.CreateFont(System.String,System.Globalization.CultureInfo,System.Single)">
            <summary>
            Create a new instance of the <see cref="T:SixLabors.Fonts.Font"/> for the named font family with regular styling.
            </summary>
            <param name="name">The font family name.</param>
            <param name="culture">The font culture.</param>
            <param name="size">The size of the font in PT units.</param>
            <returns>The new <see cref="T:SixLabors.Fonts.Font"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.SystemFonts.CreateFont(System.String,System.Globalization.CultureInfo,System.Single,SixLabors.Fonts.FontStyle)">
            <summary>
            Create a new instance of the <see cref="T:SixLabors.Fonts.Font"/> for the named font family.
            </summary>
            <param name="name">The font family name.</param>
            <param name="culture">The font culture.</param>
            <param name="size">The size of the font in PT units.</param>
            <param name="style">The font style.</param>
            <returns>The new <see cref="T:SixLabors.Fonts.Font"/>.</returns>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.AdvancedTypographicUtils.MaxContextLength">
            <summary>
            The maximum length of a context. Taken from HarfBuzz - hb-ot-layout-common.hh
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.Tables.AdvancedTypographic.ChainedSequenceRuleTable.SequenceLookupRecords">
            <summary>
            Gets the sequence lookup records.
            The seqLookupRecords array lists the sequence lookup records that specify actions to be taken on glyphs at various positions within the input sequence.
            These do not have to be ordered in sequence position order; they are ordered according to the desired result.
            All of the sequence lookup records are processed in order, and each applies to the results of the actions indicated by the preceding record.
            </summary>
        </member>
        <member name="T:SixLabors.Fonts.Tables.AdvancedTypographic.ClassDefinitionTable">
            <summary>
            In OpenType Layout, index values identify glyphs. For efficiency and ease of representation, a font developer
            can group glyph indices to form glyph classes. Class assignments vary in meaning from one lookup subtable
            to another. For example, in the GSUB and GPOS tables, classes are used to describe glyph contexts.
            GDEF tables also use the idea of glyph classes.
            <see href="https://docs.microsoft.com/en-us/typography/opentype/spec/chapter2#class-definition-table"/>
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.Tables.AdvancedTypographic.ClassDefinitionTable.ClassIndexOf(System.UInt16)">
            <summary>
            Gets the class id for the given glyph id.
            Any glyph not included in the range of covered glyph IDs automatically belongs to Class 0.
            </summary>
            <param name="glyphId">The glyph identifier.</param>
            <returns>The class id.</returns>
        </member>
        <member name="M:SixLabors.Fonts.Tables.AdvancedTypographic.ClassDefinitionFormat1Table.ClassIndexOf(System.UInt16)">
            <inheritdoc />
        </member>
        <member name="M:SixLabors.Fonts.Tables.AdvancedTypographic.ClassDefinitionFormat2Table.ClassIndexOf(System.UInt16)">
            <inheritdoc />
        </member>
        <member name="M:SixLabors.Fonts.Tables.AdvancedTypographic.ClassSequenceRuleSetTable.Load(SixLabors.Fonts.BigEndianBinaryReader,System.Int64)">
            <summary>
            Loads the class sequence rule set table.
            </summary>
            <param name="reader">The big endian binary reader.</param>
            <param name="offset">Offset from beginning of the ClassSequenceRuleSet table.</param>
            <returns>A class sequence rule set table.</returns>
        </member>
        <member name="T:SixLabors.Fonts.Tables.AdvancedTypographic.CoverageTable">
            <summary>
            Each subtable (except an Extension LookupType subtable) in a lookup references a Coverage table (Coverage),
            which specifies all the glyphs affected by a substitution or positioning operation described in the subtable.
            The GSUB, GPOS, and GDEF tables rely on this notion of coverage.
            If a glyph does not appear in a Coverage table, the client can skip that subtable and move
            immediately to the next subtable.
            <see href="https://docs.microsoft.com/en-us/typography/opentype/spec/chapter2#coverage-table"/>
            </summary>
        </member>
        <member name="T:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureListTable">
            <summary>
            Features provide information about how to use the glyphs in a font to render a script or language.
            For example, an Arabic font might have a feature for substituting initial glyph forms, and a Kanji font
            might have a feature for positioning glyphs vertically. All OpenType Layout features define data for
            glyph substitution, glyph positioning, or both.
            <see href="https://docs.microsoft.com/en-us/typography/opentype/spec/featurelist"/>
            <see href="https://docs.microsoft.com/en-us/typography/opentype/spec/chapter2#feature-list-table"/>
            </summary>
        </member>
        <member name="T:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags">
            <summary>
            Provides enumeration for the different font features.
            <see href="https://docs.microsoft.com/en-us/typography/opentype/spec/featuretags"/>
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.AccessAllAlternates">
            <summary>
            Access All Alternates. Shortcode: aalt.
            This feature makes all variations of a selected character accessible. This serves several purposes: An application may not support the feature by which the desired glyph would normally be accessed;
            the user may need a glyph outside the context supported by the normal substitution, or the user may not know what feature produces the desired glyph.
            Since many-to-one substitutions are not covered, ligatures would not appear in this table unless they were variant forms of another ligature.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.AboveBaseForms">
            <summary>
            Above-base Forms. Shortcode: abvf.
            Substitutes the above-base form of a vowel.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.AboveBaseMarkPositioning">
            <summary>
            Above-base Mark Positioning. Shortcode: abvm.
            Positions marks above base glyphs.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.AboveBaseSubstitutions">
            <summary>
            Above-base Substitutions. Shortcode: abvs.
            Substitutes a ligature for a base glyph and mark that’s above it.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.AlternativeFractions">
            <summary>
            Alternative Fractions. Shortccde: afrc.
             Replaces figures separated by a slash with an alternative form.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.Akhand">
            <summary>
            Akhand. Shortcode: akhn.
            Preferentially substitutes a sequence of characters with a ligature. This substitution is done irrespective of any characters that may precede or follow the sequence.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.BelowBaseForms">
            <summary>
            Below-base Forms. Shortcode: blwf.
            Substitutes the below-base form of a consonant in conjuncts.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.BelowBaseMarkPositioning">
            <summary>
            Below-base Mark Positioning. Shortcode: blwm.
            Positions marks below base glyphs.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.BelowBaseSubstitutions">
            <summary>
            Below-base Substitutions. Shortcode: blws.
            Produces ligatures that comprise of base glyph and below-base forms.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.ContextualAlternates">
            <summary>
            Contextual Alternates. Shortcode: calt.
            In specified situations, replaces default glyphs with alternate forms which provide better joining behavior.
            Used in script typefaces which are designed to have some or all of their glyphs join.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.CaseSensitiveForms">
            <summary>
            Case-Sensitive Forms. Shortcode: case.
            Shifts various punctuation marks up to a position that works better with all-capital sequences or sets of lining figures;
            also changes oldstyle figures to lining figures. By default, glyphs in a text face are designed to work with lowercase characters.
            Some characters should be shifted vertically to fit the higher visual center of all-capital or lining text.
            Also, lining figures are the same height (or close to it) as capitals, and fit much better with all-capital text.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.GlyphCompositionDecomposition">
            <summary>
            Glyph Composition/Decomposition. Shortcode: ccmp.
            To minimize the number of glyph alternates, it is sometimes desirable to decompose the default glyph for a character into two or more glyphs.
            Additionally, it may be preferable to compose default glyphs for two or more characters into a single glyph for better glyph processing.
            This feature permits such composition/decomposition. The feature should be processed as the first feature processed, and should be processed only when it is called.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.ConjunctFormAfterRo">
            <summary>
            Conjunct Form After Ro. Shortcode: cfar.
            Substitutes alternate below-base or post-base forms in Khmer script when occurring after conjoined Ro (“Coeng Ra”).
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.ConjunctForms">
            <summary>
            Conjunct Forms. Shortcode: cjct.
            Produces conjunct forms of consonants in Indic scripts. This is similar to the Akhands feature, but is applied at a different sequential point in the process of shaping an Indic syllable.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.ContextualLigatures">
            <summary>
            Contextual Ligatures. Shortcode: clig.
            Replaces a sequence of glyphs with a single glyph which is preferred for typographic purposes. Unlike other ligature features, 'clig' specifies the context in which the ligature is recommended.
            This capability is important in some script designs and for swash ligatures.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.CenteredCjkPunctuation">
            <summary>
            Centered CJK Punctuation. Shortcode: cpct.
            Centers specific punctuation marks for those fonts that do not include centered and non-centered forms.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.CapitalSpacing">
            <summary>
            Capital Spacing. Shortcode: cpsp.
            Globally adjusts inter-glyph spacing for all-capital text. Most typefaces contain capitals and lowercase characters, and the capitals are positioned to work with the lowercase.
            When capitals are used for words, they need more space between them for legibility and esthetics.
            This feature would not apply to monospaced designs. Of course the user may want to override this behavior in order to do more pronounced letterspacing for esthetic reasons.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.ContextualSwash">
            <summary>
            Contextual Swash. Shortcode: cswh.
            This feature replaces default character glyphs with corresponding swash glyphs in a specified context. Note that there may be more than one swash alternate for a given character.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.CursivePositioning">
            <summary>
            Cursive Positioning. Shortcode: curs.
            In cursive scripts like Arabic, this feature cursively positions adjacent glyphs.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.PetiteCapitalsFromCapitals">
            <summary>
            Petite Capitals From Capitals. Shortcode: c2pc.
            This feature turns capital characters into petite capitals. It is generally used for words which would otherwise be set in all caps, such as acronyms,
            but which are desired in petite-cap form to avoid disrupting the flow of text. See the 'pcap' feature description for notes on the relationship of caps,
            smallcaps and petite caps.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.SmallCapitalsFromCapitals">
            <summary>
            Small Capitals From Capitals. Shortcode: c2sc.
            This feature turns capital characters into small capitals. It is generally used for words which would otherwise be set in all caps,
            such as acronyms, but which are desired in small-cap form to avoid disrupting the flow of text.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.Distances">
            <summary>
            Distances. Shortcode: dist.
            Provides a means to control distance between glyphs.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.DiscretionaryLigatures">
            <summary>
            Discretionary Ligatures. Shortcode: dlig.
            Replaces a sequence of glyphs with a single glyph which is preferred for typographic purposes.
            This feature covers those ligatures which may be used for special effect, at the user’s preference.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.Denominators">
            <summary>
            Denominators. Shortcode: dnom.
            Replaces selected figures which follow a slash with denominator figures.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.DotlessForms">
            <summary>
            Dotless Forms. Shortcode: dtls.
            This feature provides dotless forms for Math Alphanumeric characters, such as U+1D422 MATHEMATICAL BOLD SMALL I, U+1D423 MATHEMATICAL BOLD SMALL J,
            U+1D456 U+MATHEMATICAL ITALIC SMALL I, U+1D457 MATHEMATICAL ITALIC SMALL J, and so on. The dotless forms are to be used as base forms for placing mathematical accents over them.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.ExpertForms">
            <summary>
            Expert Forms. Shortcode: expt.
            Like the JIS78 Forms feature, this feature replaces standard forms in Japanese fonts with corresponding forms preferred by typographers.
            Although most of the JIS78 substitutions are included, the expert substitution goes on to handle many more characters.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.FinalGlyphOnLineAlternates">
            <summary>
            Final Glyph on Line Alternates. Shortcode: falt.
            Replaces line final glyphs with alternate forms specifically designed for this purpose (they would have less or more advance width as need may be), to help justification of text.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.TerminalForm2">
            <summary>
            Terminal Form #2. Shortcode: fin2.
            Replaces the Alaph glyph at the end of Syriac words with its appropriate form, when the preceding base character cannot be joined to,
            and that preceding base character is not a Dalath, Rish, or dotless Dalath-Rish.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.TerminalForm3">
            <summary>
            Terminal Form #3.  Shortcode: fin3.
            Replaces Alaph glyphs at the end of Syriac words when the preceding base character is a Dalath, Rish, or dotless Dalath-Rish.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.TerminalForms">
            <summary>
            Terminal Forms. Shortcode: fina.
            Replaces glyphs for characters that have applicable joining properties with an alternate form when occurring in a final context.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.FlattenedAscentForms">
            <summary>
            Flattened ascent forms. Shortcode: flac.
            This feature provides flattened forms of accents to be used over high-rise bases such as capitals.
            This feature should only change the shape of the accent and should not move it in the vertical or horizontal direction.
            Moving of the accents is done by the math handling client. Accents are flattened by the Math engine if their base is higher than MATH.MathConstants.FlattenedAccentBaseHeight.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.Fractions">
            <summary>
            Fractions. Shortcode: frac.
            Replaces figures separated by a slash with “common” (diagonal) fractions.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.FullWidths">
            <summary>
            Full Widths. Shortcode: fwid.
            Replaces glyphs set on other widths with glyphs set on full (usually em) widths. In a CJKV font, this may include “lower ASCII” Latin characters and various symbols.
            In a European font, this feature replaces proportionally-spaced glyphs with monospaced glyphs, which are generally set on widths of 0.6 em.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.HalfForms">
            <summary>
            Half Forms. Shortcode: half.
            Produces the half forms of consonants in Indic scripts.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.HalantForms">
            <summary>
            Halant Forms. Shortcode: haln.
            Produces the halant forms of consonants in Indic scripts.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.AlternateHalfWidths">
            <summary>
            Alternate Half Widths. Shortcode: halt.
            Respaces glyphs designed to be set on full-em widths, fitting them onto half-em widths. This differs from 'hwid' in that it does not substitute new glyphs.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.HistoricalForms">
            <summary>
            Historical Forms. Shortcode: hist.
            Some letterforms were in common use in the past, but appear anachronistic today. The best-known example is the long form of s; others would include the old Fraktur k.
            Some fonts include the historical forms as alternates, so they can be used for a “period” effect. This feature replaces the default (current) forms with the historical alternates.
            While some ligatures are also used for historical effect, this feature deals only with single characters.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.HorizontalKanaAlternates">
            <summary>
            Horizontal Kana Alternates. Shortcode: hkna.
            Replaces standard kana with forms that have been specially designed for only horizontal writing. This is a typographic optimization for improved fit and more even color. Also see 'vkna'.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.HistoricalLigatures">
            <summary>
            Historical Ligatures. Shortcode: hlig.
            Some ligatures were in common use in the past, but appear anachronistic today. Some fonts include the historical forms as alternates, so they can be used for a “period” effect.
            This feature replaces the default (current) forms with the historical alternates.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.Hangul">
            <summary>
            Hangul. Shortcode: hngl.
            Replaces hanja (Chinese-style) Korean characters with the corresponding hangul (syllabic) characters. This effectively reverses the standard input method,
            in which hangul are entered and replaced by hanja. Many of these substitutions are one-to-one (GSUB lookup type 1),
            but hanja substitution often requires the user to choose from several possible hangul characters (GSUB lookup type 3).
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.HojoKanjiForms">
            <summary>
            Hojo Kanji Forms (JIS X 0212-1990 Kanji Forms). Shortcode: hojo.
            The JIS X 0212-1990 (aka, “Hojo Kanji”) and JIS X 0213:2004 character sets overlap significantly.
            In some cases their prototypical glyphs differ. When building fonts that support both JIS X 0212-1990 and JIS X 0213:2004 (such as those supporting the Adobe-Japan 1-6 character collection),
            it is recommended that JIS X 0213:2004 forms be preferred as the encoded form. The 'hojo' feature is used to access the JIS X 0212-1990 glyphs for the cases when the JIS X 0213:2004 form is encoded.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.HalfWidths">
            <summary>
            Half Widths. Shortcode: hwid.
            Replaces glyphs on proportional widths, or fixed widths other than half an em, with glyphs on half-em (en) widths. Many CJKV fonts have glyphs which are set on multiple widths; this feature selects the half-em version.
            There are various contexts in which this is the preferred behavior, including compatibility with older desktop documents.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.InitialForms">
            <summary>
            Initial Forms. Shortcode: init.
            Replaces glyphs for characters that have applicable joining properties with an alternate form when occurring in an initial context.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.IsolatedForms">
            <summary>
            Isolated Forms. Shortcode: isol.
            Replaces glyphs for characters that have applicable joining properties with an alternate form when occurring in a isolate (non-joining) context.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.Italics">
            <summary>
            Italics. Shortcode: ital.
            Some fonts (such as Adobe’s Pro Japanese fonts) will have both Roman and Italic forms of some characters in a single font.
            This feature replaces the Roman glyphs with the corresponding Italic glyphs.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.JustificationAlternates">
            <summary>
            Justification Alternates. Shortcode: jalt.
            Improves justification of text by replacing glyphs with alternate forms specifically designed for this purpose (they would have less or more advance width as need may be).
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.Jis78Forms">
            <summary>
            JIS78 Forms. Shortcode: jp78.
            This feature replaces default (JIS90) Japanese glyphs with the corresponding forms from the JIS C 6226-1978 (JIS78) specification.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.Jis83Forms">
            <summary>
            JIS83 Forms. Shortcode: jp83.
            This feature replaces default (JIS90) Japanese glyphs with the corresponding forms from the JIS X 0208-1983 (JIS83) specification.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.Jis90Forms">
            <summary>
            JIS90 Forms. Shortcode: jp90.
            This feature replaces Japanese glyphs from the JIS78 or JIS83 specifications with the corresponding forms from the JIS X 0208-1990 (JIS90) specification.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.Jis2004">
            <summary>
            JIS2004 Forms. Shortcode: jp04.
            The National Language Council (NLC) of Japan has defined new glyph shapes for a number of JIS characters, which were incorporated into JIS X 0213:2004 as new prototypical forms.
            The 'jp04' feature is a subset of the 'nlck' feature, and is used to access these prototypical glyphs in a manner that maintains the integrity of JIS X 0213:2004.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.Kerning">
            <summary>
            Kerning. Shortcode: kern.
            Adjusts amount of space between glyphs, generally to provide optically consistent spacing between glyphs.
            Although a well-designed typeface has consistent inter-glyph spacing overall, some glyph combinations require adjustment for improved legibility.
            Besides standard adjustment in the horizontal direction, this feature can supply size-dependent kerning data via device tables, “cross-stream” kerning in the Y text direction,
            and adjustment of glyph placement independent of the advance adjustment. Note that this feature may apply to runs of more than two glyphs, and would not be used in monospaced fonts.
            Also note that this feature does not apply to text set vertically.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.LeftBounds">
            <summary>
            Left Bounds. Shortcode: lfbd.
            Aligns glyphs by their apparent left extents at the left ends of horizontal lines of text, replacing the default behavior of aligning glyphs by their origins.
            This feature is called by the Optical Bounds ('opbd') feature.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.Ligatures">
            <summary>
            Standard Ligatures. Shortcode: liga.
            Replaces a sequence of glyphs with a single glyph which is preferred for typographic purposes. This feature covers the ligatures which the designer/manufacturer judges should be used in normal conditions.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.LeadingJamoForms">
            <summary>
            Leading Jamo Forms. Shortcode: ljmo.
            Substitutes the leading jamo form of a cluster.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.LiningFigures">
            <summary>
            Lining Figures. Shortcode: lnum.
            This feature changes selected non-lining figures to lining figures.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.LocalizedForms">
            <summary>
            Localized Forms. Shortcode: locl.
            Many scripts used to write multiple languages over wide geographical areas have developed localized variant forms of specific letters,
            which are used by individual literary communities. For example, a number of letters in the Bulgarian and Serbian alphabets have forms distinct from their Russian counterparts and from each other.
            In some cases the localized form differs only subtly from the script “norm”, in others the forms are radically distinct. This feature enables localized forms of glyphs to be substituted for default forms.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.LeftToRightGlyphAlternates">
            <summary>
            Left-to-right glyph alternates. Shortcode: ltra.
            This feature applies glyphic variants (other than mirrored forms) appropriate for left-to-right text (for mirrored forms, see 'ltrm').
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.LeftToRightMirroredForms">
            <summary>
            Left-to-right mirrored forms. Shortcode: ltrm.
            This feature applies mirrored forms appropriate for left-to-right text. (For left-to-right glyph alternates, see 'ltra').
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.MarkPositioning">
            <summary>
            Mark Positioning. Shortcode: mark.
            Positions mark glyphs with respect to base glyphs.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.MedialForms2">
            <summary>
            Medial Forms #2. Shortcode: med2.
            Replaces Alaph glyphs in the middle of Syriac words when the preceding base character can be joined to.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.MedialForms">
            <summary>
            Medial Forms. Shortcode: medi
            Replaces glyphs for characters that have applicable joining properties with an alternate form when occurring in a medial context.
            This applies to characters that have the Unicode Joining_Type property value Dual_Joining.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.MathematicalGreek">
            <summary>
            Mathematical Greek. Shortcode: mgrk.
            Replaces standard typographic forms of Greek glyphs with corresponding forms commonly used in mathematical notation (which are a subset of the Greek alphabet).
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.MarkToMarkPositioning">
            <summary>
            Mark to Mark Positioning. Shortcode: mkmk.
            Positions marks with respect to other marks. Required in various non-Latin scripts like Arabic.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.Mset">
            <summary>
            Shortcode: mset.
            Positions Arabic combining marks in fonts for Windows 95 using glyph substitution.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.AlternateAnnotationForms">
            <summary>
            Alternate Annotation Forms. Shortcode: nalt.
            Replaces default glyphs with various notational forms (e.g. glyphs placed in open or solid circles, squares, parentheses, diamonds or rounded boxes).
            In some cases an annotation form may already be present, but the user may want a different one.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.NlcKanjiForms">
            <summary>
            NLC Kanji Forms. Shortcode: nlck.
            The National Language Council (NLC) of Japan has defined new glyph shapes for a number of JIS characters in 2000. The 'nlck' feature is used to access those glyphs.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.NuktaForms">
            <summary>
            Nukta Forms. Shortcode: nukt.
            Produces Nukta forms in Indic scripts.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.Numerators">
            <summary>
            Numerators. Shortcode: numr.
            Replaces selected figures which precede a slash with numerator figures, and replaces the typographic slash with the fraction slash.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.OldstyleFigures">
            <summary>
            Oldstyle Figures. Shortcode: onum.
            This feature changes selected figures from the default or lining style to oldstyle form.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.OpticalBounds">
            <summary>
            Optical Bounds. Shortcode: opbd.
            Aligns glyphs by their apparent left or right extents in horizontal setting, or apparent top or bottom extents in vertical setting,
            replacing the default behavior of aligning glyphs by their origins. Another name for this behavior would be visual justification.
            The optical edge of a given glyph is only indirectly related to its advance width or bounding box; this feature provides a means for getting true visual alignment.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.Ordinals">
            <summary>
            Ordinals. Shortcode: ordn.
            Replaces default alphabetic glyphs with the corresponding ordinal forms for use after figures. One exception to the follows-a-figure rule is the numero character (U+2116),
            which is actually a ligature substitution, but is best accessed through this feature.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.Ornaments">
            <summary>
            Ornaments. Shortcode: ornm.
            This is a dual-function feature, which uses two input methods to give the user access to ornament glyphs (e.g. fleurons, dingbats and border elements) in the font.
            One method replaces the bullet character with a selection from the full set of available ornaments;
            the other replaces specific “lower ASCII” characters with ornaments assigned to them. The first approach supports the general or browsing user;
            the second supports the power user.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.ProportionalAlternateWidths">
            <summary>
            Proportional Alternate Widths. Shortcode: palt.
            Respaces glyphs designed to be set on full-em widths, fitting them onto individual (more or less proportional) horizontal widths.
            This differs from 'pwid' in that it does not substitute new glyphs (GPOS, not GSUB feature). The user may prefer the monospaced form,
            or may simply want to ensure that the glyph is well-fit and not rotated in vertical setting (Latin forms designed for proportional spacing would be rotated).
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.PetiteCapitals">
            <summary>
            Petite Capitals. Shortcode: pcap.
             Some fonts contain an additional size of capital letters, shorter than the regular smallcaps and whimsically referred to as petite caps.
            Such forms are most likely to be found in designs with a small lowercase x-height, where they better harmonise with lowercase text than
            the taller smallcaps (for examples of petite caps, see the Emigre type families Mrs Eaves and Filosofia). This feature turns lowercase characters into petite capitals.
            Forms related to petite capitals, such as specially designed figures, may be included.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.ProportionalKana">
            <summary>
            Proportional Kana. Shortcode: pkna.
            Replaces glyphs, kana and kana-related, set on uniform widths (half or full-width) with proportional glyphs.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.ProportionalFigures">
            <summary>
            Proportional Figures. Shortcode: pnum.
            Replaces figure glyphs set on uniform (tabular) widths with corresponding glyphs set on glyph-specific (proportional) widths.
            Tabular widths will generally be the default, but this cannot be safely assumed. Of course this feature would not be present in monospaced designs.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.PreBaseForms">
            <summary>
            Pre-base Forms. Shortcode: pref.
            Substitutes the pre-base form of a consonant.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.PreBaseSubstitutions">
            <summary>
            Pre-base Substitutions. Shortcode: pres.
            Produces the pre-base forms of conjuncts in Indic scripts. It can also be used to substitute the appropriate glyph variant for pre-base vowel signs.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.PostBaseForms">
            <summary>
            Post-base Forms. Shortcode: pstf.
            Substitutes the post-base form of a consonant.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.PostBaseSubstitutions">
            <summary>
            Post-base Substitutions. Shortcode: psts.
            Substitutes a sequence of a base glyph and post-base glyph, with its ligaturised form.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.ProportionalWidths">
            <summary>
            Proportional Widths. Shortcode: pwid.
            Replaces glyphs set on uniform widths (typically full or half-em) with proportionally spaced glyphs.
            The proportional variants are often used for the Latin characters in CJKV fonts, but may also be used for Kana in Japanese fonts.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.QuarterWidths">
            <summary>
            Quarter Widths. Shortcode: qwid.
            Replaces glyphs on other widths with glyphs set on widths of one quarter of an em (half an en). The characters involved are normally figures and some forms of punctuation.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.Randomize">
            <summary>
            Randomize. Shortcode: rand.
            In order to emulate the irregularity and variety of handwritten text, this feature allows multiple alternate forms to be used.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.RequiredContextualAlternates">
            <summary>
            Required Contextual Alternates. Shortcode: rclt.
            In specified situations, replaces default glyphs with alternate forms which provide for better joining behavior or other glyph relationships.
            Especially important in script typefaces which are designed to have some or all of their glyphs join, but applicable also to e.g. variants to improve spacing.
            This feature is similar to 'calt', but with the difference that it should not be possible to turn off 'rclt' substitutions: they are considered essential to correct layout of the font.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.RequiredLigatures">
            <summary>
            Required Ligatures. Shortcode: rlig.
            Replaces a sequence of glyphs with a single glyph which is preferred for typographic purposes. This feature covers those ligatures, which the script determines as required to be used in normal conditions.
            This feature is important for some scripts to insure correct glyph formation.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.RakarForms">
            <summary>
            Rakar Forms. Shortcode: rkrf.
            Produces conjoined forms for consonants with rakar in Devanagari and Gujarati scripts.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.RephForm">
            <summary>
            Reph Form. Shortcode: rphf.
            Substitutes the Reph form for a consonant and halant sequence.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.RightBounds">
            <summary>
            Right Bounds. Shortcode: rtbd.
            Aligns glyphs by their apparent right extents at the right ends of horizontal lines of text, replacing the default behavior of aligning glyphs by their origins.
            This feature is called by the Optical Bounds ('opbd') feature.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.RightToLeftAlternates">
            <summary>
            Right-to-left alternates. Shortcode: rtla.
            This feature applies glyphic variants (other than mirrored forms) appropriate for right-to-left text. (For mirrored forms, see 'rtlm'.)
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.RightToLeftMirroredForms">
            <summary>
            Right-to-left mirrored forms. Shortcode: rtlm.
            This feature applies mirrored forms appropriate for right-to-left text other than for those characters that would be covered by the character-level mirroring step performed by an OpenType layout engine.
            (For right-to-left glyph alternates, see 'rtla'.)
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.RubyNotationForms">
            <summary>
            Ruby Notation Forms. Shortcode: ruby.
            Japanese typesetting often uses smaller kana glyphs, generally in superscripted form, to clarify the meaning of kanji which may be unfamiliar to the reader.
            These are called “ruby”, from the old typesetting term for four-point-sized type. This feature identifies glyphs in the font which have been designed for this use,
            substituting them for the default designs.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.RequiredVariationAlternates">
            <summary>
            Required Variation Alternates. Shortcode: rvrn.
            his feature is used in fonts that support OpenType Font Variations in order to select alternate glyphs for particular variation instances.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.StylisticAlternates">
            <summary>
            Stylistic Alternates. Shortcode: salt.
            Many fonts contain alternate glyph designs for a purely esthetic effect; these don’t always fit into a clear category like swash or historical.
            As in the case of swash glyphs, there may be more than one alternate form. This feature replaces the default forms with the stylistic alternates.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.ScientificInferiors">
            <summary>
            Scientific Inferiors. Shortcode: sinf.
            Replaces lining or oldstyle figures with inferior figures (smaller glyphs which sit lower than the standard baseline, primarily for chemical or mathematical notation).
            May also replace lowercase characters with alphabetic inferiors.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.OpticalSize">
            <summary>
            Optical size. Shortcode: size.
            This feature stores two kinds of information about the optical size of the font: design size
            (the point size for which the font is optimized) and size range (the range of point sizes which the font can serve well),
            as well as other information which helps applications use the size range. The design size is useful for determining proper tracking behavior.
            The size range is useful in families which have fonts covering several ranges. Additional values serve to identify the set of fonts which share related size ranges,
            and to identify their shared name. Note that sizes refer to nominal final output size, and are independent of viewing magnification or resolution.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.SmallCapitals">
            <summary>
            Small Capitals. Shortcode: smcp.
            This feature turns lowercase characters into small capitals. This corresponds to the common SC font layout. It is generally used for display lines set in Large and small caps, such as titles.
            Forms related to small capitals, such as oldstyle figures, may be included.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.SimplifiedForms">
            <summary>
            Simplified Forms. Shortcode: smpl.
            Replaces “traditional” Chinese or Japanese forms with the corresponding “simplified” forms.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.MathScriptStyleAlternates">
            <summary>
            Math script style alternates. Shortcode: ssty.
            This feature provides glyph variants adjusted to be more suitable for use in subscripts and superscripts.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.StretchingGlyphDecomposition">
            <summary>
            Stretching Glyph Decomposition. Shortcode: stch.
            Unicode characters, such as the Syriac Abbreviation Mark (U+070F), that enclose other characters need to be able
            to stretch in order to dynamically adapt to the width of the enclosed text. This feature defines a decomposition set
            consisting of an odd number of glyphs which describe the stretching glyph. The odd numbered glyphs in the decomposition are
            fixed reference points which are distributed evenly from the start to the end of the enclosed text. The even numbered glyphs may
            be repeated as necessary to fill the space between the fixed glyphs. The first and last glyphs may either be simple glyphs with width at the baseline,
            or mark glyphs. All other decomposition glyphs should have width, but must be defined as mark glyphs.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.Subscript">
            <summary>
            Subscript. Shortcode: subs.
            The 'subs' feature may replace a default glyph with a subscript glyph, or it may combine a glyph substitution with positioning adjustments for proper placement.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.Superscript">
            <summary>
            Superscript. Shortcode: sups.
            Replaces lining or oldstyle figures with superior figures (primarily for footnote indication), and replaces lowercase letters with superior letters (primarily for abbreviated French titles).
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.Swash">
            <summary>
            Swash. Shortcode: swsh.
            This feature replaces default character glyphs with corresponding swash glyphs. Note that there may be more than one swash alternate for a given character.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.Titling">
            <summary>
            Titling. Shortcode: titl.
            This feature replaces the default glyphs with corresponding forms designed specifically for titling.
            These may be all-capital and/or larger on the body, and adjusted for viewing at larger sizes.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.TrailingJamoForms">
            <summary>
            Trailing Jamo Forms. Shortcode: tjmo.
            Substitutes the trailing jamo form of a cluster.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.TraditionalNameForms">
            <summary>
            Traditional Name Forms. Shortcode: tnam.
            Replaces “simplified” Japanese kanji forms with the corresponding “traditional” forms. This is equivalent to the Traditional Forms feature,
            but explicitly limited to the traditional forms considered proper for use in personal names (as many as 205 glyphs in some fonts).
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.TabularFigures">
            <summary>
            Tabular Figures. Shortcode: tnum.
            Replaces figure glyphs set on proportional widths with corresponding glyphs set on uniform (tabular) widths.
            Tabular widths will generally be the default, but this cannot be safely assumed. Of course this feature would not be present in monospaced designs.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.TraditionalForms">
            <summary>
            Traditional Forms. Shortcode: trad.
            Replaces 'simplified' Chinese hanzi or Japanese kanji forms with the corresponding 'traditional' forms.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.ThirdWidths">
            <summary>
            Third Widths. Shortcode: twid.
            Replaces glyphs on other widths with glyphs set on widths of one third of an em. The characters involved are normally figures and some forms of punctuation.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.Unicase">
            <summary>
            Unicase. Shortcode: unic.
            This feature maps upper- and lowercase letters to a mixed set of lowercase and small capital forms, resulting in a single case alphabet
            (for an example of unicase, see the Emigre type family Filosofia). The letters substituted may vary from font to font, as appropriate to the design.
            If aligning to the x-height, smallcap glyphs may be substituted, or specially designed unicase forms might be used. Substitutions might also include specially designed figures.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.AlternateVerticalMetrics">
            <summary>
            Alternate Vertical Metrics. Shortcode: valt.
            Repositions glyphs to visually center them within full-height metrics, for use in vertical setting. Typically applies to full-width Latin glyphs,
            which are aligned on a common horizontal baseline and not rotated when set vertically in CJKV fonts.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.VattuVariants">
            <summary>
            Vattu Variants. Shortcode: vatu.
            In an Indic consonant conjunct, substitutes a ligature glyph for a base consonant and a following vattu (below-base) form of a conjoining consonant, or for a half form of a consonant and a following vattu form.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.VerticalAlternates">
            <summary>
            Vertical Alternates. Shortcode: vert.
            Transforms default glyphs into glyphs that are appropriate for upright presentation in vertical writing mode.While the glyphs for most
            characters in East Asian writing systems remain upright when set in vertical writing mode, some must be transformed —
            usually by rotation, shifting, or different component ordering — for vertical writing mode.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.AlternateVerticalHalfMetrics">
            <summary>
            Alternate Vertical Half Metrics. Shortcode: vhal.
            Respaces glyphs designed to be set on full-em heights, fitting them onto half-em heights.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.VowelJamoForms">
            <summary>
            Vowel Jamo Forms. Shortcode: vjmo.
            Substitutes the vowel jamo form of a cluster.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.VerticalKanaAlternates">
            <summary>
            Vertical Kana Alternates. Shortcode: vkna.
            Replaces standard kana with forms that have been specially designed for only vertical writing. This is a typographic optimization for improved fit and more even color. Also see 'hkna'.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.VerticalKerning">
            <summary>
            Vertical Kerning. Shortcode: vkrn
            Adjusts amount of space between glyphs, generally to provide optically consistent spacing between glyphs.
            Although a well-designed typeface has consistent inter-glyph spacing overall, some glyph combinations require adjustment for improved legibility.
            Besides standard adjustment in the vertical direction, this feature can supply size-dependent kerning data via device tables,
            “cross-stream” kerning in the X text direction, and adjustment of glyph placement independent of the advance adjustment.
            Note that this feature may apply to runs of more than two glyphs, and would not be used in monospaced fonts. Also note that this feature applies only to text set vertically.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.ProportionalAlternateVerticalMetrics">
            <summary>
            Proportional Alternate Vertical Metrics. Shortcode: vpal.
            Respaces glyphs designed to be set on full-em heights, fitting them onto individual (more or less proportional) vertical heights. This differs from 'valt' in that it does not substitute new glyphs (GPOS, not GSUB feature).
            The user may prefer the monospaced form, or may simply want to ensure that the glyph is well-fit.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.VerticalAlternatesAndRotation">
            <summary>
            Vertical Alternates and Rotation. Shortcode: vrt2.
            Replaces some fixed-width (half-, third- or quarter-width) or proportional-width glyphs (mostly Latin or katakana) with forms suitable for vertical writing (that is, rotated 90 degrees clockwise).
            Note that these are a superset of the glyphs covered in the 'vert' table.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.VerticalAlternatesForRotation">
            <summary>
            Vertical Alternates for Rotation. Shortcode: vrtr.
            Transforms default glyphs into glyphs that are appropriate for sideways presentation in vertical writing mode.
            While the glyphs for most characters in East Asian writing systems remain upright when set in vertical writing mode, glyphs for other characters —
            such as those of other scripts or for particular Western-style punctuation — are expected to be presented sideways in vertical writing.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.SlashedZero">
            <summary>
            Slashed Zero. Shortcode: zero.
             Some fonts contain both a default form of zero, and an alternative form which uses a diagonal slash through the counter. Especially in condensed designs, it can be difficult to distinguish between 0 and O (zero and capital O) in any situation where capitals and lining figures may be arbitrarily mixed.
            This feature allows the user to change from the default 0 to a slashed form.
            </summary>
        </member>
        <member name="T:SixLabors.Fonts.Tables.AdvancedTypographic.GlyphClassDef">
            <summary>
            The GSUB and GPOS tables use the Glyph Class Definition table (GlyphClassDef) to identify which glyph classes to adjust with lookups.
            <see href="https://docs.microsoft.com/en-us/typography/opentype/spec/gdef#glyph-class-definition-table"/>
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.GlyphClassDef.BaseGlyph">
            <summary>
            Base glyph (single character, spacing glyph).
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.GlyphClassDef.LigatureGlyph">
            <summary>
            Ligature glyph (multiple character, spacing glyph).
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.GlyphClassDef.MarkGlyph">
            <summary>
            Mark glyph (non-spacing combining glyph).
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.GlyphClassDef.ComponentGlyph">
            <summary>
            Component glyph (part of single character, spacing glyph).
            </summary>
        </member>
        <member name="T:SixLabors.Fonts.Tables.AdvancedTypographic.GlyphDefinitionTable">
            <summary>
            The GDEF table contains three kinds of information in subtables:
            1. glyph class definitions that classify different types of glyphs in a font;
            2. attachment point lists that identify glyph positioning attachments for each glyph;
            and 3. ligature caret lists that provide information for caret positioning and text selection involving ligatures.
            <see href="https://docs.microsoft.com/en-us/typography/opentype/spec/gdef"/>
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.Tables.AdvancedTypographic.GPos.AnchorTable.#ctor(System.Int16,System.Int16)">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Fonts.Tables.AdvancedTypographic.GPos.AnchorTable"/> class.
            </summary>
            <param name="xCoordinate">The horizontal value, in design units.</param>
            <param name="yCoordinate">The vertical value, in design units.</param>
        </member>
        <member name="P:SixLabors.Fonts.Tables.AdvancedTypographic.GPos.AnchorTable.XCoordinate">
            <summary>
            Gets the horizontal value, in design units.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.Tables.AdvancedTypographic.GPos.AnchorTable.YCoordinate">
            <summary>
            Gets the vertical value, in design units.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.Tables.AdvancedTypographic.GPos.AnchorTable.Load(SixLabors.Fonts.BigEndianBinaryReader,System.Int64)">
            <summary>
            Loads the anchor table.
            </summary>
            <param name="reader">The big endian binary reader.</param>
            <param name="offset">The offset to the beginning of the anchor table.</param>
            <returns>The anchor table.</returns>
        </member>
        <member name="T:SixLabors.Fonts.Tables.AdvancedTypographic.GPos.AnchorXY">
            <summary>
            Represents the anchor coordinates for a given table.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.Tables.AdvancedTypographic.GPos.AnchorXY.XCoordinate">
            <summary>
            Gets the horizontal value, in design units.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.Tables.AdvancedTypographic.GPos.AnchorXY.YCoordinate">
            <summary>
            Gets the vertical value, in design units.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.Tables.AdvancedTypographic.GPos.BaseArrayTable.#ctor(SixLabors.Fonts.BigEndianBinaryReader,System.Int64,System.UInt16)">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Fonts.Tables.AdvancedTypographic.GPos.BaseArrayTable"/> class.
            </summary>
            <param name="reader">The big endian binary reader.</param>
            <param name="offset">The offset to the beginning of the base array table.</param>
            <param name="classCount">The class count.</param>
        </member>
        <member name="P:SixLabors.Fonts.Tables.AdvancedTypographic.GPos.BaseArrayTable.BaseRecords">
            <summary>
            Gets the base records.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.Tables.AdvancedTypographic.GPos.BaseRecord.#ctor(SixLabors.Fonts.BigEndianBinaryReader,System.UInt16,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Fonts.Tables.AdvancedTypographic.GPos.BaseRecord"/> struct.
            </summary>
            <param name="reader">The big endian binary reader.</param>
            <param name="classCount">The class count.</param>
            <param name="offset">Offset to the from beginning of BaseArray table.</param>
        </member>
        <member name="P:SixLabors.Fonts.Tables.AdvancedTypographic.GPos.BaseRecord.BaseAnchorTables">
            <summary>
            Gets the base anchor tables.
            </summary>
        </member>
        <member name="T:SixLabors.Fonts.Tables.AdvancedTypographic.GPos.Class2Record">
            <summary>
            Class2Record used in Pair Adjustment Positioning Format 2.
            A Class2Record consists of two ValueRecords, one for the first glyph in a class pair (valueRecord1) and one for the second glyph (valueRecord2).
            Note that both fields of a Class2Record are optional: If the PairPos subtable has a value of zero (0) for valueFormat1 or valueFormat2,
            then the corresponding record (valueRecord1 or valueRecord2) will be empty — that is, not present.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.Tables.AdvancedTypographic.GPos.Class2Record.#ctor(SixLabors.Fonts.BigEndianBinaryReader,SixLabors.Fonts.Tables.AdvancedTypographic.GPos.ValueFormat,SixLabors.Fonts.Tables.AdvancedTypographic.GPos.ValueFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Fonts.Tables.AdvancedTypographic.GPos.Class2Record"/> struct.
            </summary>
            <param name="reader">The big endian binary reader.</param>
            <param name="valueFormat1">The value format for value record 1.</param>
            <param name="valueFormat2">The value format for value record 2.</param>
        </member>
        <member name="P:SixLabors.Fonts.Tables.AdvancedTypographic.GPos.Class2Record.ValueRecord1">
            <summary>
            Gets the positioning for the first glyph.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.Tables.AdvancedTypographic.GPos.Class2Record.ValueRecord2">
            <summary>
            Gets the positioning for second glyph.
            </summary>
        </member>
        <member name="T:SixLabors.Fonts.Tables.AdvancedTypographic.GPos.ComponentRecord">
            <summary>
            In a ComponentRecord, the zero-based ligatureAnchorOffsets array lists offsets to Anchor tables by mark class.
            If a component does not define an attachment point for a particular class of marks, then the offset to the corresponding Anchor table will be NULL.
            Example 8 at the end of this chapter shows a MarkLigPosFormat1 subtable used to attach mark accents to a ligature glyph in the Arabic script.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.Tables.AdvancedTypographic.GPos.ComponentRecord.#ctor(SixLabors.Fonts.BigEndianBinaryReader,System.UInt16,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Fonts.Tables.AdvancedTypographic.GPos.ComponentRecord"/> class.
            </summary>
            <param name="reader">The big endian binary reader.</param>
            <param name="markClassCount">Number of defined mark classes.</param>
            <param name="offset">Offset from beginning of LigatureAttach table.</param>
        </member>
        <member name="M:SixLabors.Fonts.Tables.AdvancedTypographic.GPos.EntryExitAnchors.#ctor(SixLabors.Fonts.BigEndianBinaryReader,System.Int64,SixLabors.Fonts.Tables.AdvancedTypographic.GPos.EntryExitRecord)">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Fonts.Tables.AdvancedTypographic.GPos.EntryExitAnchors"/> class.
            </summary>
            <param name="reader">The big endian binary reader.</param>
            <param name="offset">The offset to exitAnchor table, from beginning of CursivePos subtable.</param>
            <param name="entryExitRecord">Offsets to entry and exit Anchor table, from beginning of CursivePos subtable.</param>
        </member>
        <member name="P:SixLabors.Fonts.Tables.AdvancedTypographic.GPos.EntryExitAnchors.EntryAnchor">
            <summary>
            Gets the entry anchor table.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.Tables.AdvancedTypographic.GPos.EntryExitAnchors.ExitAnchor">
            <summary>
            Gets the exit anchor table.
            </summary>
        </member>
        <member name="T:SixLabors.Fonts.Tables.AdvancedTypographic.GPos.EntryExitRecord">
            <summary>
            EntryExitRecord sued in Cursive Attachment Positioning Format1.
            Each EntryExitRecord consists of two offsets: one to an Anchor table that identifies the entry point on the glyph (entryAnchorOffset),
            and an offset to an Anchor table that identifies the exit point on the glyph (exitAnchorOffset).
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.Tables.AdvancedTypographic.GPos.EntryExitRecord.#ctor(SixLabors.Fonts.BigEndianBinaryReader,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Fonts.Tables.AdvancedTypographic.GPos.EntryExitRecord"/> struct.
            </summary>
            <param name="reader">The big endian binary reader.</param>
            <param name="offset">The offset to exitAnchor table, from beginning of CursivePos subtable.</param>
        </member>
        <member name="P:SixLabors.Fonts.Tables.AdvancedTypographic.GPos.EntryExitRecord.EntryAnchorOffset">
            <summary>
            Gets the offset to entryAnchor table, from beginning of CursivePos subtable.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.Tables.AdvancedTypographic.GPos.EntryExitRecord.ExitAnchorOffset">
            <summary>
            Gets the offset to exitAnchor table, from beginning of CursivePos subtable.
            </summary>
        </member>
        <member name="T:SixLabors.Fonts.Tables.AdvancedTypographic.GPos.LigatureArrayTable">
            <summary>
            The LigatureArray table contains a count (ligatureCount) and an array of offsets (ligatureAttachOffsets) to LigatureAttach tables.
            The ligatureAttachOffsets array lists the offsets to LigatureAttach tables, one for each ligature glyph listed in the ligatureCoverage table,
            in the same order as the ligatureCoverage index.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.Tables.AdvancedTypographic.GPos.LigatureArrayTable.#ctor(SixLabors.Fonts.BigEndianBinaryReader,System.Int64,System.UInt16)">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Fonts.Tables.AdvancedTypographic.GPos.LigatureArrayTable"/> class.
            </summary>
            <param name="reader">The big endian binary reader.</param>
            <param name="offset">The offset to the start of the ligature array table.</param>
            <param name="markClassCount">Number of defined mark classes.</param>
        </member>
        <member name="T:SixLabors.Fonts.Tables.AdvancedTypographic.GPos.LigatureAttachTable">
            <summary>
            Each LigatureAttach table consists of an array (componentRecords) and count (componentCount) of the component glyphs in a ligature.
            The array stores the ComponentRecords in the same order as the components in the ligature.
            The order of the records also corresponds to the writing direction — that is, the logical direction — of the text.
            For text written left to right, the first component is on the left; for text written right to left, the first component is on the right.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.Tables.AdvancedTypographic.GPos.LigatureAttachTable.#ctor(SixLabors.Fonts.BigEndianBinaryReader,System.UInt16,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Fonts.Tables.AdvancedTypographic.GPos.LigatureAttachTable"/> class.
            </summary>
            <param name="reader">The big endian binary reader.</param>
            <param name="markClassCount">Number of defined mark classes.</param>
            <param name="offset">Offset from beginning of LigatureAttach table.</param>
        </member>
        <member name="T:SixLabors.Fonts.Tables.AdvancedTypographic.GPos.LookupListTable">
            <summary>
            The headers of the GSUB and GPOS tables contain offsets to Lookup List tables (LookupList) for
            glyph substitution (GSUB table) and glyph positioning (GPOS table). The LookupList table contains
            an array of offsets to Lookup tables (lookupOffsets).
            <see href="https://docs.microsoft.com/en-us/typography/opentype/spec/chapter2#lookup-list-table"/>
            </summary>
        </member>
        <member name="T:SixLabors.Fonts.Tables.AdvancedTypographic.GPos.LookupTable">
            <summary>
            A Lookup table (Lookup) defines the specific conditions, type, and results of a substitution
            or positioning action that is used to implement a feature. For example, a substitution
            operation requires a list of target glyph indices to be replaced, a list of replacement glyph
            indices, and a description of the type of substitution action.
            <see href="https://docs.microsoft.com/en-us/typography/opentype/spec/chapter2#lookup-table"/>
            </summary>
        </member>
        <member name="T:SixLabors.Fonts.Tables.AdvancedTypographic.GPos.LookupType1SubTable">
            <summary>
            A single adjustment positioning subtable (SinglePos) is used to adjust the placement or advance of a single glyph,
            such as a subscript or superscript. In addition, a SinglePos subtable is commonly used to implement lookup data for contextual positioning.
            A SinglePos subtable will have one of two formats: one that applies the same adjustment to a series of glyphs(Format 1),
            and one that applies a different adjustment for each unique glyph(Format 2).
            <see href="https://docs.microsoft.com/en-us/typography/opentype/spec/gpos#lookup-type-1-single-adjustment-positioning-subtable"/>
            </summary>
        </member>
        <member name="T:SixLabors.Fonts.Tables.AdvancedTypographic.GPos.LookupType2SubTable">
            <summary>
            A pair adjustment positioning subtable (PairPos) is used to adjust the placement or advances of two glyphs in relation to one another —
            for instance, to specify kerning data for pairs of glyphs. Compared to a typical kerning table, however,
            a PairPos subtable offers more flexibility and precise control over glyph positioning.
            The PairPos subtable can adjust each glyph in a pair independently in both the X and Y directions,
            and it can explicitly describe the particular type of adjustment applied to each glyph.
            PairPos subtables can be either of two formats: one that identifies glyphs individually by index(Format 1), and one that identifies glyphs by class (Format 2).
            <see href="https://docs.microsoft.com/en-us/typography/opentype/spec/gpos#lookup-type-2-pair-adjustment-positioning-subtable"/>
            </summary>
        </member>
        <member name="T:SixLabors.Fonts.Tables.AdvancedTypographic.GPos.LookupType3SubTable">
            <summary>
            Cursive Attachment Positioning Subtable.
            Some cursive fonts are designed so that adjacent glyphs join when rendered with their default positioning.
            However, if positioning adjustments are needed to join the glyphs, a cursive attachment positioning (CursivePos) subtable can describe
            how to connect the glyphs by aligning two anchor points: the designated exit point of a glyph, and the designated entry point of the following glyph.
            <see href="https://docs.microsoft.com/en-us/typography/opentype/spec/gpos#cursive-attachment-positioning-format1-cursive-attachment"/>
            </summary>
        </member>
        <member name="T:SixLabors.Fonts.Tables.AdvancedTypographic.GPos.LookupType4SubTable">
            <summary>
            Mark-to-Base Attachment Positioning Subtable. The MarkToBase attachment (MarkBasePos) subtable is used to position combining mark glyphs with respect to base glyphs.
            For example, the Arabic, Hebrew, and Thai scripts combine vowels, diacritical marks, and tone marks with base glyphs.
            <see href="https://docs.microsoft.com/en-us/typography/opentype/spec/gpos#lookup-type-4-mark-to-base-attachment-positioning-subtable"/>
            </summary>
        </member>
        <member name="T:SixLabors.Fonts.Tables.AdvancedTypographic.GPos.LookupType5SubTable">
            <summary>
            Mark-to-Ligature Attachment Positioning Subtable.
            The MarkToLigature attachment (MarkLigPos) subtable is used to position combining mark glyphs with respect to ligature base glyphs.
            With MarkToBase attachment, described previously, each base glyph has an attachment point defined for each class of marks.
            MarkToLigature attachment is similar, except that each ligature glyph is defined to have multiple components (in a virtual sense — not actual glyphs),
            and each component has a separate set of attachment points defined for the different mark classes.
            <see href="https://docs.microsoft.com/en-us/typography/opentype/spec/gpos#lookup-type-5-mark-to-ligature-attachment-positioning-subtable"/>
            </summary>
        </member>
        <member name="T:SixLabors.Fonts.Tables.AdvancedTypographic.GPos.LookupType6SubTable">
            <summary>
            Lookup Type 6: Mark-to-Mark Attachment Positioning Subtable.
            The MarkToMark attachment (MarkMarkPos) subtable is identical in form to the MarkToBase attachment subtable, although its function is different.
            MarkToMark attachment defines the position of one mark relative to another mark as when, for example,
            positioning tone marks with respect to vowel diacritical marks in Vietnamese.
            <see href="https://docs.microsoft.com/en-us/typography/opentype/spec/gpos#lookup-type-6-mark-to-mark-attachment-positioning-subtable"/>
            </summary>
        </member>
        <member name="T:SixLabors.Fonts.Tables.AdvancedTypographic.GPos.LookupType7SubTable">
            <summary>
            Lookup Type 7: Contextual Positioning Subtables.
            A Contextual Positioning subtable describes glyph positioning in context so a text-processing client can adjust the position
            of one or more glyphs within a certain pattern of glyphs.
            <see href="https://docs.microsoft.com/en-us/typography/opentype/spec/gpos#lookup-type-7-contextual-positioning-subtables"/>
            </summary>
        </member>
        <member name="T:SixLabors.Fonts.Tables.AdvancedTypographic.GPos.LookupType8SubTable">
            <summary>
            LookupType 8: Chained Contexts Positioning Subtable.
            A Chained Contexts Positioning subtable describes glyph positioning in context with an ability to look back and/or look ahead in the sequence of glyphs.
            The design of the Chained Contexts Positioning subtable is parallel to that of the Contextual Positioning subtable, including the availability of three formats.
            Each format can describe one or more chained backtrack, input, and lookahead sequence combinations, and one or more positioning adjustments for glyphs in each input sequence.
            <see href="https://docs.microsoft.com/en-us/typography/opentype/spec/gpos#lookuptype-8-chained-contexts-positioning-subtable"/>
            </summary>
        </member>
        <member name="T:SixLabors.Fonts.Tables.AdvancedTypographic.GPos.LookupType9SubTable">
            <summary>
            This lookup provides a mechanism whereby any other lookup type’s subtables are stored at a 32-bit offset location in the GPOS table.
            This is needed if the total size of the subtables exceeds the 16-bit limits of the various other offsets in the GPOS table.
            In this specification, the subtable stored at the 32-bit offset location is termed the “extension” subtable.
            <see href="https://docs.microsoft.com/en-us/typography/opentype/spec/gpos#lookuptype-9-extension-positioning"/>
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.Tables.AdvancedTypographic.GPos.Mark2ArrayTable.#ctor(SixLabors.Fonts.BigEndianBinaryReader,System.UInt16,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Fonts.Tables.AdvancedTypographic.GPos.Mark2ArrayTable"/> class.
            </summary>
            <param name="reader">The big endian binary reader.</param>
            <param name="markClassCount">The number of mark classes.</param>
            <param name="offset">The offset to the start of the mark array table.</param>
        </member>
        <member name="T:SixLabors.Fonts.Tables.AdvancedTypographic.GPos.Mark2Record">
            <summary>
            A Mark2Record declares one Anchor table for each mark class (including Class 0) identified in the MarkRecords of the MarkArray.
            Each Anchor table specifies one mark2 attachment point used to attach all the mark1 glyphs in a particular class to the mark2 glyph.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.Tables.AdvancedTypographic.GPos.Mark2Record.#ctor(SixLabors.Fonts.BigEndianBinaryReader,System.UInt16,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Fonts.Tables.AdvancedTypographic.GPos.Mark2Record"/> class.
            </summary>
            <param name="reader">The big endian binary reader.</param>
            <param name="markClassCount">The Number of Mark2 records.</param>
            <param name="offset">Offset to the beginning of MarkArray table.</param>
        </member>
        <member name="P:SixLabors.Fonts.Tables.AdvancedTypographic.GPos.Mark2Record.MarkAnchorTable">
            <summary>
            Gets the mark anchor table.
            </summary>
        </member>
        <member name="T:SixLabors.Fonts.Tables.AdvancedTypographic.GPos.MarkArrayTable">
            <summary>
            The MarkArray table defines the class and the anchor point for a mark glyph.
            Three GPOS subtable types — MarkToBase attachment, MarkToLigature attachment,
            and MarkToMark attachment — use the MarkArray table to specify data for attaching marks.
            The MarkArray table contains a count of the number of MarkRecords(markCount) and an array of those records(markRecords).
            Each mark record defines the class of the mark and an offset to the Anchor table that contains data for the mark.
            <see href="https://docs.microsoft.com/en-us/typography/opentype/spec/gpos#mark-array-table"/>
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.Tables.AdvancedTypographic.GPos.MarkArrayTable.#ctor(SixLabors.Fonts.BigEndianBinaryReader,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Fonts.Tables.AdvancedTypographic.GPos.MarkArrayTable"/> class.
            </summary>
            <param name="reader">The big endian binary reader.</param>
            <param name="offset">The offset to the start of the mark array table.</param>
        </member>
        <member name="P:SixLabors.Fonts.Tables.AdvancedTypographic.GPos.MarkArrayTable.MarkRecords">
            <summary>
            Gets the mark records.
            </summary>
        </member>
        <member name="T:SixLabors.Fonts.Tables.AdvancedTypographic.GPos.MarkRecord">
            <summary>
            Defines a mark record used in a mark array table:
            <see href="https://docs.microsoft.com/en-us/typography/opentype/spec/gpos#mark-array-table"/>
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.Tables.AdvancedTypographic.GPos.MarkRecord.#ctor(SixLabors.Fonts.BigEndianBinaryReader,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Fonts.Tables.AdvancedTypographic.GPos.MarkRecord"/> struct.
            </summary>
            <param name="reader">The big endian binary reader.</param>
            <param name="offset">Offset to the beginning of MarkArray table.</param>
        </member>
        <member name="P:SixLabors.Fonts.Tables.AdvancedTypographic.GPos.MarkRecord.MarkClass">
            <summary>
            Gets the class defined for the associated mark.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.Tables.AdvancedTypographic.GPos.MarkRecord.MarkAnchorTable">
            <summary>
            Gets the mark anchor table.
            </summary>
        </member>
        <member name="T:SixLabors.Fonts.Tables.AdvancedTypographic.GPos.PairValueRecord">
            <summary>
            PairValueRecords are used in pair adjustment positioning subtables to adjust the placement or advances of two glyphs in relation to one another.
            <see href="https://docs.microsoft.com/en-us/typography/opentype/spec/gpos#lookup-type-2-pair-adjustment-positioning-subtable"/>
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.Tables.AdvancedTypographic.GPos.PairValueRecord.#ctor(SixLabors.Fonts.BigEndianBinaryReader,SixLabors.Fonts.Tables.AdvancedTypographic.GPos.ValueFormat,SixLabors.Fonts.Tables.AdvancedTypographic.GPos.ValueFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Fonts.Tables.AdvancedTypographic.GPos.PairValueRecord"/> struct.
            </summary>
            <param name="reader">The big endian binary reader.</param>
            <param name="valueFormat1">The types of data in valueRecord1 — for the first glyph in the pair (may be zero).</param>
            <param name="valueFormat2">The types of data in valueRecord2 — for the first glyph in the pair (may be zero).</param>
        </member>
        <member name="P:SixLabors.Fonts.Tables.AdvancedTypographic.GPos.PairValueRecord.SecondGlyph">
            <summary>
            Gets the second glyph ID.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.Tables.AdvancedTypographic.GPos.PairValueRecord.ValueRecord1">
            <summary>
            Gets the Positioning data for the first glyph in the pair.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.Tables.AdvancedTypographic.GPos.PairValueRecord.ValueRecord2">
            <summary>
            Gets the Positioning data for the second glyph in the pair.
            </summary>
        </member>
        <member name="T:SixLabors.Fonts.Tables.AdvancedTypographic.GPos.ValueFormat">
            <summary>
            A ValueFormat flags field defines the types of positioning adjustment data that ValueRecords specify.
            <see href="https://docs.microsoft.com/en-us/typography/opentype/spec/gpos#value-record"/>
            </summary>
        </member>
        <member name="T:SixLabors.Fonts.Tables.AdvancedTypographic.GPos.ValueRecord">
            <summary>
            GPOS subtables use ValueRecords to describe all the variables and values used to adjust the position
            of a glyph or set of glyphs. A ValueRecord may define any combination of X and Y values (in design units)
            to add to (positive values) or subtract from (negative values) the placement and advance values provided in the font.
            <see href="https://docs.microsoft.com/en-us/typography/opentype/spec/gpos#value-record"/>
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.Tables.AdvancedTypographic.GPos.ValueRecord.#ctor(SixLabors.Fonts.BigEndianBinaryReader,SixLabors.Fonts.Tables.AdvancedTypographic.GPos.ValueFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Fonts.Tables.AdvancedTypographic.GPos.ValueRecord"/> struct.
            </summary>
            <param name="reader">The big endian binary reader.</param>
            <param name="valueFormat">Defines the types of data in the ValueRecord.</param>
        </member>
        <member name="T:SixLabors.Fonts.Tables.AdvancedTypographic.GPosTable">
            <summary>
            The Glyph Positioning table (GPOS) provides precise control over glyph placement for
            sophisticated text layout and rendering in each script and language system that a font supports.
            <see href="https://docs.microsoft.com/en-us/typography/opentype/spec/gpos"/>
            </summary>
        </member>
        <member name="T:SixLabors.Fonts.Tables.AdvancedTypographic.GSub.LookupListTable">
            <summary>
            The headers of the GSUB and GPOS tables contain offsets to Lookup List tables (LookupList) for
            glyph substitution (GSUB table) and glyph positioning (GPOS table). The LookupList table contains
            an array of offsets to Lookup tables (lookupOffsets).
            <see href="https://docs.microsoft.com/en-us/typography/opentype/spec/chapter2#lookup-list-table"/>
            </summary>
        </member>
        <member name="T:SixLabors.Fonts.Tables.AdvancedTypographic.GSub.LookupTable">
            <summary>
            A Lookup table (Lookup) defines the specific conditions, type, and results of a substitution
            or positioning action that is used to implement a feature. For example, a substitution
            operation requires a list of target glyph indices to be replaced, a list of replacement glyph
            indices, and a description of the type of substitution action.
            <see href="https://docs.microsoft.com/en-us/typography/opentype/spec/chapter2#lookup-table"/>
            </summary>
        </member>
        <member name="T:SixLabors.Fonts.Tables.AdvancedTypographic.GSub.LookupType1SubTable">
            <summary>
            Single substitution (SingleSubst) subtables tell a client to replace a single glyph with another glyph.
            The subtables can be either of two formats. Both formats require two distinct sets of glyph indices:
            one that defines input glyphs (specified in the Coverage table), and one that defines the output glyphs.
            Format 1 requires less space than Format 2, but it is less flexible.
            <see href="https://docs.microsoft.com/en-us/typography/opentype/spec/gsub#lookuptype-1-single-substitution-subtable"/>
            </summary>
        </member>
        <member name="T:SixLabors.Fonts.Tables.AdvancedTypographic.GSub.LookupType2SubTable">
            <summary>
            A Multiple Substitution (MultipleSubst) subtable replaces a single glyph with more than one glyph,
            as when multiple glyphs replace a single ligature. The subtable has a single format: MultipleSubstFormat1.
            <see href="https://docs.microsoft.com/en-us/typography/opentype/spec/gsub#lookuptype-2-multiple-substitution-subtable"/>
            </summary>
        </member>
        <member name="T:SixLabors.Fonts.Tables.AdvancedTypographic.GSub.LookupType3SubTable">
            <summary>
            An Alternate Substitution (AlternateSubst) subtable identifies any number of aesthetic alternatives
            from which a user can choose a glyph variant to replace the input glyph.
            <see href="https://docs.microsoft.com/en-us/typography/opentype/spec/gsub#lookuptype-3-alternate-substitution-subtable"/>
            </summary>
        </member>
        <member name="T:SixLabors.Fonts.Tables.AdvancedTypographic.GSub.LookupType4SubTable">
            <summary>
            A Ligature Substitution (LigatureSubst) subtable identifies ligature substitutions where a single glyph replaces multiple glyphs.
            One LigatureSubst subtable can specify any number of ligature substitutions.
            The subtable has one format: LigatureSubstFormat1.
            <see href="https://docs.microsoft.com/en-us/typography/opentype/spec/gsub#lookuptype-4-ligature-substitution-subtable"/>
            </summary>
        </member>
        <member name="T:SixLabors.Fonts.Tables.AdvancedTypographic.GSub.LookupType5SubTable">
            <summary>
            A Contextual Substitution subtable describes glyph substitutions in context that replace one
            or more glyphs within a certain pattern of glyphs.
            <see href="https://docs.microsoft.com/en-us/typography/opentype/spec/gsub#lookuptype-5-contextual-substitution-subtable"/>
            </summary>
        </member>
        <member name="T:SixLabors.Fonts.Tables.AdvancedTypographic.GSub.LookupType6SubTable">
            <summary>
            A Chained Contexts Substitution subtable describes glyph substitutions in context
            with an ability to look back and/or look ahead in the sequence of glyphs.
            <see href="https://docs.microsoft.com/en-us/typography/opentype/spec/gsub#lookuptype-6-chained-contexts-substitution-subtable"/>
            </summary>
        </member>
        <member name="T:SixLabors.Fonts.Tables.AdvancedTypographic.GSub.LookupType7SubTable">
            <summary>
            This lookup provides a mechanism whereby any other lookup type’s subtables are stored at a 32-bit offset location
            in the GSUB table. This is needed if the total size of the subtables exceeds the 16-bit limits of the various
            other offsets in the GSUB table. In this specification, the subtable stored at the 32-bit offset location is
            termed the "extension" subtable.
            <see href="https://docs.microsoft.com/en-us/typography/opentype/spec/gsub#lookuptype-7-extension-substitution"/>
            </summary>
        </member>
        <member name="T:SixLabors.Fonts.Tables.AdvancedTypographic.GSub.LookupType8SubTable">
            <summary>
            An Alternate Substitution (AlternateSubst) subtable identifies any number of aesthetic alternatives
            from which a user can choose a glyph variant to replace the input glyph.
            <see href="https://docs.microsoft.com/en-us/typography/opentype/spec/gsub#lookuptype-3-alternate-substitution-subtable"/>
            </summary>
        </member>
        <member name="T:SixLabors.Fonts.Tables.AdvancedTypographic.GSubTable">
            <summary>
            The Glyph Substitution (GSUB) table provides data for substitution of glyphs for appropriate rendering of scripts,
            such as cursively-connecting forms in Arabic script, or for advanced typographic effects, such as ligatures.
            <see href="https://docs.microsoft.com/en-us/typography/opentype/spec/gsub"/>
            </summary>
        </member>
        <member name="T:SixLabors.Fonts.Tables.AdvancedTypographic.LookupFlags">
            <summary>
            LookupFlag bit enumeration, see: https://docs.microsoft.com/en-us/typography/opentype/spec/chapter2#lookup-table
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.LookupFlags.RightToLeft">
            <summary>
            This bit relates only to the correct processing of the cursive attachment lookup type (GPOS lookup type 3).
            When this bit is set, the last glyph in a given sequence to which the cursive attachment lookup is applied, will be positioned on the baseline.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.LookupFlags.IgnoreBaseGlypghs">
            <summary>
            If set, skips over base glyphs.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.LookupFlags.IgnoreLigatures">
            <summary>
            If set, skips over ligatures.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.LookupFlags.IgnoreMarks">
            <summary>
            If set, skips over all combining marks.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.LookupFlags.UseMarkFilteringSet">
            <summary>
            If set, indicates that the lookup table structure is followed by a MarkFilteringSet field.
            The layout engine skips over all mark glyphs not in the mark filtering set indicated.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.AdvancedTypographic.LookupFlags.MarkAttachmentTypeMask">
            <summary>
            If not zero, skips over all marks of attachment type different from specified.
            </summary>
        </member>
        <member name="T:SixLabors.Fonts.Tables.AdvancedTypographic.MarkZeroingMode">
            <summary>
            Provides enumeration determining when to zero mark advances.
            </summary>
        </member>
        <member name="T:SixLabors.Fonts.Tables.AdvancedTypographic.ScriptList">
            <summary>
            OpenType Layout fonts may contain one or more groups of glyphs used to render various scripts,
            which are enumerated in a ScriptList table. Both the GSUB and GPOS tables define
            Script List tables (ScriptList):
            <see href="https://docs.microsoft.com/en-us/typography/opentype/spec/chapter2#slTbl_sRec"/>
            </summary>
        </member>
        <member name="T:SixLabors.Fonts.Tables.AdvancedTypographic.SequenceLookupRecord">
            <summary>
            For all formats for both contextual and chained contextual lookups, a common record format
            is used to specify an action—a nested lookup—to be applied to a glyph at a particular
            sequence position within the input sequence.
            <see href="https://docs.microsoft.com/en-us/typography/opentype/spec/chapter2#sequence-lookup-record"/>
            </summary>
        </member>
        <member name="T:SixLabors.Fonts.Tables.AdvancedTypographic.Shapers.ArabicShaper">
            <summary>
            This is a shaper for Arabic, and other cursive scripts.
            The shaping state machine was ported from fontkit.
            <see href="https://github.com/foliojs/fontkit/blob/master/src/opentype/shapers/ArabicShaper.js"/>
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.Tables.AdvancedTypographic.Shapers.ArabicShaper.AssignFeatures(SixLabors.Fonts.IGlyphShapingCollection,System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Fonts.Tables.AdvancedTypographic.Shapers.BaseShaper.AssignFeatures(SixLabors.Fonts.IGlyphShapingCollection,System.Int32,System.Int32)">
            <summary>
            Assigns the substitution features to each glyph within the collection.
            </summary>
            <param name="collection">The glyph shaping collection.</param>
            <param name="index">The zero-based index of the elements to assign.</param>
            <param name="count">The number of elements to assign.</param>
        </member>
        <member name="T:SixLabors.Fonts.Tables.AdvancedTypographic.Shapers.DefaultShaper">
            <summary>
            Default shaper, which will be applied to all glyphs.
            Based on fontkit: <see href="https://github.com/foliojs/fontkit/blob/master/src/opentype/shapers/DefaultShaper.js"/>
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.Tables.AdvancedTypographic.Shapers.DefaultShaper.AssignFeatures(SixLabors.Fonts.IGlyphShapingCollection,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:SixLabors.Fonts.Tables.AdvancedTypographic.Shapers.HangulShaper">
            <summary>
            This is a shaper for the Hangul script, used by the Korean language.
            The shaping state machine was ported from fontkit.
            <see href="https://github.com/foliojs/fontkit/blob/master/src/opentype/shapers/HangulShaper.js"/>
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.Tables.AdvancedTypographic.Shapers.ShaperFactory.Create(SixLabors.Fonts.Unicode.ScriptClass,SixLabors.Fonts.TextOptions)">
            <summary>
            Creates a Shaper based on the given script language.
            </summary>
            <param name="script">The script language.</param>
            <param name="textOptions">The text options.</param>
            <returns>A shaper for the given script.</returns>
        </member>
        <member name="T:SixLabors.Fonts.Tables.AdvancedTypographic.Tag">
            <summary>
            Data type for tag identifiers. Tags are four byte integers, each byte representing a character.
            Tags are used to identify tables, design-variation axes, scripts, languages, font features, and baselines with
            human-readable names.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.Tables.AdvancedTypographic.Tag.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Fonts.Tables.AdvancedTypographic.Tag"/> struct.
            </summary>
            <param name="value">The tag value.</param>
        </member>
        <member name="P:SixLabors.Fonts.Tables.AdvancedTypographic.Tag.Value">
            <summary>
            Gets the Tag value as 32 bit unsigned integer.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.Tables.AdvancedTypographic.Tag.Parse(System.String)">
            <summary>
            Converts the string representation of a number to its Tag equivalent.
            </summary>
            <param name="value">A string containing a tag to convert.</param>
            <returns>The <see cref="T:SixLabors.Fonts.Tables.AdvancedTypographic.Tag"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.Tables.AdvancedTypographic.Tag.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Fonts.Tables.AdvancedTypographic.Tag.Equals(SixLabors.Fonts.Tables.AdvancedTypographic.Tag)">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Fonts.Tables.AdvancedTypographic.Tag.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Fonts.Tables.AdvancedTypographic.Tag.ToString">
            <inheritdoc/>
        </member>
        <member name="T:SixLabors.Fonts.Tables.AdvancedTypographic.UnicodeScriptTagMap">
            <summary>
            Provides a map from Unicode <see cref="T:SixLabors.Fonts.Unicode.ScriptClass"/> to OTF <see cref="T:SixLabors.Fonts.Tables.AdvancedTypographic.Tag"/>.
            <see href="https://docs.microsoft.com/en-us/typography/opentype/spec/scripttags"/>
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.Tables.AdvancedTypographic.UnicodeScriptTagMap.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:SixLabors.Fonts.Tables.AdvancedTypographic.UnicodeScriptTagMap"/> class from being created.
            </summary>
        </member>
        <member name="T:SixLabors.Fonts.Tables.General.CMap.Format14SubTable">
            <summary>
            Subtable format 14 specifies the Unicode Variation Sequences (UVSes) supported by the font.
            A Variation Sequence, according to the Unicode Standard, comprises a base character followed
            by a variation selector. For example, &lt;U+82A6, U+E0101&gt;.
            </summary>
        </member>
        <member name="T:SixLabors.Fonts.Tables.General.Glyphs.GlyphOutline">
            <summary>
            Represents the outline of a glyph.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.Tables.General.Glyphs.GlyphOutline.#ctor(System.Numerics.Vector2[],System.UInt16[],System.Boolean[])">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Fonts.Tables.General.Glyphs.GlyphOutline"/> struct.
            </summary>
            <param name="controlPoints">The vectorial points defining the shape of this glyph.</param>
            <param name="endPoints">The point indices for the last point of each contour, in increasing numeric order.</param>
            <param name="onCurves">Value indicating whether the corresponding <see cref="P:SixLabors.Fonts.Tables.General.Glyphs.GlyphOutline.ControlPoints"/> item is on a curve</param>
        </member>
        <member name="P:SixLabors.Fonts.Tables.General.Glyphs.GlyphOutline.ControlPoints">
            <summary>
            Gets the vectorial points defining the shape of this glyph.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.Tables.General.Glyphs.GlyphOutline.EndPoints">
            <summary>
            Gets the point indices for the last point of each contour, in increasing numeric order.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.Tables.General.Glyphs.GlyphOutline.OnCurves">
            <summary>
            Gets at value indicating whether the corresponding <see cref="P:SixLabors.Fonts.Tables.General.Glyphs.GlyphOutline.ControlPoints"/> item is on a curve.
            </summary>
        </member>
        <member name="T:SixLabors.Fonts.Tables.General.Glyphs.GlyphTableEntry">
            <summary>
            Represents a single simple glyph table entry.
            The type is mutable by design to reduce copying during transformation.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.Tables.General.Glyphs.GlyphTableEntry.#ctor(System.Numerics.Vector2[],System.Boolean[],System.UInt16[],SixLabors.Fonts.Bounds,System.ReadOnlyMemory{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Fonts.Tables.General.Glyphs.GlyphTableEntry"/> struct.
            </summary>
            <param name="controlPoints">The vectorial points defining the shape of this glyph.</param>
            <param name="onCurves">A value indicating whether the corresponding <see cref="P:SixLabors.Fonts.Tables.General.Glyphs.GlyphTableEntry.ControlPoints"/> item is on a curve.</param>
            <param name="endPoints">The point indices for the last point of each contour, in increasing numeric order.</param>
            <param name="bounds">The glyph bounds.</param>
            <param name="instructions">The glyph hinting insttructions.</param>
        </member>
        <member name="P:SixLabors.Fonts.Tables.General.Glyphs.GlyphTableEntry.PointCount">
            <summary>
            Gets the number of control points.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.Tables.General.Glyphs.GlyphTableEntry.ControlPoints">
            <summary>
            Gets or sets the vectorial points defining the shape of this glyph.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.Tables.General.Glyphs.GlyphTableEntry.EndPoints">
            <summary>
            Gets or sets the point indices for the last point of each contour, in increasing numeric order.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.Tables.General.Glyphs.GlyphTableEntry.OnCurves">
            <summary>
            Gets or sets a value indicating whether the corresponding <see cref="P:SixLabors.Fonts.Tables.General.Glyphs.GlyphTableEntry.ControlPoints"/> item is on a curve.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.Tables.General.Glyphs.GlyphTableEntry.Bounds">
            <summary>
            Gets or sets the glyph bounds.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.Tables.General.Glyphs.GlyphTableEntry.Instructions">
            <summary>
            Gets or sets the hinting instructions.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.Tables.General.Glyphs.GlyphTableEntry.Transform(SixLabors.Fonts.Tables.General.Glyphs.GlyphTableEntry,System.Numerics.Matrix3x2)">
            <summary>
            Transforms a glyph vector by a specified 3x2 matrix.
            </summary>
            <param name="src">The glyph vector to transform.</param>
            <param name="matrix">The transformation matrix.</param>
            <returns>The new <see cref="T:SixLabors.Fonts.Tables.General.Glyphs.GlyphVector"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.Tables.General.Glyphs.GlyphTableEntry.Scale(SixLabors.Fonts.Tables.General.Glyphs.GlyphTableEntry,System.Single)">
            <summary>
            Scales a glyph vector uniformly by a specified scale.
            </summary>
            <param name="src">The glyph vector to translate.</param>
            <param name="scale">The uniform scale to use.</param>
            <returns>The new <see cref="T:SixLabors.Fonts.Tables.General.Glyphs.GlyphTableEntry"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.Tables.General.Glyphs.GlyphTableEntry.Translate(SixLabors.Fonts.Tables.General.Glyphs.GlyphTableEntry,System.Single,System.Single)">
            <summary>
            Translates a glyph vector by a specified x and y coordinates.
            </summary>
            <param name="src">The glyph vector to translate.</param>
            <param name="dx">The x-offset.</param>
            <param name="dy">The y-offset.</param>
            <returns>The new <see cref="T:SixLabors.Fonts.Tables.General.Glyphs.GlyphTableEntry"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.Tables.General.Glyphs.GlyphTableEntry.DeepClone(SixLabors.Fonts.Tables.General.Glyphs.GlyphTableEntry)">
            <summary>
            Creates a new glyph table entry that is a deep copy of the specified instance.
            </summary>
            <param name="src">The source glyph table entry to copy.</param>
            <returns>The cloned <see cref="T:SixLabors.Fonts.Tables.General.Glyphs.GlyphTableEntry"/>.</returns>
        </member>
        <member name="T:SixLabors.Fonts.Tables.General.Glyphs.GlyphVector">
            <summary>
            Represents the raw glyph outlines for a given glyph comprised of a collection of glyph table entries.
            The type is mutable by design to reduce copying during transformation.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.Tables.General.Glyphs.GlyphVector.Transform(SixLabors.Fonts.Tables.General.Glyphs.GlyphVector,System.Numerics.Matrix3x2)">
            <summary>
            Transforms a glyph vector by a specified 3x2 matrix.
            </summary>
            <param name="src">The glyph vector to transform.</param>
            <param name="matrix">The transformation matrix.</param>
            <returns>The new <see cref="T:SixLabors.Fonts.Tables.General.Glyphs.GlyphVector"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.Tables.General.Glyphs.GlyphVector.Scale(SixLabors.Fonts.Tables.General.Glyphs.GlyphVector,System.Single)">
            <summary>
            Scales a glyph vector uniformly by a specified scale.
            </summary>
            <param name="src">The glyph vector to translate.</param>
            <param name="scale">The uniform scale to use.</param>
            <returns>The new <see cref="T:SixLabors.Fonts.Tables.General.Glyphs.GlyphVector"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.Tables.General.Glyphs.GlyphVector.Scale(SixLabors.Fonts.Tables.General.Glyphs.GlyphVector,System.Numerics.Vector2)">
            <summary>
            Scales a glyph vector uniformly by a specified scale.
            </summary>
            <param name="src">The glyph vector to translate.</param>
            <param name="scales">The vector scale to use.</param>
            <returns>The new <see cref="T:SixLabors.Fonts.Tables.General.Glyphs.GlyphVector"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.Tables.General.Glyphs.GlyphVector.Translate(SixLabors.Fonts.Tables.General.Glyphs.GlyphVector,System.Single,System.Single)">
            <summary>
            Translates a glyph vector by a specified x and y coordinates.
            </summary>
            <param name="src">The glyph vector to translate.</param>
            <param name="dx">The x-offset.</param>
            <param name="dy">The y-offset.</param>
            <returns>The new <see cref="T:SixLabors.Fonts.Tables.General.Glyphs.GlyphVector"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.Tables.General.Glyphs.GlyphVector.Append(SixLabors.Fonts.Tables.General.Glyphs.GlyphVector,SixLabors.Fonts.Tables.General.Glyphs.GlyphVector,SixLabors.Fonts.Bounds)">
            <summary>
            Appends the second glyph vector's control points to the first.
            </summary>
            <param name="first">The first glyph vector.</param>
            <param name="second">The second glyph vector.</param>
            <param name="compositeBounds">The bounds for the composite glyph.</param>
            <returns>The new <see cref="T:SixLabors.Fonts.Tables.General.Glyphs.GlyphVector"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.Tables.General.Glyphs.GlyphVector.Hint(SixLabors.Fonts.HintingMode,SixLabors.Fonts.Tables.General.Glyphs.GlyphVector@,SixLabors.Fonts.Hinting.Interpreter,System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
            Applies True Type hinting to the specified glyph vector.
            </summary>
            <param name="hintingMode">The hinting mode.</param>
            <param name="glyph">The glyph vector to hint.</param>
            <param name="interpreter">The True Type interpreter.</param>
            <param name="pp1">The first phantom point.</param>
            <param name="pp2">The second phantom point.</param>
            <param name="pp3">The third phantom point.</param>
            <param name="pp4">The fourth phantom point.</param>
        </member>
        <member name="M:SixLabors.Fonts.Tables.General.Glyphs.GlyphVector.DeepClone(SixLabors.Fonts.Tables.General.Glyphs.GlyphVector)">
            <summary>
            Creates a new glyph vector that is a deep copy of the specified instance.
            </summary>
            <param name="src">The source glyph vector to copy.</param>
            <returns>The cloned <see cref="T:SixLabors.Fonts.Tables.General.Glyphs.GlyphVector"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.Tables.General.Glyphs.GlyphVector.HasValue">
            <summary>
            Returns a value indicating whether the current instance is empty.
            </summary>
            <returns>The <see cref="T:System.Boolean"/> indicating the result.</returns>
        </member>
        <member name="M:SixLabors.Fonts.Tables.General.Glyphs.GlyphVector.GetBounds">
            <summary>
            Returns the bounds for the current instance.
            </summary>
            <returns>The <see cref="M:SixLabors.Fonts.Tables.General.Glyphs.GlyphVector.GetBounds"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.Tables.General.Glyphs.GlyphVector.GetOutline">
            <summary>
            Returns the result of combining each glyph within this instance as a single outline.
            </summary>
            <returns>The <see cref="T:SixLabors.Fonts.Tables.General.Glyphs.GlyphOutline"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.Tables.General.Glyphs.GlyphVector.WithCompositeBounds(SixLabors.Fonts.Tables.General.Glyphs.GlyphVector,SixLabors.Fonts.Bounds)">
            <summary>
            Returns a new instance with the composite bounds set to the specified value
            </summary>
            <param name="src">The src glyph vector.</param>
            <param name="bounds">The composite bounds.</param>
            <returns>The <see cref="T:SixLabors.Fonts.Tables.General.Glyphs.GlyphVector"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.Tables.General.Glyphs.GlyphVector.ModuloP2(System.Int32,System.Int32)">
            <summary>
            Fast (x mod m) calculator, with the restriction that
            <paramref name="m"/> should be power of 2.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.Tables.General.NameTable.Id(System.Globalization.CultureInfo)">
            <summary>
            Gets the name of the font.
            </summary>
            <value>
            The name of the font.
            </value>
        </member>
        <member name="M:SixLabors.Fonts.Tables.General.NameTable.FontName(System.Globalization.CultureInfo)">
            <summary>
            Gets the name of the font.
            </summary>
            <value>
            The name of the font.
            </value>
        </member>
        <member name="M:SixLabors.Fonts.Tables.General.NameTable.FontFamilyName(System.Globalization.CultureInfo)">
            <summary>
            Gets the name of the font.
            </summary>
            <value>
            The name of the font.
            </value>
        </member>
        <member name="M:SixLabors.Fonts.Tables.General.NameTable.FontSubFamilyName(System.Globalization.CultureInfo)">
            <summary>
            Gets the name of the font.
            </summary>
            <value>
            The name of the font.
            </value>
        </member>
        <member name="F:SixLabors.Fonts.Tables.TableFormat.Woff">
            <summary>
            woff font table format.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.TableFormat.Woff2">
            <summary>
            woff2 font table format.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Tables.TableFormat.Otf">
            <summary>
            otf font table format.
            </summary>
        </member>
        <member name="T:SixLabors.Fonts.Tables.TtcHeader">
            <summary>
            Represents a font collection header (for .ttc font collections).
            A font collection contains one or more fonts where typically the glyf table is shared by multiple fonts to save space,
            but other tables are not.
            Each font in the collection has its own set of tables.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.Tables.TtcHeader.TtcTag">
            <summary>
            Gets the tag, should be "ttcf".
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.Tables.TtcHeader.OffsetTable">
            <summary>
            Gets the array of offsets to the OffsetTable of each font. Use <see cref="T:SixLabors.Fonts.FontReader"/> for each font.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.Tables.Woff2Utils.ReadUIntBase128(SixLabors.Fonts.BigEndianBinaryReader,System.UInt32@)">
            <summary>
            Reads the UIntBase128 Data Type.
            </summary>
            <param name="reader">The binary reader using big endian encoding.</param>
            <param name="result">The result as uint.</param>
            <returns>true, if succeeded.</returns>
        </member>
        <member name="M:SixLabors.Fonts.Tables.Woff2Utils.Read255UInt16(SixLabors.Fonts.BigEndianBinaryReader)">
            <summary>
            Reads the UIntBase255 Data Type.
            </summary>
            <param name="reader">The binary reader using big endian encoding.</param>
            <returns>The UIntBase255 result.</returns>
        </member>
        <member name="T:SixLabors.Fonts.TextAlignment">
            <summary>
            Text alignment modes.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.TextAlignment.Start">
            <summary>
            Aligns text from the left or top when the text direction is <see cref="F:SixLabors.Fonts.TextDirection.LeftToRight"/>
            and from the right or bottom when the text direction is <see cref="F:SixLabors.Fonts.TextDirection.RightToLeft"/>.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.TextAlignment.End">
            <summary>
            Aligns text from the right or bottom when the text direction is <see cref="F:SixLabors.Fonts.TextDirection.LeftToRight"/>
            and from the left or top when the text direction is <see cref="F:SixLabors.Fonts.TextDirection.RightToLeft"/>.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.TextAlignment.Center">
            <summary>
            Aligns text from the center.
            </summary>
        </member>
        <member name="T:SixLabors.Fonts.TextAttributes">
            <summary>
            Provides enumeration of various text attributes.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.TextAttributes.None">
            <summary>
            No attributes are applied
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.TextAttributes.Subscript">
            <summary>
            The text set slightly below the normal line of type.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.TextAttributes.Superscript">
            <summary>
            The text set slightly above the normal line of type.
            </summary>
        </member>
        <member name="T:SixLabors.Fonts.TextDecorations">
            <summary>
            Provides enumeration of various text decorations.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.TextDecorations.None">
            <summary>
            No attributes are applied
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.TextDecorations.Underline">
            <summary>
            The text is underlined
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.TextDecorations.Strikeout">
            <summary>
            The text contains a horizontal line through the center.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.TextDecorations.Overline">
            <summary>
            The text contains a horizontal line above it
            </summary>
        </member>
        <member name="T:SixLabors.Fonts.TextDirection">
            <summary>
            Specifies the writing direction for text.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.TextDirection.LeftToRight">
            <summary>
            Left to right.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.TextDirection.RightToLeft">
            <summary>
            Right to left.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.TextDirection.Auto">
            <summary>
            Automatically determined.
            </summary>
        </member>
        <member name="T:SixLabors.Fonts.TextLayout">
            <summary>
            Encapsulated logic or laying out text.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.TextLayout.TextLine.LinearReOrder(SixLabors.Fonts.TextLayout.TextLine.OrderedBidiRun)">
            <summary>
            Reorders a series of runs from logical to visual order, returning the left most run.
            <see href="https://github.com/fribidi/linear-reorder/blob/f2f872257d4d8b8e137fcf831f254d6d4db79d3c/linear-reorder.c"/>
            </summary>
            <param name="line">The ordered bidi run.</param>
            <returns>The <see cref="T:SixLabors.Fonts.TextLayout.TextLine.OrderedBidiRun"/>.</returns>
        </member>
        <member name="T:SixLabors.Fonts.TextMeasurer">
            <summary>
            Encapsulated logic for laying out and then measuring text properties.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.TextMeasurer.Measure(System.String,SixLabors.Fonts.TextOptions)">
            <summary>
            Measures the text.
            </summary>
            <param name="text">The text.</param>
            <param name="options">The text shaping options.</param>
            <returns>The size of the text if it was to be rendered.</returns>
        </member>
        <member name="M:SixLabors.Fonts.TextMeasurer.Measure(System.ReadOnlySpan{System.Char},SixLabors.Fonts.TextOptions)">
            <summary>
            Measures the text.
            </summary>
            <param name="text">The text.</param>
            <param name="options">The text shaping options.</param>
            <returns>The size of the text if it was to be rendered.</returns>
        </member>
        <member name="M:SixLabors.Fonts.TextMeasurer.MeasureBounds(System.String,SixLabors.Fonts.TextOptions)">
            <summary>
            Measures the text.
            </summary>
            <param name="text">The text.</param>
            <param name="options">The text shaping options.</param>
            <returns>The size of the text if it was to be rendered.</returns>
        </member>
        <member name="M:SixLabors.Fonts.TextMeasurer.MeasureBounds(System.ReadOnlySpan{System.Char},SixLabors.Fonts.TextOptions)">
            <summary>
            Measures the text.
            </summary>
            <param name="text">The text.</param>
            <param name="options">The text shaping options.</param>
            <returns>The size of the text if it was to be rendered.</returns>
        </member>
        <member name="M:SixLabors.Fonts.TextMeasurer.TryMeasureCharacterBounds(System.String,SixLabors.Fonts.TextOptions,SixLabors.Fonts.GlyphBounds[]@)">
            <summary>
            Measures the character bounds of the text. For each control character the list contains a <c>null</c> element.
            </summary>
            <param name="text">The text.</param>
            <param name="options">The text shaping options.</param>
            <param name="characterBounds">The list of character bounds of the text if it was to be rendered.</param>
            <returns>Whether any of the characters had non-empty bounds.</returns>
        </member>
        <member name="M:SixLabors.Fonts.TextMeasurer.TryMeasureCharacterBounds(System.ReadOnlySpan{System.Char},SixLabors.Fonts.TextOptions,SixLabors.Fonts.GlyphBounds[]@)">
            <summary>
            Measures the character bounds of the text. For each control character the list contains a <c>null</c> element.
            </summary>
            <param name="text">The text.</param>
            <param name="options">The text shaping options.</param>
            <param name="characterBounds">The list of character bounds of the text if it was to be rendered.</param>
            <returns>Whether any of the characters had non-empty bounds.</returns>
        </member>
        <member name="M:SixLabors.Fonts.TextMeasurer.CountLines(System.String,SixLabors.Fonts.TextOptions)">
            <summary>
            Gets the number of lines contained within the text.
            </summary>
            <param name="text">The text.</param>
            <param name="options">The text shaping options.</param>
            <returns>The line count.</returns>
        </member>
        <member name="M:SixLabors.Fonts.TextMeasurer.CountLines(System.ReadOnlySpan{System.Char},SixLabors.Fonts.TextOptions)">
            <summary>
            Gets the number of lines contained within the text.
            </summary>
            <param name="text">The text.</param>
            <param name="options">The text shaping options.</param>
            <returns>The line count.</returns>
        </member>
        <member name="T:SixLabors.Fonts.TextOptions">
            <summary>
            Provides configuration options for rendering and shaping text.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.TextOptions.#ctor(SixLabors.Fonts.Font)">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Fonts.TextOptions"/> class.
            </summary>
            <param name="font">The font.</param>
        </member>
        <member name="M:SixLabors.Fonts.TextOptions.#ctor(SixLabors.Fonts.TextOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Fonts.TextOptions"/> class from properties
            copied from the given instance.
            </summary>
            <param name="options">The options whose properties are copied into this instance.</param>
        </member>
        <member name="P:SixLabors.Fonts.TextOptions.Font">
            <summary>
            Gets or sets the font.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.TextOptions.FallbackFontFamilies">
            <summary>
            Gets or sets the collection of fallback font families to use when
            a specific glyph is missing from <see cref="P:SixLabors.Fonts.TextOptions.Font"/>.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.TextOptions.Dpi">
            <summary>
            Gets or sets the DPI (Dots Per Inch) to render/measure the text at.
            <para/>
            Defaults to 72.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.TextOptions.TabWidth">
            <summary>
            Gets or sets the width of the tab. Measured as the distance in spaces.
            <para/>
            Defaults to 4.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.TextOptions.HintingMode">
            <summary>
            Gets or sets a value indicating whether to apply hinting - The use of mathematical instructions
            to adjust the display of an outline font so that it lines up with a rasterized grid.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.TextOptions.LineSpacing">
            <summary>
            Gets or sets the line spacing. Applied as a multiple of the line height.
            <para/>
            Defaults to 1.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.TextOptions.Origin">
            <summary>
            Gets or sets the rendering origin.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.TextOptions.WrappingLength">
            <summary>
            Gets or sets the length relative to the current DPI at which text will automatically wrap onto a newline.
            </summary>
            <remarks>
            If value is -1 then wrapping is disabled.
            </remarks>
        </member>
        <member name="P:SixLabors.Fonts.TextOptions.WordBreaking">
            <summary>
            Gets or sets the word breaking mode to use when wrapping text.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.TextOptions.TextDirection">
            <summary>
            Gets or sets the text direction.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.TextOptions.TextAlignment">
            <summary>
            Gets or sets the text alignment of the text within the box.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.TextOptions.HorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment of the text box.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.TextOptions.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment of the text box.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.TextOptions.LayoutMode">
            <summary>
            Gets or sets the layout mode for the text lines.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.TextOptions.KerningMode">
            <summary>
            Gets or sets the kerning mode indicating whether to apply kerning (character spacing adjustments)
            to the glyph positions from information found within the font.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.TextOptions.ColorFontSupport">
            <summary>
            Gets or sets a value indicating whether to enable various color font formats.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.TextOptions.FeatureTags">
            <summary>
            Gets or sets the collection of additional feature tags to apply during glyph shaping.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.TextOptions.TextRuns">
            <summary>
            Gets or sets an optional collection of text runs to apply to the body of text.
            </summary>
        </member>
        <member name="T:SixLabors.Fonts.TextRenderer">
            <summary>
            Encapsulated logic for laying out and then rendering text to a <see cref="T:SixLabors.Fonts.IGlyphRenderer"/> surface.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.TextRenderer.#ctor(SixLabors.Fonts.IGlyphRenderer)">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Fonts.TextRenderer"/> class.
            </summary>
            <param name="renderer">The renderer.</param>
        </member>
        <member name="M:SixLabors.Fonts.TextRenderer.RenderTextTo(SixLabors.Fonts.IGlyphRenderer,System.ReadOnlySpan{System.Char},SixLabors.Fonts.TextOptions)">
            <summary>
            Renders the text to the <paramref name="renderer"/>.
            </summary>
            <param name="renderer">The target renderer.</param>
            <param name="text">The text.</param>
            <param name="options">The style.</param>
        </member>
        <member name="M:SixLabors.Fonts.TextRenderer.RenderTextTo(SixLabors.Fonts.IGlyphRenderer,System.String,SixLabors.Fonts.TextOptions)">
            <summary>
            Renders the text to the <paramref name="renderer"/>.
            </summary>
            <param name="renderer">The target renderer.</param>
            <param name="text">The text.</param>
            <param name="options">The style.</param>
        </member>
        <member name="M:SixLabors.Fonts.TextRenderer.RenderText(System.String,SixLabors.Fonts.TextOptions)">
            <summary>
            Renders the text.
            </summary>
            <param name="text">The text.</param>
            <param name="options">The style.</param>
        </member>
        <member name="M:SixLabors.Fonts.TextRenderer.RenderText(System.ReadOnlySpan{System.Char},SixLabors.Fonts.TextOptions)">
            <summary>
            Renders the text.
            </summary>
            <param name="text">The text.</param>
            <param name="options">The style.</param>
        </member>
        <member name="T:SixLabors.Fonts.TextRun">
            <summary>
            Represents a run of text spanning a series of graphemes within a string.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.TextRun.Start">
            <summary>
            Gets or sets the inclusive start index of the first grapheme in this <see cref="T:SixLabors.Fonts.TextRun"/>.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.TextRun.End">
            <summary>
            Gets or sets the exclusive end index of the last grapheme in this <see cref="T:SixLabors.Fonts.TextRun"/>.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.TextRun.Font">
            <summary>
            Gets or sets the font for this run.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.TextRun.TextAttributes">
            <summary>
            Gets or sets the text attributes applied to this run.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.TextRun.TextDecorations">
            <summary>
            Gets or sets the text decorations applied to this run.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.TextRun.Slice(System.ReadOnlySpan{System.Char})">
            <summary>
            Returns the slice of the given text representing this <see cref="T:SixLabors.Fonts.TextRun"/>.
            </summary>
            <param name="text">The text to slice.</param>
            <returns>The <see cref="T:System.ReadOnlySpan`1"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.TextRun.ToString">
            <inheritdoc/>
        </member>
        <member name="T:SixLabors.Fonts.Unicode.ArrayBuilder`1">
            <summary>
            A helper type for avoiding allocations while building arrays.
            </summary>
            <typeparam name="T">The type of item contained in the array.</typeparam>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.ArrayBuilder`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Fonts.Unicode.ArrayBuilder`1"/> struct.
            </summary>
            <param name="capacity">The intitial capacity of the array.</param>
        </member>
        <member name="P:SixLabors.Fonts.Unicode.ArrayBuilder`1.Length">
            <summary>
            Gets or sets the number of items in the array.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.Unicode.ArrayBuilder`1.Item(System.Int32)">
            <summary>
            Returns a reference to specified element of the array.
            </summary>
            <param name="index">The index of the element to return.</param>
            <returns>The <typeparamref name="T"/>.</returns>
            <exception cref="T:System.IndexOutOfRangeException">
            Thrown when index less than 0 or index greater than or equal to <see cref="P:SixLabors.Fonts.Unicode.ArrayBuilder`1.Length"/>.
            </exception>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.ArrayBuilder`1.Add(`0)">
            <summary>
            Adds the given item to the array.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.ArrayBuilder`1.Add(System.Int32,System.Boolean)">
            <summary>
            Appends a given number of empty items to the array returning
            the items as a slice.
            </summary>
            <param name="length">The number of items in the slice.</param>
            <param name="clear">Whether to clear the new slice, Defaults to <see langword="true"/>.</param>
            <returns>The <see cref="T:SixLabors.Fonts.Unicode.ArraySlice`1"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.ArrayBuilder`1.Add(SixLabors.Fonts.Unicode.ReadOnlyArraySlice{`0}@)">
            <summary>
            Appends the slice to the array copying the data across.
            </summary>
            <param name="value">The array slice.</param>
            <returns>The <see cref="T:SixLabors.Fonts.Unicode.ArraySlice`1"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.ArrayBuilder`1.Clear">
            <summary>
            Clears the array.
            Allocated memory is left intact for future usage.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.ArrayBuilder`1.AsSlice">
            <summary>
            Returns the current state of the array as a slice.
            </summary>
            <returns>The <see cref="T:SixLabors.Fonts.Unicode.ArraySlice`1"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.ArrayBuilder`1.AsSlice(System.Int32)">
            <summary>
            Returns the current state of the array as a slice.
            </summary>
            <param name="length">The number of items in the slice.</param>
            <returns>The <see cref="T:SixLabors.Fonts.Unicode.ArraySlice`1"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.ArrayBuilder`1.AsSlice(System.Int32,System.Int32)">
            <summary>
            Returns the current state of the array as a slice.
            </summary>
            <param name="start">The index at which to begin the slice.</param>
            <param name="length">The number of items in the slice.</param>
            <returns>The <see cref="T:SixLabors.Fonts.Unicode.ArraySlice`1"/>.</returns>
        </member>
        <member name="T:SixLabors.Fonts.Unicode.ArraySlice`1">
            <summary>
            ArraySlice represents a contiguous region of arbitrary memory similar
            to <see cref="T:System.Memory`1"/> and <see cref="T:System.Span`1"/> though constrained
            to arrays.
            Unlike <see cref="T:System.Span`1"/>, it is not a byref-like type.
            </summary>
            <typeparam name="T">The type of item contained in the slice.</typeparam>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.ArraySlice`1.#ctor(`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Fonts.Unicode.ArraySlice`1"/> struct.
            </summary>
            <param name="data">The underlying data buffer.</param>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.ArraySlice`1.#ctor(`0[],System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Fonts.Unicode.ArraySlice`1"/> struct.
            </summary>
            <param name="data">The underlying data buffer.</param>
            <param name="start">The offset position in the underlying buffer this slice was created from.</param>
            <param name="length">The number of items in the slice.</param>
        </member>
        <member name="P:SixLabors.Fonts.Unicode.ArraySlice`1.Empty">
            <summary>
            Gets an empty <see cref="T:SixLabors.Fonts.Unicode.ArraySlice`1"/>
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.Unicode.ArraySlice`1.Start">
            <summary>
            Gets the offset position in the underlying buffer this slice was created from.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.Unicode.ArraySlice`1.Length">
            <summary>
            Gets the number of items in the slice.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.Unicode.ArraySlice`1.Span">
            <summary>
            Gets a <see cref="T:System.Span`1"/> representing this slice.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.Unicode.ArraySlice`1.Item(System.Int32)">
            <summary>
            Returns a reference to specified element of the slice.
            </summary>
            <param name="index">The index of the element to return.</param>
            <returns>The <typeparamref name="T"/>.</returns>
            <exception cref="T:System.IndexOutOfRangeException">
            Thrown when index less than 0 or index greater than or equal to <see cref="P:SixLabors.Fonts.Unicode.ArraySlice`1.Length"/>.
            </exception>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.ArraySlice`1.op_Implicit(SixLabors.Fonts.Unicode.ArraySlice{`0})~SixLabors.Fonts.Unicode.ReadOnlyArraySlice{`0}">
            <summary>
            Defines an implicit conversion of a <see cref="T:SixLabors.Fonts.Unicode.ArraySlice`1"/> to a <see cref="T:SixLabors.Fonts.Unicode.ReadOnlyArraySlice`1"/>
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.ArraySlice`1.op_Implicit(`0[])~SixLabors.Fonts.Unicode.ArraySlice{`0}">
            <summary>
            Defines an implicit conversion of an array to a <see cref="T:SixLabors.Fonts.Unicode.ArraySlice`1"/>
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.ArraySlice`1.CopyTo(SixLabors.Fonts.Unicode.ArraySlice{`0})">
            <summary>
            Copies the contents of this slice into destination span. If the source
            and destinations overlap, this method behaves as if the original values in
            a temporary location before the destination is overwritten.
            </summary>
            <param name="destination">The slice to copy items into.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the destination slice is shorter than the source Span.
            </exception>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.ArraySlice`1.Fill(`0)">
            <summary>
            Fills the contents of this slice with the given value.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.ArraySlice`1.Slice(System.Int32,System.Int32)">
            <summary>
            Forms a slice out of the given slice, beginning at 'start', of given length
            </summary>
            <param name="start">The index at which to begin this slice.</param>
            <param name="length">The desired length for the slice (exclusive).</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the specified <paramref name="start"/> or end index is not in range (&lt;0 or &gt;Length).
            </exception>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.ArraySlice`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.ArraySlice`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="P:SixLabors.Fonts.Unicode.ArraySlice`1.Enumerator.Current">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.ArraySlice`1.Enumerator.MoveNext">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.ArraySlice`1.Enumerator.System#Collections#IEnumerator#Reset">
            <inheritdoc/>
        </member>
        <member name="T:SixLabors.Fonts.Unicode.BidiAlgorithm">
            <summary>
            Implementation of Unicode Bidirection Algorithm (UAX #9)
            https://unicode.org/reports/tr9/
            </summary>
            <remarks>
            <para>
            The Bidi algorithm uses a number of memory arrays for resolved
            types, level information, bracket types, x9 removal maps and
            more...
            </para>
            <para>
            This implementation of the Bidi algorithm has been designed
            to reduce memory pressure on the GC by re-using the same
            work buffers, so instances of this class should be re-used
            as much as possible.
            </para>
            </remarks>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.BidiAlgorithm.originalTypes">
            <summary>
            The original BidiCharacterType types as provided by the caller
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.BidiAlgorithm.pairedBracketTypes">
            <summary>
            Paired bracket types as provided by caller
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.BidiAlgorithm.pairedBracketValues">
            <summary>
            Paired bracket values as provided by caller
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.BidiAlgorithm.hasBrackets">
            <summary>
            Try if the incoming data is known to contain brackets
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.BidiAlgorithm.hasEmbeddings">
            <summary>
            True if the incoming data is known to contain embedding runs
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.BidiAlgorithm.hasIsolates">
            <summary>
            True if the incoming data is known to contain isolating runs
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.BidiAlgorithm.isolatePairs">
            <summary>
            Two directional mapping of isolate start/end pairs
            </summary>
            <remarks>
            The forward mapping maps the start index to the end index.
            The reverse mapping maps the end index to the start index.
            </remarks>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.BidiAlgorithm.workingTypes">
            <summary>
            The working BidiCharacterType types
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.BidiAlgorithm.workingTypesBuffer">
            <summary>
            The buffer underlying _workingTypes
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.BidiAlgorithm.resolvedLevelsBuffer">
            <summary>
            The buffer underlying resolvedLevels
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.BidiAlgorithm.paragraphEmbeddingLevel">
            <summary>
            The resolve paragraph embedding level
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.BidiAlgorithm.statusStack">
            <summary>
            The status stack used during resolution of explicit
            embedding and isolating runs
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.BidiAlgorithm.x9Map">
            <summary>
            Mapping used to virtually remove characters for rule X9
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.BidiAlgorithm.levelRuns">
            <summary>
            Re-usable list of level runs
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.BidiAlgorithm.isolatedRunMapping">
            <summary>
            Mapping for the current isolating sequence, built
            by joining level runs from the x9 map.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.BidiAlgorithm.pendingIsolateOpenings">
            <summary>
            A stack of pending isolate openings used by FindIsolatePairs()
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.BidiAlgorithm.runLevel">
            <summary>
            The level of the isolating run currently being processed
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.BidiAlgorithm.runDirection">
            <summary>
            The direction of the isolating run currently being processed
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.BidiAlgorithm.runLength">
            <summary>
            The length of the isolating run currently being processed
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.BidiAlgorithm.runResolvedTypes">
            <summary>
            A mapped slice of the resolved types for the isolating run currently
            being processed
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.BidiAlgorithm.runOriginalTypes">
            <summary>
            A mapped slice of the original types for the isolating run currently
            being processed
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.BidiAlgorithm.runLevels">
            <summary>
            A mapped slice of the run levels for the isolating run currently
            being processed
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.BidiAlgorithm.runBidiPairedBracketTypes">
            <summary>
            A mapped slice of the paired bracket types of the isolating
            run currently being processed
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.BidiAlgorithm.runPairedBracketValues">
            <summary>
            A mapped slice of the paired bracket values of the isolating
            run currently being processed
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.BidiAlgorithm.MaxPairedBracketDepth">
            <summary>
            Maximum pairing depth for paired brackets
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.BidiAlgorithm.pendingOpeningBrackets">
            <summary>
            Reusable list of pending opening brackets used by the
            LocatePairedBrackets method
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.BidiAlgorithm.pairedBrackets">
            <summary>
            Resolved list of paired brackets
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.BidiAlgorithm.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Fonts.Unicode.BidiAlgorithm"/> class.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.Unicode.BidiAlgorithm.Instance">
            <summary>
            Gets a per-thread instance that can be re-used as often
            as necessary.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.Unicode.BidiAlgorithm.ResolvedLevels">
            <summary>
            Gets the resolved levels.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.Unicode.BidiAlgorithm.ResolvedParagraphEmbeddingLevel">
            <summary>
            Gets the resolved paragraph embedding level
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.BidiAlgorithm.Process(SixLabors.Fonts.Unicode.BidiData)">
            <summary>
            Process data from a BidiData instance
            </summary>
            <param name="data">The Bidi Unicode data.</param>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.BidiAlgorithm.Process(SixLabors.Fonts.Unicode.ReadOnlyArraySlice{SixLabors.Fonts.Unicode.BidiCharacterType},SixLabors.Fonts.Unicode.ReadOnlyArraySlice{SixLabors.Fonts.Unicode.BidiPairedBracketType},SixLabors.Fonts.Unicode.ReadOnlyArraySlice{System.Int32},System.SByte,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{SixLabors.Fonts.Unicode.ArraySlice{System.SByte}})">
            <summary>
            Processes Bidi Data
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.BidiAlgorithm.ResolveEmbeddingLevel(SixLabors.Fonts.Unicode.ReadOnlyArraySlice{SixLabors.Fonts.Unicode.BidiCharacterType})">
            <summary>
            Resolve the paragraph embedding level if not explicitly passed
            by the caller. Also used by rule X5c for FSI isolating sequences.
            </summary>
            <param name="data">The data to be evaluated</param>
            <returns>The resolved embedding level</returns>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.BidiAlgorithm.FindIsolatePairs">
            <summary>
            Build a list of matching isolates for a directionality slice
            Implements BD9
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.BidiAlgorithm.ResolveExplicitEmbeddingLevels">
            <summary>
            Resolve the explicit embedding levels from the original
            data.  Implements rules X1 to X8.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.BidiAlgorithm.BuildX9RemovalMap">
            <summary>
            Build a map to the original data positions that excludes all
            the types defined by rule X9
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.BidiAlgorithm.MapX9(System.Int32)">
            <summary>
            Find the original character index for an entry in the X9 map
            </summary>
            <param name="index">Index in the x9 removal map</param>
            <returns>Index to the original data</returns>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.BidiAlgorithm.AddLevelRun(System.Int32,System.Int32,System.Int32)">
            <summary>
            Add a new level run
            </summary>
            <remarks>
            This method resolves the sos and eos values for the run
            and adds the run to the list
            /// </remarks>
            <param name="start">The index of the start of the run (in x9 removed units)</param>
            <param name="length">The length of the run (in x9 removed units)</param>
            <param name="level">The level of the run</param>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.BidiAlgorithm.FindLevelRuns">
            <summary>
            Find all runs of the same level, populating the _levelRuns
            collection
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.BidiAlgorithm.FindRunForIndex(System.Int32)">
            <summary>
            Given a character index, find the level run that starts at that position
            </summary>
            <param name="index">The index into the original (unmapped) data</param>
            <returns>The index of the run that starts at that index</returns>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.BidiAlgorithm.ProcessIsolatedRunSequences">
            <summary>
            Determine and the process all isolated run sequences
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.BidiAlgorithm.ProcessIsolatedRunSequence(SixLabors.Fonts.Unicode.BidiCharacterType,SixLabors.Fonts.Unicode.BidiCharacterType,System.Int32)">
            <summary>
            Process a single isolated run sequence, where the character sequence
            mapping is currently held in _isolatedRunMapping.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.BidiAlgorithm.LocatePairedBrackets">
            <summary>
            Locate all pair brackets in the current isolating run
            </summary>
            <returns>A sorted list of BracketPairs</returns>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.BidiAlgorithm.InspectPairedBracket(SixLabors.Fonts.Unicode.BidiAlgorithm.BracketPair@)">
            <summary>
            Inspect a paired bracket set and determine its strong direction
            </summary>
            <param name="pb">The paired bracket to be inspected</param>
            <returns>The direction of the bracket set content</returns>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.BidiAlgorithm.InspectBeforePairedBracket(SixLabors.Fonts.Unicode.BidiAlgorithm.BracketPair@,SixLabors.Fonts.Unicode.BidiCharacterType)">
            <summary>
            Look for a strong type before a paired bracket
            </summary>
            <param name="pb">The paired bracket set to be inspected</param>
            <param name="sos">The sos in case nothing found before the bracket</param>
            <returns>The strong direction before the brackets</returns>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.BidiAlgorithm.SetPairedBracketDirection(SixLabors.Fonts.Unicode.BidiAlgorithm.BracketPair@,SixLabors.Fonts.Unicode.BidiCharacterType)">
            <summary>
            Sets the direction of a bracket pair, including setting the direction of
            NSM's inside the brackets and following.
            </summary>
            <param name="pb">The paired brackets</param>
            <param name="dir">The resolved direction for the bracket pair</param>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.BidiAlgorithm.ResetWhitespaceLevels">
            <summary>
            Resets whitespace levels. Implements rule L1
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.BidiAlgorithm.AssignLevelsToCodePointsRemovedByX9">
            <summary>
            Assign levels to any characters that would be have been
            removed by rule X9.  The idea is to keep level runs together
            that would otherwise be broken by an interfering isolate/embedding
            control character.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.BidiAlgorithm.IsWhitespace(SixLabors.Fonts.Unicode.BidiCharacterType)">
            <summary>
            Check if a directionality type represents whitespace
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.BidiAlgorithm.DirectionFromLevel(System.Int32)">
            <summary>
            Convert a level to a direction where odd is RTL and
            even is LTR
            </summary>
            <param name="level">The level to convert</param>
            <returns>A directionality</returns>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.BidiAlgorithm.IsRemovedByX9(SixLabors.Fonts.Unicode.BidiCharacterType)">
            <summary>
            Helper to check if a directionality is removed by rule X9
            </summary>
            <param name="biditype">The bidi type to check</param>
            <returns>True if rule X9 would remove this character; otherwise false</returns>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.BidiAlgorithm.IsNeutralType(SixLabors.Fonts.Unicode.BidiCharacterType)">
            <summary>
            Check if a a directionality is neutral for rules N1 and N2
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.BidiAlgorithm.GetStrongTypeN0(SixLabors.Fonts.Unicode.BidiCharacterType)">
            <summary>
            Maps a direction to a strong type for rule N0
            </summary>
            <param name="dir">The direction to map</param>
            <returns>A strong direction - R, L or ON</returns>
        </member>
        <member name="T:SixLabors.Fonts.Unicode.BidiAlgorithm.BracketPair">
            <summary>
            Hold the start and end index of a pair of brackets
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.BidiAlgorithm.BracketPair.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Fonts.Unicode.BidiAlgorithm.BracketPair"/> struct.
            </summary>
            <param name="openingIndex">Index of the opening bracket</param>
            <param name="closingIndex">Index of the closing bracket</param>
        </member>
        <member name="P:SixLabors.Fonts.Unicode.BidiAlgorithm.BracketPair.OpeningIndex">
            <summary>
            Gets the index of the opening bracket
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.Unicode.BidiAlgorithm.BracketPair.ClosingIndex">
            <summary>
            Gets the index of the closing bracket
            </summary>
        </member>
        <member name="T:SixLabors.Fonts.Unicode.BidiAlgorithm.Status">
            <summary>
            Status stack entry used while resolving explicit
            embedding levels
            </summary>
        </member>
        <member name="T:SixLabors.Fonts.Unicode.BidiAlgorithm.LevelRun">
            <summary>
            Provides information about a level run - a continuous
            sequence of equal levels.
            </summary>
        </member>
        <member name="T:SixLabors.Fonts.Unicode.BidiCharacterType">
            <summary>
            Provides enumeration for the Unicode Bidirectional character types.
            <see href="https://unicode.org/reports/tr9/#Table Bidirectional Character Types"/>.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.BidiCharacterType.LeftToRight">
            <summary>
            Left-to-right.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.BidiCharacterType.RightToLeft">
            <summary>
            Right-to-left.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.BidiCharacterType.ArabicLetter">
            <summary>
            Arabic Letter.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.BidiCharacterType.EuropeanNumber">
            <summary>
            European Number
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.BidiCharacterType.EuropeanSeparator">
            <summary>
            European Separator
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.BidiCharacterType.EuropeanTerminator">
            <summary>
            European Terminator
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.BidiCharacterType.ArabicNumber">
            <summary>
            Arabic Number.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.BidiCharacterType.CommonSeparator">
            <summary>
            Common Separator
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.BidiCharacterType.NonspacingMark">
            <summary>
            Nonspacing Mark.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.BidiCharacterType.BoundaryNeutral">
            <summary>
            Boundary Neutral.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.BidiCharacterType.ParagraphSeparator">
            <summary>
            Paragraph Separator
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.BidiCharacterType.SegmentSeparator">
            <summary>
            Segment Separator
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.BidiCharacterType.Whitespace">
            <summary>
            White Space.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.BidiCharacterType.OtherNeutral">
            <summary>
            Other Neutral.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.BidiCharacterType.LeftToRightEmbedding">
            <summary>
            Left-to-right Embedding.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.BidiCharacterType.LeftToRightOverride">
            <summary>
            Left-to-right Override
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.BidiCharacterType.RightToLeftEmbedding">
            <summary>
            Right-to-left Embedding
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.BidiCharacterType.RightToLeftOverride">
            <summary>
            Right-to-left Override.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.BidiCharacterType.PopDirectionalFormat">
            <summary>
            Pop Directional Format
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.BidiCharacterType.LeftToRightIsolate">
            <summary>
            Left-to-right Isolate
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.BidiCharacterType.RightToLeftIsolate">
            <summary>
            Right-to-left Isolate.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.BidiCharacterType.FirstStrongIsolate">
            <summary>
            First Strong Isolate
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.BidiCharacterType.PopDirectionalIsolate">
            <summary>
            Pop Directional Isolate.
            </summary>
        </member>
        <member name="T:SixLabors.Fonts.Unicode.BidiClass">
            <summary>
            Represents the Unicode Bidi value of a given <see cref="T:SixLabors.Fonts.Unicode.CodePoint"/>.
            <see href="https://unicode.org/reports/tr9/#Table"/>
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.BidiClass.#ctor(SixLabors.Fonts.Unicode.CodePoint)">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Fonts.Unicode.BidiClass"/> struct.
            </summary>
            <param name="codePoint">The codepoint.</param>
        </member>
        <member name="P:SixLabors.Fonts.Unicode.BidiClass.CharacterType">
            <summary>
            Gets the Unicode Bidirectional character type.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.Unicode.BidiClass.PairedBracketType">
            <summary>
            Gets the Unicode Bidirectional paired bracket type.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.BidiClass.TryGetPairedBracket(SixLabors.Fonts.Unicode.CodePoint@)">
            <summary>
            Gets the codepoint representing the bracket pairing for this instance.
            </summary>
            <param name="codePoint">
            When this method returns, contains the codepoint representing the bracket pairing for this instance;
            otherwise, the default value for the type of the <paramref name="codePoint"/> parameter.
            This parameter is passed uninitialized.
            .</param>
            <returns><see langword="true"/> if this instance has a bracket pairing; otherwise, <see langword="false"/></returns>
        </member>
        <member name="T:SixLabors.Fonts.Unicode.BidiData">
            <summary>
            Represents a unicode string and all associated attributes
            for each character required for the Bidi algorithm
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.Unicode.BidiData.Length">
            <summary>
            Gets the length of the data held by the BidiData
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.Unicode.BidiData.Types">
            <summary>
            Gets the bidi character type of each code point
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.Unicode.BidiData.PairedBracketTypes">
            <summary>
            Gets the paired bracket type for each code point
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.Unicode.BidiData.PairedBracketValues">
            <summary>
            Gets the paired bracket value for code point
            </summary>
            <remarks>
            The paired bracket values are the code points
            of each character where the opening code point
            is replaced with the closing code point for easier
            matching.  Also, bracket code points are mapped
            to their canonical equivalents
            </remarks>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.BidiData.Init(System.ReadOnlySpan{System.Char},System.SByte)">
            <summary>
            Initialize with a text value.
            </summary>
            <param name="text">The text to process.</param>
            <param name="paragraphEmbeddingLevel">The paragraph embedding level</param>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.BidiData.SaveTypes">
            <summary>
            Save the Types and PairedBracketTypes of this bididata
            </summary>
            <remarks>
            This is used when processing embedded style runs with
            BidiCharacterType overrides.  TextLayout saves the data,
            overrides the style runs to neutral, processes the bidi
            data for the entire paragraph and then restores this data
            before processing the embedded runs.
            </remarks>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.BidiData.RestoreTypes">
            <summary>
            Restore the data saved by SaveTypes
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.BidiData.GetTempLevelBuffer(System.Int32)">
            <summary>
            Gets a temporary level buffer. Used by TextLayout when
            resolving style runs with different BidiCharacterType.
            </summary>
            <param name="length">Length of the required ExpandableBuffer</param>
            <returns>An uninitialized level ExpandableBuffer</returns>
        </member>
        <member name="T:SixLabors.Fonts.Unicode.BidiDictionary`2">
            <summary>
            A simple bi-directional dictionary.
            </summary>
            <typeparam name="T1">Key type</typeparam>
            <typeparam name="T2">Value type</typeparam>
        </member>
        <member name="T:SixLabors.Fonts.Unicode.BidiPairedBracketType">
            <summary>
            Provides enumeration for classifying characters into opening and closing paired brackets
            for the purposes of the Unicode Bidirectional Algorithm.
            <see href="https://www.unicode.org/Public/UCD/latest/ucd/BidiBrackets.txt"/>.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.BidiPairedBracketType.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.BidiPairedBracketType.Open">
            <summary>
            Open.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.BidiPairedBracketType.Close">
            <summary>
            Close.
            </summary>
        </member>
        <member name="T:SixLabors.Fonts.Unicode.CodePoint">
            <summary>
            Represents a Unicode value ([ U+0000..U+10FFFF ], inclusive).
            </summary>
            <remarks>
            This type's constructors and conversion operators validate the input, so consumers can call the APIs
            assuming that the underlying <see cref="T:SixLabors.Fonts.Unicode.CodePoint"/> instance is well-formed.
            </remarks>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.CodePoint.#ctor(System.Char)">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Fonts.Unicode.CodePoint"/> struct.
            </summary>
            <param name="value">The char representing the UTF-16 code unit</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If <paramref name="value"/> represents a UTF-16 surrogate code point
            U+D800..U+DFFF, inclusive.
            </exception>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.CodePoint.#ctor(System.Char,System.Char)">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Fonts.Unicode.CodePoint"/> struct.
            </summary>
            <param name="highSurrogate">A char representing a UTF-16 high surrogate code unit.</param>
            <param name="lowSurrogate">A char representing a UTF-16 low surrogate code unit.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If <paramref name="highSurrogate"/> does not represent a UTF-16 high surrogate code unit
            or <paramref name="lowSurrogate"/> does not represent a UTF-16 low surrogate code unit.
            </exception>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.CodePoint.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Fonts.Unicode.CodePoint"/> struct.
            </summary>
            <param name="value">The value to create the codepoint.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If <paramref name="value"/> does not represent a value Unicode scalar value.
            </exception>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.CodePoint.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Fonts.Unicode.CodePoint"/> struct.
            </summary>
            <param name="value">The value to create the codepoint.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If <paramref name="value"/> does not represent a value Unicode scalar value.
            </exception>
        </member>
        <member name="P:SixLabors.Fonts.Unicode.CodePoint.IsAscii">
            <summary>
            Gets a value indicating whether this value is ASCII ([ U+0000..U+007F ])
            and therefore representable by a single UTF-8 code unit.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.Unicode.CodePoint.IsBmp">
            <summary>
            Gets a value indicating whether this value is within the BMP ([ U+0000..U+FFFF ])
            and therefore representable by a single UTF-16 code unit.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.Unicode.CodePoint.Plane">
            <summary>
            Gets the Unicode plane (0 to 16, inclusive) which contains this scalar.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.Unicode.CodePoint.Value">
            <summary>
            Gets the Unicode value as an integer.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.Unicode.CodePoint.Utf16SequenceLength">
            <summary>
            Gets the length in code units (<see cref="T:System.Char"/>) of the
            UTF-16 sequence required to represent this scalar value.
            </summary>
            <remarks>
            The return value will be 1 or 2.
            </remarks>
        </member>
        <member name="P:SixLabors.Fonts.Unicode.CodePoint.Utf8SequenceLength">
            <summary>
            Gets the length in code units of the
            UTF-8 sequence required to represent this scalar value.
            </summary>
            <remarks>
            The return value will be 1 through 4, inclusive.
            </remarks>
        </member>
        <member name="P:SixLabors.Fonts.Unicode.CodePoint.ReplacementChar">
            <summary>
            Gets a <see cref="T:SixLabors.Fonts.Unicode.CodePoint"/> instance that represents the Unicode replacement character U+FFFD.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.CodePoint.IsValid(System.Int32)">
            <summary>
            Returns <see langword="true"/> if <paramref name="value"/> is a valid Unicode code
            point, i.e., is in [ U+0000..U+10FFFF ], inclusive.
            </summary>
            <param name="value">The value to evaluate.</param>
            <returns><see langword="true"/> if <paramref name="value"/> represents a valid codepoint; otherwise, <see langword="false"/></returns>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.CodePoint.IsValid(System.UInt32)">
            <summary>
            Returns <see langword="true"/> if <paramref name="value"/> is a valid Unicode code
            point, i.e., is in [ U+0000..U+10FFFF ], inclusive.
            </summary>
            <param name="value">The value to evaluate.</param>
            <returns><see langword="true"/> if <paramref name="value"/> represents a valid codepoint; otherwise, <see langword="false"/></returns>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.CodePoint.IsWhiteSpace(SixLabors.Fonts.Unicode.CodePoint)">
            <summary>
            Gets a value indicating whether the given codepoint is white space.
            </summary>
            <param name="codePoint">The codepoint to evaluate.</param>
            <returns><see langword="true"/> if <paramref name="codePoint"/> is a whitespace character; otherwise, <see langword="false"/></returns>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.CodePoint.IsNonBreakingSpace(SixLabors.Fonts.Unicode.CodePoint)">
            <summary>
            Gets a value indicating whether the given codepoint is a non-breaking space.
            </summary>
            <param name="codePoint">The codepoint to evaluate.</param>
            <returns><see langword="true"/> if <paramref name="codePoint"/> is a non-breaking space character; otherwise, <see langword="false"/></returns>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.CodePoint.IsZeroWidthNonJoiner(SixLabors.Fonts.Unicode.CodePoint)">
            <summary>
            Gets a value indicating whether the given codepoint is a zero-width-non-joiner.
            </summary>
            <param name="codePoint">The codepoint to evaluate.</param>
            <returns><see langword="true"/> if <paramref name="codePoint"/> is a zero-width-non-joiner character; otherwise, <see langword="false"/></returns>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.CodePoint.IsZeroWidthJoiner(SixLabors.Fonts.Unicode.CodePoint)">
            <summary>
            Gets a value indicating whether the given codepoint is a zero-width-joiner.
            </summary>
            <param name="codePoint">The codepoint to evaluate.</param>
            <returns><see langword="true"/> if <paramref name="codePoint"/> is a zero-width-joiner character; otherwise, <see langword="false"/></returns>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.CodePoint.IsVariationSelector(SixLabors.Fonts.Unicode.CodePoint)">
            <summary>
            Gets a value indicating whether the given codepoint is a variation selector.
            <see href="https://en.wikipedia.org/wiki/Variation_Selectors_%28Unicode_block%29"/>
            </summary>
            <param name="codePoint">The codepoint to evaluate.</param>
            <returns><see langword="true"/> if <paramref name="codePoint"/> is a variation selector character; otherwise, <see langword="false"/></returns>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.CodePoint.IsControl(SixLabors.Fonts.Unicode.CodePoint)">
            <summary>
            Gets a value indicating whether the given codepoint is a control character.
            </summary>
            <param name="codePoint">The codepoint to evaluate.</param>
            <returns><see langword="true"/> if <paramref name="codePoint"/> is a control character; otherwise, <see langword="false"/></returns>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.CodePoint.IsDigit(SixLabors.Fonts.Unicode.CodePoint)">
            <summary>
            Returns a value that indicates whether the specified codepoint is categorized as a decimal digit.
            </summary>
            <param name="codePoint">The codepoint to evaluate.</param>
            <returns><see langword="true"/> if <paramref name="codePoint"/> is a decimal digit; otherwise, <see langword="false"/></returns>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.CodePoint.IsLetter(SixLabors.Fonts.Unicode.CodePoint)">
            <summary>
            Returns a value that indicates whether the specified codepoint is categorized as a letter.
            </summary>
            <param name="codePoint">The codepoint to evaluate.</param>
            <returns><see langword="true"/> if <paramref name="codePoint"/> is a letter; otherwise, <see langword="false"/></returns>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.CodePoint.IsLetterOrDigit(SixLabors.Fonts.Unicode.CodePoint)">
            <summary>
            Returns a value that indicates whether the specified codepoint is categorized as a letter or decimal digit.
            </summary>
            <param name="codePoint">The codepoint to evaluate.</param>
            <returns><see langword="true"/> if <paramref name="codePoint"/> is a letter or decimal digit; otherwise, <see langword="false"/></returns>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.CodePoint.IsLower(SixLabors.Fonts.Unicode.CodePoint)">
            <summary>
            Returns a value that indicates whether the specified codepoint is categorized as a lowercase letter.
            </summary>
            <param name="codePoint">The codepoint to evaluate.</param>
            <returns><see langword="true"/> if <paramref name="codePoint"/> is a lowercase letter; otherwise, <see langword="false"/></returns>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.CodePoint.IsNumber(SixLabors.Fonts.Unicode.CodePoint)">
            <summary>
            Returns a value that indicates whether the specified codepoint is categorized as a number.
            </summary>
            <param name="codePoint">The codepoint to evaluate.</param>
            <returns><see langword="true"/> if <paramref name="codePoint"/> is a number; otherwise, <see langword="false"/></returns>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.CodePoint.IsPunctuation(SixLabors.Fonts.Unicode.CodePoint)">
            <summary>
            Returns a value that indicates whether the specified codepoint is categorized as punctuation.
            </summary>
            <param name="codePoint">The codepoint to evaluate.</param>
            <returns><see langword="true"/> if <paramref name="codePoint"/> is punctuation; otherwise, <see langword="false"/></returns>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.CodePoint.IsSeparator(SixLabors.Fonts.Unicode.CodePoint)">
            <summary>
            Returns a value that indicates whether the specified codepoint is categorized as a separator.
            </summary>
            <param name="codePoint">The codepoint to evaluate.</param>
            <returns><see langword="true"/> if <paramref name="codePoint"/> is a separator; otherwise, <see langword="false"/></returns>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.CodePoint.IsSymbol(SixLabors.Fonts.Unicode.CodePoint)">
            <summary>
            Returns a value that indicates whether the specified codepoint is categorized as a symbol.
            </summary>
            <param name="codePoint">The codepoint to evaluate.</param>
            <returns><see langword="true"/> if <paramref name="codePoint"/> is a symbol; otherwise, <see langword="false"/></returns>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.CodePoint.IsMark(SixLabors.Fonts.Unicode.CodePoint)">
            <summary>
            Returns a value that indicates whether the specified codepoint is categorized as a mark.
            </summary>
            <param name="codePoint">The codepoint to evaluate.</param>
            <returns><see langword="true"/> if <paramref name="codePoint"/> is a symbol; otherwise, <see langword="false"/></returns>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.CodePoint.IsUpper(SixLabors.Fonts.Unicode.CodePoint)">
            <summary>
            Returns a value that indicates whether the specified codepoint is categorized as an uppercase letter.
            </summary>
            <param name="codePoint">The codepoint to evaluate.</param>
            <returns><see langword="true"/> if <paramref name="codePoint"/> is a uppercase letter; otherwise, <see langword="false"/></returns>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.CodePoint.IsTabulation(SixLabors.Fonts.Unicode.CodePoint)">
            <summary>
            Gets a value indicating whether the given codepoint is a tabulation indicator.
            </summary>
            <param name="codePoint">The codepoint to evaluate.</param>
            <returns><see langword="true"/> if <paramref name="codePoint"/> is a tabulation indicator; otherwise, <see langword="false"/></returns>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.CodePoint.IsNewLine(SixLabors.Fonts.Unicode.CodePoint)">
            <summary>
            Gets a value indicating whether the given codepoint is a new line indicator.
            </summary>
            <param name="codePoint">The codepoint to evaluate.</param>
            <returns><see langword="true"/> if <paramref name="codePoint"/> is a new line indicator; otherwise, <see langword="false"/></returns>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.CodePoint.GetCodePointCount(System.ReadOnlySpan{System.Char})">
            <summary>
            Returns the number of codepoints in a given string buffer.
            </summary>
            <param name="source">The source buffer to parse.</param>
            <returns>The <see cref="T:System.Int32"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.CodePoint.GetCanonicalType(SixLabors.Fonts.Unicode.CodePoint)">
            <summary>
            Gets the canonical representation of a given codepoint.
            <see href="http://www.unicode.org/L2/L2013/13123-norm-and-bpa.pdf"/>
            </summary>
            <param name="codePoint">The code point to be mapped.</param>
            <returns>The mapped canonical code point, or the passed <paramref name="codePoint"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.CodePoint.GetBidiClass(SixLabors.Fonts.Unicode.CodePoint)">
            <summary>
            Gets the <see cref="T:SixLabors.Fonts.Unicode.BidiClass"/> for the given codepoint.
            </summary>
            <param name="codePoint">The codepoint to evaluate.</param>
            <returns>The <see cref="T:SixLabors.Fonts.Unicode.BidiClass"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.CodePoint.TryGetBidiMirror(SixLabors.Fonts.Unicode.CodePoint,SixLabors.Fonts.Unicode.CodePoint@)">
            <summary>
            Gets the codepoint representing the bidi mirror for this instance.
            <see href="http://www.unicode.org/reports/tr44/#Bidi_Mirrored"/>
            </summary>
            <param name="codePoint">The code point to be mapped.</param>
            <param name="mirror">
            When this method returns, contains the codepoint representing the bidi mirror for this instance;
            otherwise, the default value for the type of the <paramref name="codePoint"/> parameter.
            This parameter is passed uninitialized.
            .</param>
            <returns><see langword="true"/> if this instance has a mirror; otherwise, <see langword="false"/></returns>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.CodePoint.TryGetVerticalMirror(SixLabors.Fonts.Unicode.CodePoint,SixLabors.Fonts.Unicode.CodePoint@)">
            <summary>
            Gets the codepoint representing the vertical mirror for this instance.
            <see href="https://www.unicode.org/reports/tr50/#vertical_alternates"/>
            </summary>
            <param name="codePoint">The code point to be mapped.</param>
            <param name="mirror">
            When this method returns, contains the codepoint representing the vertical mirror for this instance;
            otherwise, the default value for the type of the <paramref name="codePoint"/> parameter.
            This parameter is passed uninitialized.
            .</param>
            <returns><see langword="true"/> if this instance has a mirror; otherwise, <see langword="false"/></returns>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.CodePoint.GetLineBreakClass(SixLabors.Fonts.Unicode.CodePoint)">
            <summary>
            Gets the <see cref="T:SixLabors.Fonts.Unicode.LineBreakClass"/> for the given codepoint.
            </summary>
            <param name="codePoint">The codepoint to evaluate.</param>
            <returns>The <see cref="T:SixLabors.Fonts.Unicode.LineBreakClass"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.CodePoint.GetGraphemeClusterClass(SixLabors.Fonts.Unicode.CodePoint)">
            <summary>
            Gets the <see cref="T:SixLabors.Fonts.Unicode.GraphemeClusterClass"/> for the given codepoint.
            </summary>
            <param name="codePoint">The codepoint to evaluate.</param>
            <returns>The <see cref="T:SixLabors.Fonts.Unicode.GraphemeClusterClass"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.CodePoint.GetJoiningClass(SixLabors.Fonts.Unicode.CodePoint)">
            <summary>
            Gets the <see cref="T:SixLabors.Fonts.Unicode.JoiningClass"/> for the given codepoint.
            </summary>
            <param name="codePoint">The codepoint to evaluate.</param>
            <returns>The <see cref="T:SixLabors.Fonts.Unicode.BidiClass"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.CodePoint.GetScriptClass(SixLabors.Fonts.Unicode.CodePoint)">
            <summary>
            Gets the <see cref="T:SixLabors.Fonts.Unicode.ScriptClass"/> for the given codepoint.
            </summary>
            <param name="codePoint">The codepoint to evaluate.</param>
            <returns>The <see cref="T:SixLabors.Fonts.Unicode.ScriptClass"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.CodePoint.GetGeneralCategory(SixLabors.Fonts.Unicode.CodePoint)">
            <summary>
            Gets the <see cref="T:System.Globalization.UnicodeCategory"/> for the given codepoint.
            </summary>
            <param name="codePoint">The codepoint to evaluate.</param>
            <returns>The <see cref="T:System.Globalization.UnicodeCategory"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.CodePoint.ReadAt(System.String,System.Int32,System.Int32@)">
            <summary>
            Reads the <see cref="T:SixLabors.Fonts.Unicode.CodePoint"/> at specified position.
            </summary>
            <param name="text">The text to read from.</param>
            <param name="index">The index to read at.</param>
            <param name="charsConsumed">The count of chars consumed reading the buffer.</param>
            <returns>The <see cref="T:SixLabors.Fonts.Unicode.CodePoint"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.CodePoint.DecodeFromUtf16At(System.ReadOnlySpan{System.Char},System.Int32)">
            <summary>
            Decodes the <see cref="T:SixLabors.Fonts.Unicode.CodePoint"/> from the provided UTF-16 source buffer at the specified position.
            </summary>
            <param name="source">The buffer to read from.</param>
            <param name="index">The index to read at.</param>
            <returns>The <see cref="T:SixLabors.Fonts.Unicode.CodePoint"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.CodePoint.DecodeFromUtf16At(System.ReadOnlySpan{System.Char},System.Int32,System.Int32@)">
            <summary>
            Decodes the <see cref="T:SixLabors.Fonts.Unicode.CodePoint"/> from the provided UTF-16 source buffer at the specified position.
            </summary>
            <param name="source">The buffer to read from.</param>
            <param name="index">The index to read at.</param>
            <param name="charsConsumed">The count of chars consumed reading the buffer.</param>
            <returns>The <see cref="T:SixLabors.Fonts.Unicode.CodePoint"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.CodePoint.System#IComparable#CompareTo(System.Object)">
            <inheritdoc cref="M:System.IComparable.CompareTo(System.Object)" />
        </member>
        <member name="M:SixLabors.Fonts.Unicode.CodePoint.CompareTo(SixLabors.Fonts.Unicode.CodePoint)">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.CodePoint.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.CodePoint.Equals(SixLabors.Fonts.Unicode.CodePoint)">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.CodePoint.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.CodePoint.ToString">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.CodePoint.ToDebuggerDisplay">
            <summary>
            Returns this instance displayed as &quot;&apos;&lt;char&gt;&apos; (U+XXXX)&quot;; e.g., &quot;&apos;e&apos; (U+0065)&quot;
            </summary>
            <returns>The <see cref="T:System.String"/>.</returns>
        </member>
        <member name="T:SixLabors.Fonts.Unicode.GraphemeClusterClass">
            <summary>
            Unicode Grapheme Cluster classes.
            <see href="https://www.unicode.org/reports/tr29/#Grapheme_Cluster_Break_Property_Values"/>
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.GraphemeClusterClass.Any">
            <summary>
            This is not a property value; it is used in the rules to represent any code point.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.GraphemeClusterClass.CarriageReturn">
            <summary>
            U+000D CARRIAGE RETURN (CR)
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.GraphemeClusterClass.LineFeed">
            <summary>
            U+000A LINE FEED (LF)
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.GraphemeClusterClass.Control">
            <summary>
            General_Category = Line_Separator, or<br/>
            General_Category = Paragraph_Separator, or<br/>
            General_Category = Control, or<br/>
            General_Category = Unassigned and Default_Ignorable_Code_Point, or<br/>
            General_Category = Format<br/>
            and not U+000D CARRIAGE RETURN<br/>
            and not U+000A LINE FEED<br/>
            and not U+200C ZERO WIDTH NON-JOINER (ZWNJ)<br/>
            and not U+200D ZERO WIDTH JOINER (ZWJ)<br/>
            and not Prepended_Concatenation_Mark = Yes
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.GraphemeClusterClass.Extend">
            <summary>
            Grapheme_Extend = Yes, or<br/>
            Emoji_Modifier = Yes<br/>
            This includes:<br/>
            General_Category = Nonspacing_Mark<br/>
            General_Category = Enclosing_Mark<br/>
            U+200C ZERO WIDTH NON-JOINER<br/>
            plus a few General_Category = Spacing_Mark needed for canonical equivalence.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.GraphemeClusterClass.RegionalIndicator">
            <summary>
            Regional_Indicator = Yes<br/>
            This consists of the range:<br/>
            U+1F1E6 REGIONAL INDICATOR SYMBOL LETTER A
            ..U+1F1FF REGIONAL INDICATOR SYMBOL LETTER Z
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.GraphemeClusterClass.Prepend">
            <summary>
            Indic_Syllabic_Category = Consonant_Preceding_Repha, or<br/>
            Indic_Syllabic_Category = Consonant_Prefixed, or<br/>
            Prepended_Concatenation_Mark = Yes
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.GraphemeClusterClass.SpacingMark">
            <summary>
            Grapheme_Cluster_Break ≠ Extend, and<br/>
            General_Category = Spacing_Mark, or<br/>
            any of the following (which have General_Category = Other_Letter):<br/>
            U+0E33 ( ำ ) THAI CHARACTER SARA AM<br/>
            U+0EB3 ( ຳ ) LAO VOWEL SIGN AM
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.GraphemeClusterClass.HangulLead">
            <summary>
            Hangul_Syllable_Type = L, such as:<br/>
            U+1100 ( ᄀ ) HANGUL CHOSEONG KIYEOK<br/>
            U+115F ( ᅟ ) HANGUL CHOSEONG FILLER<br/>
            U+A960 ( ꥠ ) HANGUL CHOSEONG TIKEUT-MIEUM<br/>
            U+A97C ( ꥼ ) HANGUL CHOSEONG SSANGYEORINHIEUH
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.GraphemeClusterClass.HangulVowel">
            <summary>
            Hangul_Syllable_Type=V, such as:<br/>
            U+1160 ( ᅠ ) HANGUL JUNGSEONG FILLER<br/>
            U+11A2 ( ᆢ ) HANGUL JUNGSEONG SSANGARAEA<br/>
            U+D7B0 ( ힰ ) HANGUL JUNGSEONG O-YEO<br/>
            U+D7C6 ( ퟆ ) HANGUL JUNGSEONG ARAEA-E
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.GraphemeClusterClass.HangulTail">
            <summary>
            Hangul_Syllable_Type = T, such as:<br/>
            U+11A8 ( ᆨ ) HANGUL JONGSEONG KIYEOK<br/>
            U+11F9 ( ᇹ ) HANGUL JONGSEONG YEORINHIEUH<br/>
            U+D7CB ( ퟋ ) HANGUL JONGSEONG NIEUN-RIEUL<br/>
            U+D7FB ( ퟻ ) HANGUL JONGSEONG PHIEUPH-THIEUTH
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.GraphemeClusterClass.HangulLeadVowel">
            <summary>
            Hangul_Syllable_Type=LV, that is:<br/>
            U+AC00 ( 가 ) HANGUL SYLLABLE GA<br/>
            U+AC1C ( 개 ) HANGUL SYLLABLE GAE<br/>
            U+AC38 ( 갸 ) HANGUL SYLLABLE GYA
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.GraphemeClusterClass.HangulLeadVowelTail">
            <summary>
            Hangul_Syllable_Type=LVT, that is:<br/>
            U+AC01 ( 각 ) HANGUL SYLLABLE GAG<br/>
            U+AC02 ( 갂 ) HANGUL SYLLABLE GAGG<br/>
            U+AC03 ( 갃 ) HANGUL SYLLABLE GAGS<br/>
            U+AC04 ( 간 ) HANGUL SYLLABLE GAN
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.GraphemeClusterClass.ExtendedPictographic">
            <summary>
            Extended Pictographic
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.GraphemeClusterClass.ZeroWidthJoiner">
            <summary>
            U+200D ZERO WIDTH JOINER
            </summary>
        </member>
        <member name="T:SixLabors.Fonts.Unicode.JoiningClass">
            <summary>
            Represents the Unicode Joining value of a given <see cref="T:SixLabors.Fonts.Unicode.CodePoint"/>.
            <see href="https://www.unicode.org/versions/Unicode13.0.0/ch09.pdf"/>
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.JoiningClass.#ctor(SixLabors.Fonts.Unicode.CodePoint)">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Fonts.Unicode.JoiningClass"/> struct.
            </summary>
            <param name="codePoint">The codepoint.</param>
        </member>
        <member name="P:SixLabors.Fonts.Unicode.JoiningClass.JoiningType">
            <summary>
            Gets the Unicode joining type.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.Unicode.JoiningClass.JoiningGroup">
            <summary>
            Gets the Unicode joining group.
            </summary>
        </member>
        <member name="T:SixLabors.Fonts.Unicode.JoiningGroup">
            <summary>
            Unicode Joining Groups
            <see href="https://www.unicode.org/versions/Unicode13.0.0/ch09.pdf"/>.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.AfricanFeh">
            <summary>
            African_Feh
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.AfricanNoon">
            <summary>
            African_Noon
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.AfricanQaf">
            <summary>
            African_Qaf
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.Ain">
            <summary>
            Ain
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.Alaph">
            <summary>
            Alaph
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.Alef">
            <summary>
            Alef
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.Beh">
            <summary>
            Beh
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.Beth">
            <summary>
            Beth
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.BurushaskiYehBarree">
            <summary>
            Burushaski_Yeh_Barree
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.Dal">
            <summary>
            Dal
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.DalathRish">
            <summary>
            Dalath_Rish
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.E">
            <summary>
            E
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.FarsiYeh">
            <summary>
            Farsi_Yeh
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.Fe">
            <summary>
            Fe
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.Feh">
            <summary>
            Feh
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.FinalSemkath">
            <summary>
            Final_Semkath
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.Gaf">
            <summary>
            Gaf
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.Gamal">
            <summary>
            Gamal
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.Hah">
            <summary>
            Hah
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.HanifiRohingyaKinnaYa">
            <summary>
            Hanifi_Rohingya_Kinna_Ya
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.HanifiRohingyaPa">
            <summary>
            Hanifi_Rohingya_Pa
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.He">
            <summary>
            He
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.Heh">
            <summary>
            Heh
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.HehGoal">
            <summary>
            Heh_Goal
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.Heth">
            <summary>
            Heth
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.Kaf">
            <summary>
            Kaf
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.Kaph">
            <summary>
            Kaph
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.Khaph">
            <summary>
            Khaph
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.KnottedHeh">
            <summary>
            Knotted_Heh
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.Lam">
            <summary>
            Lam
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.Lamadh">
            <summary>
            Lamadh
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.MalayalamBha">
            <summary>
            Malayalam_Bha
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.MalayalamJa">
            <summary>
            Malayalam_Ja
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.MalayalamLla">
            <summary>
            Malayalam_Lla
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.MalayalamLlla">
            <summary>
            Malayalam_Llla
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.MalayalamNga">
            <summary>
            Malayalam_Nga
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.MalayalamNna">
            <summary>
            Malayalam_Nna
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.MalayalamNnna">
            <summary>
            Malayalam_Nnna
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.MalayalamNya">
            <summary>
            Malayalam_Nya
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.MalayalamRa">
            <summary>
            Malayalam_Ra
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.MalayalamSsa">
            <summary>
            Malayalam_Ssa
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.MalayalamTta">
            <summary>
            Malayalam_Tta
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.ManichaeanAleph">
            <summary>
            Manichaean_Aleph
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.ManichaeanAyin">
            <summary>
            Manichaean_Ayin
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.ManichaeanBeth">
            <summary>
            Manichaean_Beth
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.ManichaeanDaleth">
            <summary>
            Manichaean_Daleth
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.ManichaeanDhamedh">
            <summary>
            Manichaean_Dhamedh
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.ManichaeanFive">
            <summary>
            Manichaean_Five
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.ManichaeanGimel">
            <summary>
            Manichaean_Gimel
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.ManichaeanHeth">
            <summary>
            Manichaean_Heth
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.ManichaeanHundred">
            <summary>
            Manichaean_Hundred
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.ManichaeanKaph">
            <summary>
            Manichaean_Kaph
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.ManichaeanLamedh">
            <summary>
            Manichaean_Lamedh
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.ManichaeanMem">
            <summary>
            Manichaean_Mem
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.ManichaeanNun">
            <summary>
            Manichaean_Nun
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.ManichaeanOne">
            <summary>
            Manichaean_One
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.ManichaeanPe">
            <summary>
            Manichaean_Pe
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.ManichaeanQoph">
            <summary>
            Manichaean_Qoph
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.ManichaeanResh">
            <summary>
            Manichaean_Resh
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.ManichaeanSadhe">
            <summary>
            Manichaean_Sadhe
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.ManichaeanSamekh">
            <summary>
            Manichaean_Samekh
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.ManichaeanTaw">
            <summary>
            Manichaean_Taw
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.ManichaeanTen">
            <summary>
            Manichaean_Ten
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.ManichaeanTeth">
            <summary>
            Manichaean_Teth
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.ManichaeanThamedh">
            <summary>
            Manichaean_Thamedh
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.ManichaeanTwenty">
            <summary>
            Manichaean_Twenty
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.ManichaeanWaw">
            <summary>
            Manichaean_Waw
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.ManichaeanYodh">
            <summary>
            Manichaean_Yodh
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.ManichaeanZayin">
            <summary>
            Manichaean_Zayin
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.Meem">
            <summary>
            Meem
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.Mim">
            <summary>
            Mim
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.NoJoiningGroup">
            <summary>
            No_Joining_Group
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.Noon">
            <summary>
            Noon
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.Nun">
            <summary>
            Nun
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.Nya">
            <summary>
            Nya
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.Pe">
            <summary>
            Pe
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.Qaf">
            <summary>
            Qaf
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.Qaph">
            <summary>
            Qaph
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.Reh">
            <summary>
            Reh
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.ReversedPe">
            <summary>
            Reversed_Pe
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.RohingyaYeh">
            <summary>
            Rohingya_Yeh
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.Sad">
            <summary>
            Sad
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.Sadhe">
            <summary>
            Sadhe
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.Seen">
            <summary>
            Seen
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.Semkath">
            <summary>
            Semkath
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.Shin">
            <summary>
            Shin
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.StraightWaw">
            <summary>
            Straight_Waw
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.SwashKaf">
            <summary>
            Swash_Kaf
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.SyriacWaw">
            <summary>
            Syriac_Waw
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.Tah">
            <summary>
            Tah
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.Taw">
            <summary>
            Taw
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.TehMarbuta">
            <summary>
            Teh_Marbuta
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.TehMarbutaGoal">
            <summary>
            Hamza_On_Heh_Goal
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.Teth">
            <summary>
            Teth
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.ThinYeh">
            <summary>
            Thin_Yeh
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.VerticalTail">
            <summary>
            Vertical_Tail
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.Waw">
            <summary>
            Waw
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.Yeh">
            <summary>
            Yeh
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.YehBarree">
            <summary>
            Yeh_Barree
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.YehWithTail">
            <summary>
            Yeh_With_Tail
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.Yudh">
            <summary>
            Yudh
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.YudhHe">
            <summary>
            Yudh_He
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.Zain">
            <summary>
            Zain
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningGroup.Zhain">
            <summary>
            Zhain
            </summary>
        </member>
        <member name="T:SixLabors.Fonts.Unicode.JoiningType">
            <summary>
            Unicode Joining Types
            <see href="https://www.unicode.org/versions/Unicode13.0.0/ch09.pdf"/> Table 9-3.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningType.RightJoining">
            <summary>
            Right Joining (R)
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningType.LeftJoining">
            <summary>
            Left Joining (L)
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningType.DualJoining">
            <summary>
            Dual Joining (D)
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningType.JoinCausing">
            <summary>
            Join Causing (C)
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningType.NonJoining">
            <summary>
            Non Joining (U)
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.JoiningType.Transparent">
            <summary>
            Transparent (T)
            </summary>
        </member>
        <member name="T:SixLabors.Fonts.Unicode.LineBreak">
            <summary>
            Information about a potential line break position.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.LineBreak.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Fonts.Unicode.LineBreak"/> struct.
            </summary>
            <param name="positionMeasure">The code point index to measure to</param>
            <param name="positionWrap">The code point index to actually break the line at</param>
            <param name="required">True if this is a required line break; otherwise false</param>
        </member>
        <member name="P:SixLabors.Fonts.Unicode.LineBreak.PositionMeasure">
            <summary>
            Gets the break position, before any trailing whitespace.
            This doesn't include trailing whitespace.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.Unicode.LineBreak.PositionWrap">
            <summary>
            Gets the break position, after any trailing whitespace.
            This includes trailing whitespace.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.Unicode.LineBreak.Required">
            <summary>
            Gets a value indicating whether there should be a forced line break here.
            </summary>
        </member>
        <member name="T:SixLabors.Fonts.Unicode.LineBreakClass">
            <summary>
            Unicode line break classes.
            <see href="https://www.unicode.org/reports/tr14/tr14-37.html#Table1"/>
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.LineBreakClass.OP">
            <summary>
            Open punctuation
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.LineBreakClass.CL">
            <summary>
            Closing punctuation
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.LineBreakClass.CP">
            <summary>
            Closing parenthesis
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.LineBreakClass.QU">
            <summary>
            Ambiguous quotation
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.LineBreakClass.GL">
            <summary>
            Glue
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.LineBreakClass.NS">
            <summary>
            Non-starters
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.LineBreakClass.EX">
            <summary>
            Exclamation/Interrogation
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.LineBreakClass.SY">
            <summary>
            Symbols allowing break after
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.LineBreakClass.IS">
            <summary>
            Infix separator
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.LineBreakClass.PR">
            <summary>
            Prefix
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.LineBreakClass.PO">
            <summary>
            Postfix
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.LineBreakClass.NU">
            <summary>
            Numeric
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.LineBreakClass.AL">
            <summary>
            Alphabetic
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.LineBreakClass.HL">
            <summary>
            Hebrew Letter
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.LineBreakClass.ID">
            <summary>
            Ideographic
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.LineBreakClass.IN">
            <summary>
            Inseparable characters
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.LineBreakClass.HY">
            <summary>
            Hyphen
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.LineBreakClass.BA">
            <summary>
            Break after
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.LineBreakClass.BB">
            <summary>
            Break before
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.LineBreakClass.B2">
            <summary>
            Break on either side (but not pair)
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.LineBreakClass.ZW">
            <summary>
            Zero-width space
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.LineBreakClass.CM">
            <summary>
            Combining marks
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.LineBreakClass.WJ">
            <summary>
            Word joiner
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.LineBreakClass.H2">
            <summary>
            Hangul LV
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.LineBreakClass.H3">
            <summary>
            Hangul LVT
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.LineBreakClass.JL">
            <summary>
            Hangul L Jamo
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.LineBreakClass.JV">
            <summary>
            Hangul V Jamo
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.LineBreakClass.JT">
            <summary>
            Hangul T Jamo
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.LineBreakClass.RI">
            <summary>
            Regional Indicator
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.LineBreakClass.EB">
            <summary>
            Emoji Base
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.LineBreakClass.EM">
            <summary>
            Emoji Modifier
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.LineBreakClass.ZWJ">
            <summary>
            Zero Width Joiner
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.LineBreakClass.CB">
            <summary>
            Contingent break
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.LineBreakClass.AI">
            <summary>
            Ambiguous (Alphabetic or Ideograph)
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.LineBreakClass.BK">
            <summary>
            Break (mandatory)
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.LineBreakClass.CJ">
            <summary>
            Conditional Japanese Starter
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.LineBreakClass.CR">
            <summary>
            Carriage return
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.LineBreakClass.LF">
            <summary>
            Line feed
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.LineBreakClass.NL">
            <summary>
            Next line
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.LineBreakClass.SA">
            <summary>
            South-East Asian
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.LineBreakClass.SG">
            <summary>
            Surrogates
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.LineBreakClass.SP">
            <summary>
            Space
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.LineBreakClass.XX">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="T:SixLabors.Fonts.Unicode.LineBreakEnumerator">
            <summary>
            Supports a simple iteration over a linebreak collection.
            Implementation of the Unicode Line Break Algorithm. UAX:14
            <see href="https://www.unicode.org/reports/tr14/tr14-37.html"/>
            Methods are pattern-matched by compiler to allow using foreach pattern.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.LineBreakEnumerator.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that iterates through the collection.</returns>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.LineBreakEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            <see langword="true"/> if the enumerator was successfully advanced to the next element;
            <see langword="false"/> if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.LineBreakPairTable.DIBRK">
            <summary>
            Direct break opportunity
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.LineBreakPairTable.INBRK">
            <summary>
            Indirect break opportunity
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.LineBreakPairTable.CIBRK">
            <summary>
            Indirect break opportunity for combining marks
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.LineBreakPairTable.CPBRK">
            <summary>
            Prohibited break for combining marks
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.LineBreakPairTable.PRBRK">
            <summary>
            Prohibited break
            </summary>
        </member>
        <member name="T:SixLabors.Fonts.Unicode.MappedArraySlice`1">
            <summary>
            Provides a mapped view of an underlying slice, selecting arbitrary indices
            from the source array.
            </summary>
            <typeparam name="T">The type of item contained in the underlying array.</typeparam>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.MappedArraySlice`1.#ctor(SixLabors.Fonts.Unicode.ReadOnlyArraySlice{`0}@,SixLabors.Fonts.Unicode.ReadOnlyArraySlice{System.Int32}@)">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Fonts.Unicode.MappedArraySlice`1"/> struct.
            </summary>
            <param name="data">The data slice.</param>
            <param name="map">The map slice.</param>
        </member>
        <member name="P:SixLabors.Fonts.Unicode.MappedArraySlice`1.Length">
            <summary>
            Gets the number of items in the map.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.Unicode.MappedArraySlice`1.Item(System.Int32)">
            <summary>
            Returns a reference to specified element of the slice.
            </summary>
            <param name="index">The index of the element to return.</param>
            <returns>The <typeparamref name="T"/>.</returns>
            <exception cref="T:System.IndexOutOfRangeException">
            Thrown when index less than 0 or index greater than or equal to <see cref="P:SixLabors.Fonts.Unicode.MappedArraySlice`1.Length"/>.
            </exception>
        </member>
        <member name="T:SixLabors.Fonts.Unicode.MemoryExtensions">
            <summary>
            Contains extensions methods for memory types.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.MemoryExtensions.EnumerateCodePoints(System.ReadOnlySpan{System.Char})">
            <summary>
            Returns an enumeration of <see cref="T:SixLabors.Fonts.Unicode.CodePoint"/> from the provided span.
            </summary>
            <param name="span">The readonly span of char elements representing the text to enumerate.</param>
            <remarks>
            Invalid sequences will be represented in the enumeration by <see cref="P:SixLabors.Fonts.Unicode.CodePoint.ReplacementChar"/>.
            </remarks>
            <returns>The <see cref="T:SixLabors.Fonts.Unicode.SpanCodePointEnumerator"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.MemoryExtensions.EnumerateCodePoints(System.Span{System.Char})">
            <summary>
            Returns an enumeration of <see cref="T:SixLabors.Fonts.Unicode.CodePoint"/> from the provided span.
            </summary>
            <param name="span">The span of char elements representing the text to enumerate.</param>
            <remarks>
            Invalid sequences will be represented in the enumeration by <see cref="P:SixLabors.Fonts.Unicode.CodePoint.ReplacementChar"/>.
            </remarks>
            <returns>The <see cref="T:SixLabors.Fonts.Unicode.SpanCodePointEnumerator"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.MemoryExtensions.EnumerateGraphemes(System.ReadOnlySpan{System.Char})">
            <summary>
            Returns an enumeration of Grapheme instances from the provided span.
            </summary>
            <param name="span">The readonly span of char elements representing the text to enumerate.</param>
            <remarks>
            Invalid sequences will be represented in the enumeration by <see cref="F:SixLabors.Fonts.Unicode.GraphemeClusterClass.Any"/>.
            </remarks>
            <returns>The <see cref="T:SixLabors.Fonts.Unicode.SpanGraphemeEnumerator"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.MemoryExtensions.EnumerateGraphemes(System.Span{System.Char})">
            <summary>
            Returns an enumeration of Grapheme instances from the provided span.
            </summary>
            <param name="span">The span of char elements representing the text to enumerate.</param>
            <remarks>
            Invalid sequences will be represented in the enumeration by <see cref="F:SixLabors.Fonts.Unicode.GraphemeClusterClass.Any"/>.
            </remarks>
            <returns>The <see cref="T:SixLabors.Fonts.Unicode.SpanGraphemeEnumerator"/>.</returns>
        </member>
        <member name="T:SixLabors.Fonts.Unicode.ReadOnlyArraySlice`1">
            <summary>
            ReadOnlyArraySlice represents a contiguous region of arbitrary memory similar
            to <see cref="T:System.ReadOnlyMemory`1"/> and <see cref="T:System.ReadOnlySpan`1"/> though constrained
            to arrays.
            Unlike <see cref="T:System.ReadOnlySpan`1"/>, it is not a byref-like type.
            </summary>
            <typeparam name="T">The type of item contained in the slice.</typeparam>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.ReadOnlyArraySlice`1.#ctor(`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Fonts.Unicode.ReadOnlyArraySlice`1"/> struct.
            </summary>
            <param name="data">The underlying data buffer.</param>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.ReadOnlyArraySlice`1.#ctor(`0[],System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Fonts.Unicode.ReadOnlyArraySlice`1"/> struct.
            </summary>
            <param name="data">The underlying data buffer.</param>
            <param name="start">The offset position in the underlying buffer this slice was created from.</param>
            <param name="length">The number of items in the slice.</param>
        </member>
        <member name="P:SixLabors.Fonts.Unicode.ReadOnlyArraySlice`1.Empty">
            <summary>
            Gets an empty <see cref="T:SixLabors.Fonts.Unicode.ReadOnlyArraySlice`1"/>
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.Unicode.ReadOnlyArraySlice`1.Start">
            <summary>
            Gets the offset position in the underlying buffer this slice was created from.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.Unicode.ReadOnlyArraySlice`1.Length">
            <summary>
            Gets the number of items in the slice.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.Unicode.ReadOnlyArraySlice`1.Span">
            <summary>
            Gets a <see cref="T:System.Span`1"/> representing this slice.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.Unicode.ReadOnlyArraySlice`1.Item(System.Int32)">
            <summary>
            Returns a reference to specified element of the slice.
            </summary>
            <param name="index">The index of the element to return.</param>
            <returns>The <typeparamref name="T"/>.</returns>
            <exception cref="T:System.IndexOutOfRangeException">
            Thrown when index less than 0 or index greater than or equal to <see cref="P:SixLabors.Fonts.Unicode.ReadOnlyArraySlice`1.Length"/>.
            </exception>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.ReadOnlyArraySlice`1.op_Implicit(`0[])~SixLabors.Fonts.Unicode.ReadOnlyArraySlice{`0}">
            <summary>
            Defines an implicit conversion of an array to a <see cref="T:SixLabors.Fonts.Unicode.ReadOnlyArraySlice`1"/>
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.ReadOnlyArraySlice`1.CopyTo(SixLabors.Fonts.Unicode.ArraySlice{`0})">
            <summary>
            Copies the contents of this slice into destination span. If the source
            and destinations overlap, this method behaves as if the original values in
            a temporary location before the destination is overwritten.
            </summary>
            <param name="destination">The slice to copy items into.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the destination slice is shorter than the source Span.
            </exception>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.ReadOnlyArraySlice`1.Slice(System.Int32,System.Int32)">
            <summary>
            Forms a slice out of the given slice, beginning at 'start', of given length
            </summary>
            <param name="start">The index at which to begin this slice.</param>
            <param name="length">The desired length for the slice (exclusive).</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the specified <paramref name="start"/> or end index is not in range (&lt;0 or &gt;Length).
            </exception>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.ReadOnlyArraySlice`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.ReadOnlyArraySlice`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="P:SixLabors.Fonts.Unicode.ReadOnlyArraySlice`1.Enumerator.Current">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.ReadOnlyArraySlice`1.Enumerator.MoveNext">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.ReadOnlyArraySlice`1.Enumerator.System#Collections#IEnumerator#Reset">
            <inheritdoc/>
        </member>
        <member name="T:SixLabors.Fonts.Unicode.ScriptClass">
            <summary>
            Unicode Script classes <see href="http://www.unicode.org/reports/tr24/#Script"/>
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Unknown">
            <summary>
            Shortcode: Zzzz
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Common">
            <summary>
            Shortcode: Zyyy
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Inherited">
            <summary>
            Shortcode: Zinh, Qaai
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Adlam">
            <summary>
            Shortcode: Adlm
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.CaucasianAlbanian">
            <summary>
            Shortcode: Aghb
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Ahom">
            <summary>
            Shortcode: Ahom
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Arabic">
            <summary>
            Shortcode: Arab
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.ImperialAramaic">
            <summary>
            Shortcode: Armi
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Armenian">
            <summary>
            Shortcode: Armn
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Avestan">
            <summary>
            Shortcode: Avst
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Balinese">
            <summary>
            Shortcode: Bali
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Bamum">
            <summary>
            Shortcode: Bamu
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.BassaVah">
            <summary>
            Shortcode: Bass
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Batak">
            <summary>
            Shortcode: Batk
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Bengali">
            <summary>
            Shortcode: Beng
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Bhaiksuki">
            <summary>
            Shortcode: Bhks
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Bopomofo">
            <summary>
            Shortcode: Bopo
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Brahmi">
            <summary>
            Shortcode: Brah
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Braille">
            <summary>
            Shortcode: Brai
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Buginese">
            <summary>
            Shortcode: Bugi
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Buhid">
            <summary>
            Shortcode: Buhd
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Chakma">
            <summary>
            Shortcode: Cakm
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.CanadianAboriginal">
            <summary>
            Shortcode: Cans
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Carian">
            <summary>
            Shortcode: Cari
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Cham">
            <summary>
            Shortcode: Cham
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Cherokee">
            <summary>
            Shortcode: Cher
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Chorasmian">
            <summary>
            Shortcode: Chrs
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Coptic">
            <summary>
            Shortcode: Copt, Qaac
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.CyproMinoan">
            <summary>
            Shortcode: Cpmn
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Cypriot">
            <summary>
            Shortcode: Cprt
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Cyrillic">
            <summary>
            Shortcode: Cyrl
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Devanagari">
            <summary>
            Shortcode: Deva
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.DivesAkuru">
            <summary>
            Shortcode: Diak
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Dogra">
            <summary>
            Shortcode: Dogr
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Deseret">
            <summary>
            Shortcode: Dsrt
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Duployan">
            <summary>
            Shortcode: Dupl
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.EgyptianHieroglyphs">
            <summary>
            Shortcode: Egyp
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Elbasan">
            <summary>
            Shortcode: Elba
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Elymaic">
            <summary>
            Shortcode: Elym
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Ethiopic">
            <summary>
            Shortcode: Ethi
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Georgian">
            <summary>
            Shortcode: Geor
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Glagolitic">
            <summary>
            Shortcode: Glag
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.GunjalaGondi">
            <summary>
            Shortcode: Gong
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.MasaramGondi">
            <summary>
            Shortcode: Gonm
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Gothic">
            <summary>
            Shortcode: Goth
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Grantha">
            <summary>
            Shortcode: Gran
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Greek">
            <summary>
            Shortcode: Grek
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Gujarati">
            <summary>
            Shortcode: Gujr
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Gurmukhi">
            <summary>
            Shortcode: Guru
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Hangul">
            <summary>
            Shortcode: Hang
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Han">
            <summary>
            Shortcode: Hani
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Hanunoo">
            <summary>
            Shortcode: Hano
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Hatran">
            <summary>
            Shortcode: Hatr
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Hebrew">
            <summary>
            Shortcode: Hebr
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Hiragana">
            <summary>
            Shortcode: Hira
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.AnatolianHieroglyphs">
            <summary>
            Shortcode: Hluw
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.PahawhHmong">
            <summary>
            Shortcode: Hmng
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.NyiakengPuachueHmong">
            <summary>
            Shortcode: Hmnp
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.KatakanaOrHiragana">
            <summary>
            Shortcode: Hrkt
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.OldHungarian">
            <summary>
            Shortcode: Hung
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.OldItalic">
            <summary>
            Shortcode: Ital
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Javanese">
            <summary>
            Shortcode: Java
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.KayahLi">
            <summary>
            Shortcode: Kali
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Katakana">
            <summary>
            Shortcode: Kana
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Kharoshthi">
            <summary>
            Shortcode: Khar
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Khmer">
            <summary>
            Shortcode: Khmr
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Khojki">
            <summary>
            Shortcode: Khoj
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.KhitanSmallScript">
            <summary>
            Shortcode: Kits
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Kannada">
            <summary>
            Shortcode: Knda
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Kaithi">
            <summary>
            Shortcode: Kthi
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.TaiTham">
            <summary>
            Shortcode: Lana
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Lao">
            <summary>
            Shortcode: Laoo
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Latin">
            <summary>
            Shortcode: Latn
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Lepcha">
            <summary>
            Shortcode: Lepc
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Limbu">
            <summary>
            Shortcode: Limb
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.LinearA">
            <summary>
            Shortcode: Lina
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.LinearB">
            <summary>
            Shortcode: Linb
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Lisu">
            <summary>
            Shortcode: Lisu
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Lycian">
            <summary>
            Shortcode: Lyci
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Lydian">
            <summary>
            Shortcode: Lydi
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Mahajani">
            <summary>
            Shortcode: Mahj
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Makasar">
            <summary>
            Shortcode: Maka
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Mandaic">
            <summary>
            Shortcode: Mand
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Manichaean">
            <summary>
            Shortcode: Mani
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Marchen">
            <summary>
            Shortcode: Marc
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Medefaidrin">
            <summary>
            Shortcode: Medf
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.MendeKikakui">
            <summary>
            Shortcode: Mend
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.MeroiticCursive">
            <summary>
            Shortcode: Merc
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.MeroiticHieroglyphs">
            <summary>
            Shortcode: Mero
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Malayalam">
            <summary>
            Shortcode: Mlym
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Modi">
            <summary>
            Shortcode: Modi
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Mongolian">
            <summary>
            Shortcode: Mong
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Mro">
            <summary>
            Shortcode: Mroo
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.MeeteiMayek">
            <summary>
            Shortcode: Mtei
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Multani">
            <summary>
            Shortcode: Mult
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Myanmar">
            <summary>
            Shortcode: Mymr
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Nandinagari">
            <summary>
            Shortcode: Nand
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.OldNorthArabian">
            <summary>
            Shortcode: Narb
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Nabataean">
            <summary>
            Shortcode: Nbat
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Newa">
            <summary>
            Shortcode: Newa
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Nko">
            <summary>
            Shortcode: Nkoo
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Nushu">
            <summary>
            Shortcode: Nshu
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Ogham">
            <summary>
            Shortcode: Ogam
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.OlChiki">
            <summary>
            Shortcode: Olck
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.OldTurkic">
            <summary>
            Shortcode: Orkh
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Oriya">
            <summary>
            Shortcode: Orya
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Osage">
            <summary>
            Shortcode: Osge
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Osmanya">
            <summary>
            Shortcode: Osma
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.OldUyghur">
            <summary>
            Shortcode: Ougr
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Palmyrene">
            <summary>
            Shortcode: Palm
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.PauCinHau">
            <summary>
            Shortcode: Pauc
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.OldPermic">
            <summary>
            Shortcode: Perm
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.PhagsPa">
            <summary>
            Shortcode: Phag
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.InscriptionalPahlavi">
            <summary>
            Shortcode: Phli
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.PsalterPahlavi">
            <summary>
            Shortcode: Phlp
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Phoenician">
            <summary>
            Shortcode: Phnx
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Miao">
            <summary>
            Shortcode: Plrd
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.InscriptionalParthian">
            <summary>
            Shortcode: Prti
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Rejang">
            <summary>
            Shortcode: Rjng
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.HanifiRohingya">
            <summary>
            Shortcode: Rohg
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Runic">
            <summary>
            Shortcode: Runr
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Samaritan">
            <summary>
            Shortcode: Samr
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.OldSouthArabian">
            <summary>
            Shortcode: Sarb
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Saurashtra">
            <summary>
            Shortcode: Saur
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.SignWriting">
            <summary>
            Shortcode: Sgnw
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Shavian">
            <summary>
            Shortcode: Shaw
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Sharada">
            <summary>
            Shortcode: Shrd
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Siddham">
            <summary>
            Shortcode: Sidd
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Khudawadi">
            <summary>
            Shortcode: Sind
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Sinhala">
            <summary>
            Shortcode: Sinh
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Sogdian">
            <summary>
            Shortcode: Sogd
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.OldSogdian">
            <summary>
            Shortcode: Sogo
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.SoraSompeng">
            <summary>
            Shortcode: Sora
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Soyombo">
            <summary>
            Shortcode: Soyo
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Sundanese">
            <summary>
            Shortcode: Sund
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.SylotiNagri">
            <summary>
            Shortcode: Sylo
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Syriac">
            <summary>
            Shortcode: Syrc
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Tagbanwa">
            <summary>
            Shortcode: Tagb
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Takri">
            <summary>
            Shortcode: Takr
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.TaiLe">
            <summary>
            Shortcode: Tale
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.NewTaiLue">
            <summary>
            Shortcode: Talu
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Tamil">
            <summary>
            Shortcode: Taml
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Tangut">
            <summary>
            Shortcode: Tang
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.TaiViet">
            <summary>
            Shortcode: Tavt
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Telugu">
            <summary>
            Shortcode: Telu
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Tifinagh">
            <summary>
            Shortcode: Tfng
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Tagalog">
            <summary>
            Shortcode: Tglg
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Thaana">
            <summary>
            Shortcode: Thaa
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Thai">
            <summary>
            Shortcode: Thai
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Tibetan">
            <summary>
            Shortcode: Tibt
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Tirhuta">
            <summary>
            Shortcode: Tirh
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Tangsa">
            <summary>
            Shortcode: Tnsa
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Toto">
            <summary>
            Shortcode: Toto
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Ugaritic">
            <summary>
            Shortcode: Ugar
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Vai">
            <summary>
            Shortcode: Vaii
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Vithkuqi">
            <summary>
            Shortcode: Vith
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.WarangCiti">
            <summary>
            Shortcode: Wara
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Wancho">
            <summary>
            Shortcode: Wcho
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.OldPersian">
            <summary>
            Shortcode: Xpeo
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Cuneiform">
            <summary>
            Shortcode: Xsux
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Yezidi">
            <summary>
            Shortcode: Yezi
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.Yi">
            <summary>
            Shortcode: Yiii
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.Unicode.ScriptClass.ZanabazarSquare">
            <summary>
            Shortcode: Zanb
            </summary>
        </member>
        <member name="T:SixLabors.Fonts.Unicode.SpanCodePointEnumerator">
            <summary>
            An enumerator for retrieving <see cref="T:SixLabors.Fonts.Unicode.CodePoint"/> instances from a <see cref="T:System.ReadOnlySpan`1"/>.
            Methods are pattern-matched by compiler to allow using foreach pattern.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.SpanCodePointEnumerator.#ctor(System.ReadOnlySpan{System.Char})">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Fonts.Unicode.SpanCodePointEnumerator"/> struct.
            </summary>
            <param name="source">The buffer to read from.</param>
        </member>
        <member name="P:SixLabors.Fonts.Unicode.SpanCodePointEnumerator.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.SpanCodePointEnumerator.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that iterates through the collection.</returns>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.SpanCodePointEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            <see langword="true"/> if the enumerator was successfully advanced to the next element;
            <see langword="false"/> if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="T:SixLabors.Fonts.Unicode.SpanGraphemeEnumerator">
            <summary>
            An enumerator for retrieving Grapheme instances from a <see cref="T:System.ReadOnlySpan`1"/>.
            <br/>
            Implements the Unicode Grapheme Cluster Algorithm. UAX:29
            <see href="https://www.unicode.org/reports/tr29/tr29-37.html"/>
            <br/>
            Methods are pattern-matched by compiler to allow using foreach pattern.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.SpanGraphemeEnumerator.#ctor(System.ReadOnlySpan{System.Char})">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Fonts.Unicode.SpanGraphemeEnumerator"/> struct.
            </summary>
            <param name="source">The buffer to read from.</param>
        </member>
        <member name="P:SixLabors.Fonts.Unicode.SpanGraphemeEnumerator.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.SpanGraphemeEnumerator.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that iterates through the collection.</returns>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.SpanGraphemeEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            <see langword="true"/> if the enumerator was successfully advanced to the next element;
            <see langword="false"/> if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="T:SixLabors.Fonts.Unicode.UnicodeTrie">
            <summary>
            A read-only Trie, holding 32 bit data values.
            A UnicodeTrie is a highly optimized data structure for mapping from Unicode
            code points(values ranging from 0 to 0x10ffff) to a 32 bit value.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.UnicodeTrie.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Fonts.Unicode.UnicodeTrie"/> class.
            </summary>
            <param name="stream">The stream containing the compressed data.</param>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.UnicodeTrie.#ctor(System.UInt32[],System.Int32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Fonts.Unicode.UnicodeTrie"/> class.
            </summary>
            <param name="data">The uncompressed trie data.</param>
            <param name="highStart">The start of the last range which ends at U+10ffff.</param>
            <param name="errorValue">The value for out-of-range code points and illegal UTF-8.</param>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.UnicodeTrie.Get(System.Int32)">
            <summary>
            Get the value for a code point as stored in the trie.
            </summary>
            <param name="codePoint">The code point.</param>
            <returns>The <see cref="T:System.UInt32"/> value.</returns>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.UnicodeTrie.Save(System.IO.Stream)">
            <summary>
            Saves the <see cref="T:SixLabors.Fonts.Unicode.UnicodeTrie"/> to the stream in a compressed format.
            </summary>
            <param name="stream">The output stream.</param>
        </member>
        <member name="T:SixLabors.Fonts.Unicode.UnicodeTrieBuilder">
            <summary>
            Builder class to manipulate and generate a trie.
            This is useful for ICU data in primitive types.
            Provides a compact way to store information that is indexed by Unicode
            values, such as character properties, types, keyboard values, etc.
            This is very useful when you have a block of Unicode data that contains significant
            values while the rest of the Unicode data is unused in the application or
            when you have a lot of redundance, such as where all 21,000 Han ideographs
            have the same value.  However, lookup is much faster than a hash table.
            A trie of any primitive data type serves two purposes:
            <ul>
                <li>Fast access of the indexed values.</li>
                <li>Smaller memory footprint.</li>
            </ul>
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.UnicodeTrieBuilder.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Fonts.Unicode.UnicodeTrieBuilder"/> class.
            </summary>
            <param name="initialValue">The initial value that is set for all code points.</param>
            <param name="errorValue">The value for out-of-range code points and illegal UTF-8.</param>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.UnicodeTrieBuilder.Get(System.Int32)">
            <summary>
            Gets the value for a code point as stored in the trie.
            </summary>
            <param name="c">The code point.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.UnicodeTrieBuilder.Set(System.Int32,System.UInt32)">
            <summary>
            Sets a value for a given code point.
            </summary>
            <param name="codePoint">The code point.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.UnicodeTrieBuilder.SetRange(System.Int32,System.Int32,System.UInt32,System.Boolean)">
            <summary>
            Set a value in a range of code points [start..end].
            All code points c with start &lt;= c &lt;= end will get the value if
            <paramref name="overwrite"/> is <see langword="true"/> or if the old value is the
            initial value.
            </summary>
            <param name="start">The first code point to get the value.</param>
            <param name="end">The last code point to get the value (inclusive).</param>
            <param name="value">The value.</param>
            <param name="overwrite">Whether old non-initial values are to be overwritten.</param>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.UnicodeTrieBuilder.Freeze">
            <summary>
            Compacts the data and populates an optimized readonly Trie.
            </summary>
            <returns>The <see cref="T:SixLabors.Fonts.Unicode.UnicodeTrie"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.UnicodeTrieBuilder.U_IS_LEAD(System.Int32)">
            <summary>
            Is this code point a lead surrogate (U+d800..U+dbff)?
            </summary>
            <param name="c">The code point.</param>
            <returns>The <see cref="T:System.Boolean"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.UnicodeUtility.IsAsciiCodePoint(System.UInt32)">
            <summary>
            Returns <see langword="true"/> if <paramref name="value"/> is an ASCII
            character ([ U+0000..U+007F ]).
            </summary>
            <remarks>
            Per http://www.unicode.org/glossary/#ASCII, ASCII is only U+0000..U+007F.
            </remarks>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.UnicodeUtility.IsBmpCodePoint(System.UInt32)">
            <summary>
            Returns <see langword="true"/> if <paramref name="value"/> is in the
            Basic Multilingual Plane (BMP).
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.UnicodeUtility.GetVerticalMirror(System.UInt32)">
            <summary>
            Gets the codepoint value representing the vertical mirror for this instance.
            <br/>
            <see href="https://www.unicode.org/reports/tr50/#vertical_alternates"/>
            <br/>
            <see href="https://github.com/harfbuzz/harfbuzz/blob/a52c6df38a38c4e36ff991dfb4b7d92e48a44553/src/hb-ot-shape.cc#L652-L701"/>
            </summary>
            <returns>
            The <see cref="T:System.UInt32"/> representing the mirror or <c>0u</c> if not found.
            </returns>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.UnicodeUtility.IsCJKCodePoint(System.UInt32)">
            <summary>
            Returns <see langword="true"/> if <paramref name="value"/> is a
            Chinese/Japanese/Korean (CJK) character.
            </summary>
            <remarks>
            <see href="https://blog.ceshine.net/post/cjk-unicode/"/>
            <see href="https://en.wikipedia.org/wiki/Hiragana_%28Unicode_block%29"/>
            <see href="https://en.wikipedia.org/wiki/Katakana_(Unicode_block)"/>
            <see href="https://en.wikipedia.org/wiki/Hangul_Syllables"/>
            <see href="https://en.wikipedia.org/wiki/CJK_Unified_Ideographs"/>
            </remarks>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.UnicodeUtility.IsDefaultIgnorableCodePoint(System.UInt32)">
            <summary>
            Returns <see langword="true"/> if <paramref name="value"/> is a Default Ignorable Code Point.
            </summary>
            <remarks>
            <see href="http://www.unicode.org/reports/tr44/#Default_Ignorable_Code_Point"/>
            <see href="https://www.unicode.org/Public/14.0.0/ucd/DerivedCoreProperties.txt"/>
            </remarks>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.UnicodeUtility.GetPlane(System.UInt32)">
            <summary>
            Returns the Unicode plane (0 through 16, inclusive) which contains this code point.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.UnicodeUtility.GetUtf16SequenceLength(System.UInt32)">
            <summary>
            Given a Unicode scalar value, gets the number of UTF-16 code units required to represent this value.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.UnicodeUtility.GetUtf8SequenceLength(System.UInt32)">
            <summary>
            Given a Unicode scalar value, gets the number of UTF-8 code units required to represent this value.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.UnicodeUtility.IsValidCodePoint(System.UInt32)">
            <summary>
            Returns <see langword="true"/> if <paramref name="codePoint"/> is a valid Unicode code
            point, i.e., is in [ U+0000..U+10FFFF ], inclusive.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.UnicodeUtility.IsHighSurrogateCodePoint(System.UInt32)">
            <summary>
            Returns <see langword="true"/> if <paramref name="value"/> is a UTF-16 high surrogate code point,
            i.e., is in [ U+D800..U+DBFF ], inclusive.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.UnicodeUtility.IsLowSurrogateCodePoint(System.UInt32)">
            <summary>
            Returns <see langword="true"/> if <paramref name="value"/> is a UTF-16 low surrogate code point,
            i.e., is in [ U+DC00..U+DFFF ], inclusive.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.UnicodeUtility.IsSurrogateCodePoint(System.UInt32)">
            <summary>
            Returns <see langword="true"/> if <paramref name="value"/> is a UTF-16 surrogate code point,
            i.e., is in [ U+D800..U+DFFF ], inclusive.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.UnicodeUtility.IsInRangeInclusive(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Returns <see langword="true"/> if <paramref name="value"/> is between
            <paramref name="lowerBound"/> and <paramref name="upperBound"/>, inclusive.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.UnicodeUtility.GetScalarFromUtf16SurrogatePair(System.UInt32,System.UInt32)">
            <summary>
            Returns a Unicode scalar value from two code points representing a UTF-16 surrogate pair.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.UnicodeUtility.GetUtf16SurrogatesFromSupplementaryPlaneCodePoint(System.UInt32,System.Char@,System.Char@)">
            <summary>
            Decomposes an astral Unicode code point into UTF-16 high and low surrogate code units.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.Unicode.UnicodeUtility.ToHexString(System.UInt32)">
            <summary>
            Formats a code point as the hex string "U+XXXX".
            </summary>
            <remarks>
            The input value doesn't have to be a real code point in the Unicode codespace. It can be any integer.
            </remarks>
        </member>
        <member name="T:SixLabors.Fonts.Utilities.EncodingIDExtensions">
            <summary>
            Converts encoding ID to TextEncoding
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.Utilities.EncodingIDExtensions.AsEncoding(SixLabors.Fonts.WellKnownIds.EncodingIDs)">
            <summary>
            Converts encoding ID to TextEncoding
            </summary>
            <param name="id">The identifier.</param>
            <returns>the encoding for this encoding ID</returns>
        </member>
        <member name="T:SixLabors.Fonts.VerticalAlignment">
            <summary>
            Vertical alignment modes.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.VerticalAlignment.Top">
            <summary>
            Aligns downward from the top.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.VerticalAlignment.Center">
            <summary>
            Aligns text up and down from the middle.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.VerticalAlignment.Bottom">
            <summary>
            Aligns text upwards from the bottom
            </summary>
        </member>
        <member name="T:SixLabors.Fonts.WellKnownIds.EncodingIDs">
            <summary>
            Encoding IDS
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.WellKnownIds.EncodingIDs.Unicode1">
            <summary>
            Unicode 1.0 semantics
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.WellKnownIds.EncodingIDs.Unicode11">
            <summary>
            Unicode 1.1 semantics
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.WellKnownIds.EncodingIDs.ISO10646">
            <summary>
            ISO/IEC 10646 semantics
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.WellKnownIds.EncodingIDs.Unicode2">
            <summary>
            Unicode 2.0 and onwards semantics, Unicode BMP only (cmap subtable formats 0, 4, 6).
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.WellKnownIds.EncodingIDs.Unicode2Plus">
            <summary>
            Unicode 2.0 and onwards semantics, Unicode full repertoire (cmap subtable formats 0, 4, 6, 10, 12).
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.WellKnownIds.EncodingIDs.UnicodeVariationSequences">
            <summary>
            Unicode Variation Sequences (cmap subtable format 14).
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.WellKnownIds.EncodingIDs.UnicodeFull">
            <summary>
            Unicode full repertoire (cmap subtable formats 0, 4, 6, 10, 12, 13)
            </summary>
        </member>
        <member name="T:SixLabors.Fonts.WellKnownIds.KnownNameIds">
            <summary>
            Provides enumeration of common name ids
            <see href="https://docs.microsoft.com/en-us/typography/opentype/spec/name#name-ids"/>
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.WellKnownIds.KnownNameIds.CopyrightNotice">
            <summary>
            The copyright notice
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.WellKnownIds.KnownNameIds.FontFamilyName">
            <summary>
            The font family name; Up to four fonts can share the Font Family name, forming a font style linking
            group (regular, italic, bold, bold italic — as defined by OS/2.fsSelection bit settings).
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.WellKnownIds.KnownNameIds.FontSubfamilyName">
            <summary>
            The font subfamily name; The Font Subfamily name distinguishes the font in a group with the same Font Family name (name ID 1).
            This is assumed to address style (italic, oblique) and weight (light, bold, black, etc.). A font with no particular differences
            in weight or style (e.g. medium weight, not italic and fsSelection bit 6 set) should have the string "Regular" stored in this position.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.WellKnownIds.KnownNameIds.UniqueFontID">
            <summary>
            The unique font identifier
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.WellKnownIds.KnownNameIds.FullFontName">
            <summary>
            The full font name; a combination of strings 1 and 2, or a similar human-readable variant. If string 2 is "Regular", it is sometimes omitted from name ID 4.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.WellKnownIds.KnownNameIds.Version">
            <summary>
            Version string. Should begin with the syntax 'Version &lt;number&gt;.&lt;number>' (upper case, lower case, or mixed, with a space between "Version" and the number).
            The string must contain a version number of the following form: one or more digits (0-9) of value less than 65,535, followed by a period, followed by one or more
            digits of value less than 65,535. Any character other than a digit will terminate the minor number. A character such as ";" is helpful to separate different pieces of version information.
            The first such match in the string can be used by installation software to compare font versions.
            Note that some installers may require the string to start with "Version ", followed by a version number as above.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.WellKnownIds.KnownNameIds.PostscriptName">
            <summary>
            Postscript name for the font; Name ID 6 specifies a string which is used to invoke a PostScript language font that corresponds to this OpenType font.
            When translated to ASCII, the name string must be no longer than 63 characters and restricted to the printable ASCII subset, codes 33 to 126,
            except for the 10 characters '[', ']', '(', ')', '{', '}', '&lt;', '&gt;', '/', '%'.
            In a CFF OpenType font, there is no requirement that this name be the same as the font name in the CFF’s Name INDEX.
            Thus, the same CFF may be shared among multiple font components in a Font Collection. See the 'name' table section of
            Recommendations for OpenType fonts "" for additional information.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.WellKnownIds.KnownNameIds.Trademark">
            <summary>
            Trademark; this is used to save any trademark notice/information for this font. Such information should
            be based on legal advice. This is distinctly separate from the copyright.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.WellKnownIds.KnownNameIds.Manufacturer">
            <summary>
            The manufacturer
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.WellKnownIds.KnownNameIds.Designer">
            <summary>
            Designer; name of the designer of the typeface.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.WellKnownIds.KnownNameIds.Description">
            <summary>
            Description; description of the typeface. Can contain revision information, usage recommendations, history, features, etc.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.WellKnownIds.KnownNameIds.VendorUrl">
            <summary>
            URL Vendor; URL of font vendor (with protocol, e.g., http://, ftp://). If a unique serial number is embedded in
            the URL, it can be used to register the font.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.WellKnownIds.KnownNameIds.DesignerUrl">
            <summary>
            URL Designer; URL of typeface designer (with protocol, e.g., http://, ftp://).
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.WellKnownIds.KnownNameIds.LicenseDescription">
            <summary>
            License Description; description of how the font may be legally used, or different example scenarios for licensed use.
            This field should be written in plain language, not legalese.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.WellKnownIds.KnownNameIds.LicenseInfoUrl">
            <summary>
            License Info URL; URL where additional licensing information can be found.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.WellKnownIds.KnownNameIds.TypographicFamilyName">
            <summary>
            Typographic Family name: The typographic family grouping doesn't impose any constraints on the number of faces within it,
            in contrast with the 4-style family grouping (ID 1), which is present both for historical reasons and to express style linking groups.
            If name ID 16 is absent, then name ID 1 is considered to be the typographic family name.
            (In earlier versions of the specification, name ID 16 was known as "Preferred Family".)
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.WellKnownIds.KnownNameIds.TypographicSubfamilyName">
            <summary>
            Typographic Subfamily name: This allows font designers to specify a subfamily name within the typographic family grouping.
            This string must be unique within a particular typographic family. If it is absent, then name ID 2 is considered to be the
            typographic subfamily name. (In earlier versions of the specification, name ID 17 was known as "Preferred Subfamily".)
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.WellKnownIds.KnownNameIds.SampleText">
            <summary>
            Sample text; This can be the font name, or any other text that the designer thinks is the best sample to display the font in.
            </summary>
        </member>
        <member name="T:SixLabors.Fonts.WellKnownIds.PlatformIDs">
            <summary>
            platforms ids
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.WellKnownIds.PlatformIDs.Unicode">
            <summary>
            Unicode platform
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.WellKnownIds.PlatformIDs.Macintosh">
            <summary>
            Script manager code
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.WellKnownIds.PlatformIDs.ISO">
            <summary>
            [deprecated] ISO encoding
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.WellKnownIds.PlatformIDs.Windows">
            <summary>
            Window encoding
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.WellKnownIds.PlatformIDs.Custom">
            <summary>
            Custom platform
            </summary>
        </member>
        <member name="T:SixLabors.Fonts.WordBreaking">
            <summary>
            Defines modes to determine when line breaks should appear when words overflow
            their content box.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.WordBreaking.Normal">
            <summary>
            Use the default line break rule.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.WordBreaking.BreakAll">
            <summary>
            To prevent overflow, word breaks should be inserted between any two
            characters (excluding Chinese/Japanese/Korean text).
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.WordBreaking.KeepAll">
            <summary>
            Word breaks should not be used for Chinese/Japanese/Korean (CJK) text.
            Non-CJK text behavior is the same as for <see cref="F:SixLabors.Fonts.WordBreaking.Normal"/>
            </summary>
        </member>
        <member name="T:SixLabors.DebugGuard">
            <summary>
            Provides methods to protect against invalid parameters for a DEBUG build.
            </summary>
        </member>
        <member name="M:SixLabors.DebugGuard.NotNull``1(``0,System.String)">
            <summary>
            Ensures that the value is not null.
            </summary>
            <param name="value">The target object, which cannot be null.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <typeparam name="TValue">The type of the value.</typeparam>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null.</exception>
        </member>
        <member name="M:SixLabors.DebugGuard.NotNullOrWhiteSpace(System.String,System.String)">
            <summary>
            Ensures that the target value is not null, empty, or whitespace.
            </summary>
            <param name="value">The target string, which should be checked against being null or empty.</param>
            <param name="parameterName">Name of the parameter.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="value"/> is empty or contains only blanks.</exception>
        </member>
        <member name="M:SixLabors.DebugGuard.MustBeLessThan``1(``0,``0,System.String)">
            <summary>
            Ensures that the specified value is less than a maximum value.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="max">The maximum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <typeparam name="TValue">The type of the value.</typeparam>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is greater than the maximum value.
            </exception>
        </member>
        <member name="M:SixLabors.DebugGuard.MustBeLessThanOrEqualTo``1(``0,``0,System.String)">
            <summary>
            Verifies that the specified value is less than or equal to a maximum value
            and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="max">The maximum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <typeparam name="TValue">The type of the value.</typeparam>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is greater than the maximum value.
            </exception>
        </member>
        <member name="M:SixLabors.DebugGuard.MustBeGreaterThan``1(``0,``0,System.String)">
            <summary>
            Verifies that the specified value is greater than a minimum value
            and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="min">The minimum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <typeparam name="TValue">The type of the value.</typeparam>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is less than the minimum value.
            </exception>
        </member>
        <member name="M:SixLabors.DebugGuard.MustBeGreaterThanOrEqualTo``1(``0,``0,System.String)">
            <summary>
            Verifies that the specified value is greater than or equal to a minimum value
            and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="min">The minimum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <typeparam name="TValue">The type of the value.</typeparam>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is less than the minimum value.
            </exception>
        </member>
        <member name="M:SixLabors.DebugGuard.MustBeBetweenOrEqualTo``1(``0,``0,``0,System.String)">
            <summary>
            Verifies that the specified value is greater than or equal to a minimum value and less than
            or equal to a maximum value and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <typeparam name="TValue">The type of the value.</typeparam>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is less than the minimum value of greater than the maximum value.
            </exception>
        </member>
        <member name="M:SixLabors.DebugGuard.IsTrue(System.Boolean,System.String,System.String)">
            <summary>
            Verifies, that the method parameter with specified target value is true
            and throws an exception if it is found to be so.
            </summary>
            <param name="target">The target value, which cannot be false.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <param name="message">The error message, if any to add to the exception.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="target"/> is false.
            </exception>
        </member>
        <member name="M:SixLabors.DebugGuard.IsFalse(System.Boolean,System.String,System.String)">
            <summary>
            Verifies, that the method parameter with specified target value is false
            and throws an exception if it is found to be so.
            </summary>
            <param name="target">The target value, which cannot be true.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <param name="message">The error message, if any to add to the exception.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="target"/> is true.
            </exception>
        </member>
        <member name="M:SixLabors.DebugGuard.MustBeSizedAtLeast``1(System.ReadOnlySpan{``0},System.Int32,System.String)">
            <summary>
            Verifies, that the `source` span has the length of 'minLength', or longer.
            </summary>
            <typeparam name="T">The element type of the spans.</typeparam>
            <param name="source">The source span.</param>
            <param name="minLength">The minimum length.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="source"/> has less than <paramref name="minLength"/> items.
            </exception>
        </member>
        <member name="M:SixLabors.DebugGuard.MustBeSizedAtLeast``1(System.Span{``0},System.Int32,System.String)">
            <summary>
            Verifies, that the `source` span has the length of 'minLength', or longer.
            </summary>
            <typeparam name="T">The element type of the spans.</typeparam>
            <param name="source">The target span.</param>
            <param name="minLength">The minimum length.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="source"/> has less than <paramref name="minLength"/> items.
            </exception>
        </member>
        <member name="M:SixLabors.DebugGuard.DestinationShouldNotBeTooShort``2(System.ReadOnlySpan{``0},System.Span{``1},System.String)">
            <summary>
            Verifies that the 'destination' span is not shorter than 'source'.
            </summary>
            <typeparam name="TSource">The source element type.</typeparam>
            <typeparam name="TDest">The destination element type.</typeparam>
            <param name="source">The source span.</param>
            <param name="destination">The destination span.</param>
            <param name="destinationParamName">The name of the argument for 'destination'.</param>
        </member>
        <member name="M:SixLabors.DebugGuard.DestinationShouldNotBeTooShort``2(System.Span{``0},System.Span{``1},System.String)">
            <summary>
            Verifies that the 'destination' span is not shorter than 'source'.
            </summary>
            <typeparam name="TSource">The source element type.</typeparam>
            <typeparam name="TDest">The destination element type.</typeparam>
            <param name="source">The source span.</param>
            <param name="destination">The destination span.</param>
            <param name="destinationParamName">The name of the argument for 'destination'.</param>
        </member>
        <member name="T:SixLabors.Guard">
            <summary>
            Provides methods to protect against invalid parameters.
            </summary>
            <summary>
            Provides methods to protect against invalid parameters.
            </summary>
        </member>
        <member name="M:SixLabors.Guard.NotNull``1(``0,System.String)">
            <summary>
            Ensures that the value is not null.
            </summary>
            <param name="value">The target object, which cannot be null.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <typeparam name="TValue">The type of the value.</typeparam>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null.</exception>
        </member>
        <member name="M:SixLabors.Guard.NotNullOrWhiteSpace(System.String,System.String)">
            <summary>
            Ensures that the target value is not null, empty, or whitespace.
            </summary>
            <param name="value">The target string, which should be checked against being null or empty.</param>
            <param name="parameterName">Name of the parameter.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="value"/> is empty or contains only blanks.</exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeLessThan``1(``0,``0,System.String)">
            <summary>
            Ensures that the specified value is less than a maximum value.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="max">The maximum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <typeparam name="TValue">The type of the value.</typeparam>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is greater than the maximum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeLessThanOrEqualTo``1(``0,``0,System.String)">
            <summary>
            Verifies that the specified value is less than or equal to a maximum value
            and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="max">The maximum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <typeparam name="TValue">The type of the value.</typeparam>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is greater than the maximum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeGreaterThan``1(``0,``0,System.String)">
            <summary>
            Verifies that the specified value is greater than a minimum value
            and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="min">The minimum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <typeparam name="TValue">The type of the value.</typeparam>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is less than the minimum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeGreaterThanOrEqualTo``1(``0,``0,System.String)">
            <summary>
            Verifies that the specified value is greater than or equal to a minimum value
            and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="min">The minimum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <typeparam name="TValue">The type of the value.</typeparam>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is less than the minimum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeBetweenOrEqualTo``1(``0,``0,``0,System.String)">
            <summary>
            Verifies that the specified value is greater than or equal to a minimum value and less than
            or equal to a maximum value and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <typeparam name="TValue">The type of the value.</typeparam>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is less than the minimum value of greater than the maximum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.IsTrue(System.Boolean,System.String,System.String)">
            <summary>
            Verifies, that the method parameter with specified target value is true
            and throws an exception if it is found to be so.
            </summary>
            <param name="target">The target value, which cannot be false.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <param name="message">The error message, if any to add to the exception.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="target"/> is false.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.IsFalse(System.Boolean,System.String,System.String)">
            <summary>
            Verifies, that the method parameter with specified target value is false
            and throws an exception if it is found to be so.
            </summary>
            <param name="target">The target value, which cannot be true.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <param name="message">The error message, if any to add to the exception.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="target"/> is true.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeSizedAtLeast``1(System.ReadOnlySpan{``0},System.Int32,System.String)">
            <summary>
            Verifies, that the `source` span has the length of 'minLength', or longer.
            </summary>
            <typeparam name="T">The element type of the spans.</typeparam>
            <param name="source">The source span.</param>
            <param name="minLength">The minimum length.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="source"/> has less than <paramref name="minLength"/> items.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeSizedAtLeast``1(System.Span{``0},System.Int32,System.String)">
            <summary>
            Verifies, that the `source` span has the length of 'minLength', or longer.
            </summary>
            <typeparam name="T">The element type of the spans.</typeparam>
            <param name="source">The target span.</param>
            <param name="minLength">The minimum length.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="source"/> has less than <paramref name="minLength"/> items.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.DestinationShouldNotBeTooShort``2(System.ReadOnlySpan{``0},System.Span{``1},System.String)">
            <summary>
            Verifies that the 'destination' span is not shorter than 'source'.
            </summary>
            <typeparam name="TSource">The source element type.</typeparam>
            <typeparam name="TDest">The destination element type.</typeparam>
            <param name="source">The source span.</param>
            <param name="destination">The destination span.</param>
            <param name="destinationParamName">The name of the argument for 'destination'.</param>
        </member>
        <member name="M:SixLabors.Guard.DestinationShouldNotBeTooShort``2(System.Span{``0},System.Span{``1},System.String)">
            <summary>
            Verifies that the 'destination' span is not shorter than 'source'.
            </summary>
            <typeparam name="TSource">The source element type.</typeparam>
            <typeparam name="TDest">The destination element type.</typeparam>
            <param name="source">The source span.</param>
            <param name="destination">The destination span.</param>
            <param name="destinationParamName">The name of the argument for 'destination'.</param>
        </member>
        <member name="M:SixLabors.Guard.MustBeLessThan(System.Byte,System.Byte,System.String)">
            <summary>
            Ensures that the specified value is less than a maximum value.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="max">The maximum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is greater than the maximum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeLessThanOrEqualTo(System.Byte,System.Byte,System.String)">
            <summary>
            Verifies that the specified value is less than or equal to a maximum value
            and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="max">The maximum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is greater than the maximum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeGreaterThan(System.Byte,System.Byte,System.String)">
            <summary>
            Verifies that the specified value is greater than a minimum value
            and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="min">The minimum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is less than the minimum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeGreaterThanOrEqualTo(System.Byte,System.Byte,System.String)">
            <summary>
            Verifies that the specified value is greater than or equal to a minimum value
            and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="min">The minimum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is less than the minimum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeBetweenOrEqualTo(System.Byte,System.Byte,System.Byte,System.String)">
            <summary>
            Verifies that the specified value is greater than or equal to a minimum value and less than
            or equal to a maximum value and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is less than the minimum value of greater than the maximum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeLessThan(System.SByte,System.SByte,System.String)">
            <summary>
            Ensures that the specified value is less than a maximum value.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="max">The maximum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is greater than the maximum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeLessThanOrEqualTo(System.SByte,System.SByte,System.String)">
            <summary>
            Verifies that the specified value is less than or equal to a maximum value
            and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="max">The maximum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is greater than the maximum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeGreaterThan(System.SByte,System.SByte,System.String)">
            <summary>
            Verifies that the specified value is greater than a minimum value
            and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="min">The minimum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is less than the minimum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeGreaterThanOrEqualTo(System.SByte,System.SByte,System.String)">
            <summary>
            Verifies that the specified value is greater than or equal to a minimum value
            and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="min">The minimum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is less than the minimum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeBetweenOrEqualTo(System.SByte,System.SByte,System.SByte,System.String)">
            <summary>
            Verifies that the specified value is greater than or equal to a minimum value and less than
            or equal to a maximum value and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is less than the minimum value of greater than the maximum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeLessThan(System.Int16,System.Int16,System.String)">
            <summary>
            Ensures that the specified value is less than a maximum value.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="max">The maximum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is greater than the maximum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeLessThanOrEqualTo(System.Int16,System.Int16,System.String)">
            <summary>
            Verifies that the specified value is less than or equal to a maximum value
            and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="max">The maximum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is greater than the maximum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeGreaterThan(System.Int16,System.Int16,System.String)">
            <summary>
            Verifies that the specified value is greater than a minimum value
            and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="min">The minimum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is less than the minimum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeGreaterThanOrEqualTo(System.Int16,System.Int16,System.String)">
            <summary>
            Verifies that the specified value is greater than or equal to a minimum value
            and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="min">The minimum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is less than the minimum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeBetweenOrEqualTo(System.Int16,System.Int16,System.Int16,System.String)">
            <summary>
            Verifies that the specified value is greater than or equal to a minimum value and less than
            or equal to a maximum value and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is less than the minimum value of greater than the maximum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeLessThan(System.UInt16,System.UInt16,System.String)">
            <summary>
            Ensures that the specified value is less than a maximum value.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="max">The maximum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is greater than the maximum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeLessThanOrEqualTo(System.UInt16,System.UInt16,System.String)">
            <summary>
            Verifies that the specified value is less than or equal to a maximum value
            and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="max">The maximum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is greater than the maximum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeGreaterThan(System.UInt16,System.UInt16,System.String)">
            <summary>
            Verifies that the specified value is greater than a minimum value
            and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="min">The minimum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is less than the minimum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeGreaterThanOrEqualTo(System.UInt16,System.UInt16,System.String)">
            <summary>
            Verifies that the specified value is greater than or equal to a minimum value
            and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="min">The minimum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is less than the minimum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeBetweenOrEqualTo(System.UInt16,System.UInt16,System.UInt16,System.String)">
            <summary>
            Verifies that the specified value is greater than or equal to a minimum value and less than
            or equal to a maximum value and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is less than the minimum value of greater than the maximum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeLessThan(System.Char,System.Char,System.String)">
            <summary>
            Ensures that the specified value is less than a maximum value.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="max">The maximum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is greater than the maximum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeLessThanOrEqualTo(System.Char,System.Char,System.String)">
            <summary>
            Verifies that the specified value is less than or equal to a maximum value
            and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="max">The maximum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is greater than the maximum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeGreaterThan(System.Char,System.Char,System.String)">
            <summary>
            Verifies that the specified value is greater than a minimum value
            and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="min">The minimum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is less than the minimum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeGreaterThanOrEqualTo(System.Char,System.Char,System.String)">
            <summary>
            Verifies that the specified value is greater than or equal to a minimum value
            and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="min">The minimum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is less than the minimum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeBetweenOrEqualTo(System.Char,System.Char,System.Char,System.String)">
            <summary>
            Verifies that the specified value is greater than or equal to a minimum value and less than
            or equal to a maximum value and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is less than the minimum value of greater than the maximum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeLessThan(System.Int32,System.Int32,System.String)">
            <summary>
            Ensures that the specified value is less than a maximum value.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="max">The maximum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is greater than the maximum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeLessThanOrEqualTo(System.Int32,System.Int32,System.String)">
            <summary>
            Verifies that the specified value is less than or equal to a maximum value
            and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="max">The maximum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is greater than the maximum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeGreaterThan(System.Int32,System.Int32,System.String)">
            <summary>
            Verifies that the specified value is greater than a minimum value
            and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="min">The minimum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is less than the minimum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeGreaterThanOrEqualTo(System.Int32,System.Int32,System.String)">
            <summary>
            Verifies that the specified value is greater than or equal to a minimum value
            and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="min">The minimum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is less than the minimum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeBetweenOrEqualTo(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Verifies that the specified value is greater than or equal to a minimum value and less than
            or equal to a maximum value and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is less than the minimum value of greater than the maximum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeLessThan(System.UInt32,System.UInt32,System.String)">
            <summary>
            Ensures that the specified value is less than a maximum value.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="max">The maximum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is greater than the maximum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeLessThanOrEqualTo(System.UInt32,System.UInt32,System.String)">
            <summary>
            Verifies that the specified value is less than or equal to a maximum value
            and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="max">The maximum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is greater than the maximum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeGreaterThan(System.UInt32,System.UInt32,System.String)">
            <summary>
            Verifies that the specified value is greater than a minimum value
            and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="min">The minimum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is less than the minimum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeGreaterThanOrEqualTo(System.UInt32,System.UInt32,System.String)">
            <summary>
            Verifies that the specified value is greater than or equal to a minimum value
            and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="min">The minimum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is less than the minimum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeBetweenOrEqualTo(System.UInt32,System.UInt32,System.UInt32,System.String)">
            <summary>
            Verifies that the specified value is greater than or equal to a minimum value and less than
            or equal to a maximum value and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is less than the minimum value of greater than the maximum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeLessThan(System.Single,System.Single,System.String)">
            <summary>
            Ensures that the specified value is less than a maximum value.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="max">The maximum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is greater than the maximum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeLessThanOrEqualTo(System.Single,System.Single,System.String)">
            <summary>
            Verifies that the specified value is less than or equal to a maximum value
            and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="max">The maximum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is greater than the maximum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeGreaterThan(System.Single,System.Single,System.String)">
            <summary>
            Verifies that the specified value is greater than a minimum value
            and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="min">The minimum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is less than the minimum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeGreaterThanOrEqualTo(System.Single,System.Single,System.String)">
            <summary>
            Verifies that the specified value is greater than or equal to a minimum value
            and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="min">The minimum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is less than the minimum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeBetweenOrEqualTo(System.Single,System.Single,System.Single,System.String)">
            <summary>
            Verifies that the specified value is greater than or equal to a minimum value and less than
            or equal to a maximum value and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is less than the minimum value of greater than the maximum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeLessThan(System.Int64,System.Int64,System.String)">
            <summary>
            Ensures that the specified value is less than a maximum value.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="max">The maximum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is greater than the maximum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeLessThanOrEqualTo(System.Int64,System.Int64,System.String)">
            <summary>
            Verifies that the specified value is less than or equal to a maximum value
            and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="max">The maximum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is greater than the maximum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeGreaterThan(System.Int64,System.Int64,System.String)">
            <summary>
            Verifies that the specified value is greater than a minimum value
            and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="min">The minimum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is less than the minimum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeGreaterThanOrEqualTo(System.Int64,System.Int64,System.String)">
            <summary>
            Verifies that the specified value is greater than or equal to a minimum value
            and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="min">The minimum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is less than the minimum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeBetweenOrEqualTo(System.Int64,System.Int64,System.Int64,System.String)">
            <summary>
            Verifies that the specified value is greater than or equal to a minimum value and less than
            or equal to a maximum value and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is less than the minimum value of greater than the maximum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeLessThan(System.UInt64,System.UInt64,System.String)">
            <summary>
            Ensures that the specified value is less than a maximum value.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="max">The maximum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is greater than the maximum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeLessThanOrEqualTo(System.UInt64,System.UInt64,System.String)">
            <summary>
            Verifies that the specified value is less than or equal to a maximum value
            and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="max">The maximum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is greater than the maximum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeGreaterThan(System.UInt64,System.UInt64,System.String)">
            <summary>
            Verifies that the specified value is greater than a minimum value
            and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="min">The minimum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is less than the minimum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeGreaterThanOrEqualTo(System.UInt64,System.UInt64,System.String)">
            <summary>
            Verifies that the specified value is greater than or equal to a minimum value
            and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="min">The minimum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is less than the minimum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeBetweenOrEqualTo(System.UInt64,System.UInt64,System.UInt64,System.String)">
            <summary>
            Verifies that the specified value is greater than or equal to a minimum value and less than
            or equal to a maximum value and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is less than the minimum value of greater than the maximum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeLessThan(System.Double,System.Double,System.String)">
            <summary>
            Ensures that the specified value is less than a maximum value.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="max">The maximum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is greater than the maximum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeLessThanOrEqualTo(System.Double,System.Double,System.String)">
            <summary>
            Verifies that the specified value is less than or equal to a maximum value
            and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="max">The maximum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is greater than the maximum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeGreaterThan(System.Double,System.Double,System.String)">
            <summary>
            Verifies that the specified value is greater than a minimum value
            and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="min">The minimum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is less than the minimum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeGreaterThanOrEqualTo(System.Double,System.Double,System.String)">
            <summary>
            Verifies that the specified value is greater than or equal to a minimum value
            and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="min">The minimum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is less than the minimum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeBetweenOrEqualTo(System.Double,System.Double,System.Double,System.String)">
            <summary>
            Verifies that the specified value is greater than or equal to a minimum value and less than
            or equal to a maximum value and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is less than the minimum value of greater than the maximum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeLessThan(System.Decimal,System.Decimal,System.String)">
            <summary>
            Ensures that the specified value is less than a maximum value.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="max">The maximum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is greater than the maximum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeLessThanOrEqualTo(System.Decimal,System.Decimal,System.String)">
            <summary>
            Verifies that the specified value is less than or equal to a maximum value
            and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="max">The maximum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is greater than the maximum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeGreaterThan(System.Decimal,System.Decimal,System.String)">
            <summary>
            Verifies that the specified value is greater than a minimum value
            and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="min">The minimum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is less than the minimum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeGreaterThanOrEqualTo(System.Decimal,System.Decimal,System.String)">
            <summary>
            Verifies that the specified value is greater than or equal to a minimum value
            and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="min">The minimum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is less than the minimum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeBetweenOrEqualTo(System.Decimal,System.Decimal,System.Decimal,System.String)">
            <summary>
            Verifies that the specified value is greater than or equal to a minimum value and less than
            or equal to a maximum value and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is less than the minimum value of greater than the maximum value.
            </exception>
        </member>
        <member name="T:SixLabors.ThrowHelper">
            <summary>
            Helper methods to throw exceptions
            </summary>
        </member>
        <member name="M:SixLabors.ThrowHelper.ThrowArgumentNullExceptionForNotNull(System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> when <see cref="M:SixLabors.Guard.NotNull``1(``0,System.String)"/> fails.
            </summary>
        </member>
        <member name="M:SixLabors.ThrowHelper.ThrowArgumentExceptionForNotNullOrWhitespace(System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:SixLabors.Guard.NotNullOrWhiteSpace(System.String,System.String)"/> fails.
            </summary>
        </member>
        <member name="M:SixLabors.ThrowHelper.ThrowArgumentOutOfRangeExceptionForMustBeLessThan``1(``0,``0,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> when <see cref="M:SixLabors.Guard.MustBeLessThan``1(``0,``0,System.String)"/> fails.
            </summary>
        </member>
        <member name="M:SixLabors.ThrowHelper.ThrowArgumentOutOfRangeExceptionForMustBeLessThanOrEqualTo``1(``0,``0,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> when <see cref="M:SixLabors.Guard.MustBeLessThanOrEqualTo``1(``0,``0,System.String)"/> fails.
            </summary>
        </member>
        <member name="M:SixLabors.ThrowHelper.ThrowArgumentOutOfRangeExceptionForMustBeGreaterThan``1(``0,``0,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> when <see cref="M:SixLabors.Guard.MustBeGreaterThan``1(``0,``0,System.String)"/> fails.
            </summary>
        </member>
        <member name="M:SixLabors.ThrowHelper.ThrowArgumentOutOfRangeExceptionForMustBeGreaterThanOrEqualTo``1(``0,``0,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> when <see cref="M:SixLabors.Guard.MustBeGreaterThanOrEqualTo``1(``0,``0,System.String)"/> fails.
            </summary>
        </member>
        <member name="M:SixLabors.ThrowHelper.ThrowArgumentOutOfRangeExceptionForMustBeBetweenOrEqualTo``1(``0,``0,``0,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> when <see cref="M:SixLabors.Guard.MustBeBetweenOrEqualTo``1(``0,``0,``0,System.String)"/> fails.
            </summary>
        </member>
        <member name="M:SixLabors.ThrowHelper.ThrowArgumentOutOfRangeExceptionForMustBeSizedAtLeast(System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:SixLabors.Guard.MustBeSizedAtLeast``1(System.ReadOnlySpan{``0},System.Int32,System.String)"/> fails.
            </summary>
        </member>
        <member name="M:SixLabors.ThrowHelper.ThrowArgumentException(System.String,System.String)">
            <summary>
            Throws a new <see cref="T:System.ArgumentException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <param name="name">The argument name.</param>
            <exception cref="T:System.ArgumentException">Thrown with <paramref name="message"/> and <paramref name="name"/>.</exception>
        </member>
        <member name="M:SixLabors.ThrowHelper.ThrowArgumentNullException(System.String,System.String)">
            <summary>
            Throws a new <see cref="T:System.ArgumentNullException"/>.
            </summary>
            <param name="name">The argument name.</param>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.ArgumentNullException">Thrown with <paramref name="name"/> and <paramref name="message"/>.</exception>
        </member>
        <member name="M:SixLabors.ThrowHelper.ThrowArgumentOutOfRangeException(System.String,System.String)">
            <summary>
            Throws a new <see cref="T:System.ArgumentOutOfRangeException"/>.
            </summary>
            <param name="name">The argument name.</param>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown with <paramref name="name"/> and <paramref name="message"/>.</exception>
        </member>
    </members>
</doc>
