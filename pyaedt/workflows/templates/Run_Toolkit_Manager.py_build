# Copyright (C) 2023 - 2024 ANSYS, Inc. and/or its affiliates.
# SPDX-License-Identifier: MIT
#
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

"""
* * * This script is meant to run in IronPython within AEDT. * * *
The script provides for choosing the Python script to execute.

It looks for a reference to a Python interpreter in the ``python_interpreter.bat`` file.

It then uses this Python interpreter to execute the script.
See the declaration of the command variable to see the order in which arguments are passed to the script.

The commands allow the launched script to still reference the project and design that was active when the script
was launched as well as the AEDT instance that has them open.

"""
import os
import sys

from System.Windows.Forms import MessageBox
from System.Windows.Forms import MessageBoxButtons
from System.Windows.Forms import MessageBoxIcon
from System.Windows.Forms import OpenFileDialog

is_linux = os.name == "posix"
script_name = os.path.splitext(os.path.basename(__file__))[0]

if is_linux:
    import subprocessdotnet as subprocess
else:
    import subprocess


def main():
    try:
        version = oDesktop.GetVersion()[2:6].replace(".", "")
        # launch toolkit manager
        python_exe = r"##PYTHON_EXE##" % version
        current_dir = os.path.dirname(os.path.abspath(os.path.realpath(__file__)))
        pyaedt_toolkit_dir = os.path.normpath(os.path.join(current_dir, r"##TOOLKIT_REL_LIB_DIR##"))
        pyaedt_script = os.path.join(pyaedt_toolkit_dir, "toolkit_manager.py")
        python_exe = check_interpreter(python_exe, version)
        python_exe_flag = check_file(python_exe)
        if not python_exe_flag:
            return
        pyaedt_script_flag = check_file(pyaedt_script)
        if not pyaedt_script_flag:
            return
        os.environ["PYAEDT_SCRIPT_PROCESS_ID"] = str(oDesktop.GetProcessID())
        os.environ["PYAEDT_SCRIPT_VERSION"] = version
        if "Ansys Student" in str(oDesktop.GetExeDir()):
            os.environ["PYAEDT_STUDENT_VERSION"] = "True"
        else:
            os.environ["PYAEDT_STUDENT_VERSION"] = "False"
        if version > "231":
            os.environ["PYAEDT_SCRIPT_PORT"] = str(oDesktop.GetGrpcServerPort())
        else:
            os.environ["PYAEDT_SCRIPT_PORT"] = str(0)

        if is_linux:
            edt_root = os.path.normpath(oDesktop.GetExeDir())
            os.environ["ANSYSEM_ROOT{}".format(version)] = edt_root
            ld_library_path_dirs_to_add = [
                "{}/commonfiles/CPython/3_7/linx64/Release/python/lib".format(edt_root),
                "{}/commonfiles/CPython/3_10/linx64/Release/python/lib".format(edt_root),
                "{}/common/mono/Linux64/lib64".format(edt_root),
                "{}/Delcross".format(edt_root),
                "{}".format(edt_root),
            ]
            os.environ["LD_LIBRARY_PATH"] = ":".join(ld_library_path_dirs_to_add) + ":" + os.getenv(
                "LD_LIBRARY_PATH", "")
            command = [
                python_exe,
                pyaedt_script,
            ]
            my_env = os.environ.copy()
            subprocess.Popen(command, env=my_env, stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE)
        else:
            command = [
                '"{}"'.format(python_exe),
                '"{}"'.format(pyaedt_script),
            ]
            my_env = os.environ.copy()
            subprocess.Popen(" ".join(command), env=my_env, stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE, shell=True)
    except Exception as e:
        show_error(str(e))


def check_file(file_path):
    if not os.path.isfile(file_path):
        show_error(
            '"{}" does not exist. Install PyAEDT using the Python script installer from the PyAEDT documentation.'.
            format(file_path))
        return False
    return True


def show_error(msg):
    oDesktop.AddMessage("", "", 2, str(msg))
    MessageBox.Show(str(msg), "Error", MessageBoxButtons.OK, MessageBoxIcon.Error)
    sys.exit()


def check_interpreter(interpreter_path, version):
    python_version = "3_10" if version > "231" else "3_7"
    if version > "231" and python_version not in interpreter_path:
        interpreter_path = interpreter_path.replace("3_7", "3_10")
    elif version <= "231" and python_version not in interpreter_path:
        interpreter_path = interpreter_path.replace("3_10", "3_7")
    return interpreter_path


def debug(msg):
    print("[debug] {}: {}".format(script_name, str(msg)))
    LogDebug("{}: {}\n".format(script_name, str(msg)))


if __name__ == "__main__":
    main()
