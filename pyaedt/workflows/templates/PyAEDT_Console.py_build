# Copyright (C) 2023 - 2024 ANSYS, Inc. and/or its affiliates.
# SPDX-License-Identifier: MIT
#
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

"""
* * * This script is meant to run in IronPython within AEDT. * * *

It looks for a reference to a Python interpreter in the ``python_interpreter.bat`` file.

This script executes the CPython script ``Lib/console_setup.py``.
The ``console_setup.py`` script sets up the HFSS variable based on the command line arguments and kicks off an
interactive Python session.

"""
import os
import sys

from System.Windows.Forms import MessageBox
from System.Windows.Forms import MessageBoxButtons
from System.Windows.Forms import MessageBoxIcon

is_linux = os.name == "posix"

if is_linux:
    import subprocessdotnet as subprocess
else:
    import subprocess


def main():
    # Launch file
    version = oDesktop.GetVersion()[2:6].replace(".", "")
    current_dir = os.path.dirname(os.path.abspath(os.path.realpath(__file__)))
    pyaedt_toolkit_dir = os.path.normpath(os.path.join(current_dir, r"##TOOLKIT_REL_LIB_DIR##"))
    python_exe = r"##IPYTHON_EXE##" % version
    python_exe = check_interpreter(python_exe, version)
    pyaedt_script = os.path.join(pyaedt_toolkit_dir, "console_setup.py")
    python_exe_flag = check_file(python_exe)
    if not python_exe_flag:
        return
    pyaedt_script_flag = check_file(pyaedt_script)
    if not pyaedt_script_flag:
        return
    if is_linux:
        term = get_linux_terminal()
        if not term:
            show_error("No Terminals found.")
        edt_root = os.path.normpath(oDesktop.GetExeDir())
        os.environ["ANSYSEM_ROOT{}".format(version)] = edt_root
        ld_library_path_dirs_to_add = [
            "{}/commonfiles/CPython/3_7/linx64/Release/python/lib".format(edt_root),
            "{}/commonfiles/CPython/3_10/linx64/Release/python/lib".format(edt_root),
            "{}/common/mono/Linux64/lib64".format(edt_root),
            "{}/Delcross".format(edt_root),
            "{}".format(edt_root),
        ]
        os.environ["LD_LIBRARY_PATH"] = ":".join(ld_library_path_dirs_to_add) + ":" + os.getenv("LD_LIBRARY_PATH", "")

        command = [
            term,
            "-e",
            python_exe,
            "-i",
            pyaedt_script,
            str(oDesktop.GetProcessID()),
            str(oDesktop.GetVersion()[:6]),
        ]
        subprocess.Popen(command)
    else:
        command = [
            '"{}"'.format(python_exe),
            "-i",
            '"{}"'.format(pyaedt_script),
            str(oDesktop.GetProcessID()),
            str(oDesktop.GetVersion()[:6]),
        ]
        subprocess.Popen(" ".join(command))


def get_linux_terminal():
    for terminal in ["x-terminal-emulator", "konsole", "xterm", "gnome-terminal", "lxterminal", "mlterm"]:
        term = which(terminal)
        if term:
            return term
    return None


def which(program):
    # http://stackoverflow.com/a/377028
    def is_exe(fpath):
        return os.path.isfile(fpath) and os.access(fpath, os.X_OK)

    fpath, fname = os.path.split(program)
    if fpath:
        if is_exe(program):
            return program
    else:
        for path in os.environ["PATH"].split(os.pathsep):
            path = path.strip('"')
            exe_file = os.path.join(path, program)
            if is_exe(exe_file):
                return exe_file

    return None


def check_file(file_path):
    if not os.path.isfile(file_path):
        show_error(
            '"{}" does not exist. Install PyAEDT using the Python script installer from the PyAEDT documentation.'.
            format(file_path))
        return False
    return True


def show_error(msg):
    oDesktop.AddMessage("", "", 2, str(msg))
    MessageBox.Show(str(msg), "Error", MessageBoxButtons.OK, MessageBoxIcon.Error)
    sys.exit()


def check_interpreter(interpreter_path, version):
    python_version = "3_10" if version > "231" else "3_7"
    if version > "231" and python_version not in interpreter_path:
        interpreter_path = interpreter_path.replace("3_7", "3_10")
    elif version <= "231" and python_version not in interpreter_path:
        interpreter_path = interpreter_path.replace("3_10", "3_7")
    return interpreter_path


if __name__ == "__main__":
    main()
