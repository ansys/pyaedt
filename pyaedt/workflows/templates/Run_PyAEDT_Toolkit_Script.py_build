# -*- coding: utf-8 -*-
"""
* * * This script is meant to run in IronPython within AEDT. * * *
The script provides for choosing the Python script to execute.

It looks for a reference to a Python interpreter in the ``python_interpreter.bat`` file.

It then uses this Python interpreter to execute the script.
See the declaration of the command variable to see the order in which arguments are passed to the script.

The commands allow the launched script to still reference the project and design that was active when the script
was launched as well as the AEDT instance that has them open.

"""
import os
import sys

from System.Windows.Forms import MessageBox
from System.Windows.Forms import MessageBoxButtons
from System.Windows.Forms import MessageBoxIcon

is_linux = os.name == "posix"
script_name = os.path.splitext(os.path.basename(__file__))[0]


def main():
    try:
        oDesktop.AddMessage("", "", 0, "Toolkit launched. Please wait.")
        # launch file
        python_exe = r"##PYTHON_EXE##"
        pyaedt_script = r"##PYTHON_SCRIPT##"
        check_file(python_exe)
        check_file(pyaedt_script)
        os.environ["PYAEDT_SCRIPT_PROCESS_ID"] = str(oDesktop.GetProcessID())
        version = str(oDesktop.GetVersion()[:6])
        os.environ["PYAEDT_SCRIPT_VERSION"] = version
        if version > "2022.2":
            os.environ["PYAEDT_SCRIPT_PORT"] = str(oDesktop.GetGrpcServerPort())
        if is_linux:
            term = get_linux_terminal()
            if term is None:
                oDesktop.AddMessage("", "", 0, "Error: No xterm found.  Unable to start Toolkit.")
                return False
            edt_root = os.path.normpath(oDesktop.GetExeDir())
            os.environ["ANSYSEM_ROOT{}".format(version)] = edt_root
            ld_library_path_dirs_to_add = [
                "{}/commonfiles/CPython/3_7/linx64/Release/python/lib".format(edt_root),
                "{}/commonfiles/CPython/3_10/linx64/Release/python/lib".format(edt_root),
                "{}/common/mono/Linux64/lib64".format(edt_root),
                "{}/Delcross".format(edt_root),
                "{}".format(edt_root),
            ]
            os.environ["LD_LIBRARY_PATH"] = ":".join(ld_library_path_dirs_to_add) + ":" + os.getenv(
                "LD_LIBRARY_PATH", "")
            os.environ["TCL_LIBRARY"] = os.path.join("{}/commonfiles/CPython/3_7/linx64/Release/python/lib".format(edt_root), "tcl8.5")
            os.environ["TK_LIBRARY"] = os.path.join("{}/commonfiles/CPython/3_7/linx64/Release/python/lib".format(edt_root), "tk8.5")
            os.environ["TKPATH"] = os.path.join("{}/commonfiles/CPython/3_7/linx64/Release/python/lib".format(edt_root), "tk8.5")
            my_env = dict(os.environ.copy())
            cmds = ['-hold', '-e', python_exe, '"{}"'.format(pyaedt_script)]
            os.spawnve(os.P_NOWAIT, term, cmds, my_env)
        else:
            toolkit_name = r"##TOOLKIT_NAME##"
            runme = "run_pyaedt_toolkit_{0}.cmd".format(toolkit_name)
            edt_temp = oDesktop.GetTempDirectory()
            cmd = '"{0}"'.format(pyaedt_script)
            target = os.path.join(edt_temp, runme)
            my_env = dict(os.environ.copy())
            with open(target, 'w') as cmdfile:
                for env in my_env:
                    cmdfile.write('SET {0}={1}\n'.format(env, my_env[env]))
                cmdfile.write('"{0}" {1}\n'.format(python_exe, cmd))
            oDesktop.RunProgram(runme, edt_temp, edt_temp, "")
    except Exception as e:
        show_error(str(e))

def get_linux_terminal():
    if is_linux:
        for terminal in ["xterm"]:
            term = which(terminal)
            if term:
                return term
    return None


def check_file(file_path):
    if not os.path.isfile(file_path):
        show_error('"{}" does not exist.'.format(
            file_path))


def show_error(msg):
    oDesktop.AddMessage("", "", 2, str(msg))
    MessageBox.Show(str(msg), "Error", MessageBoxButtons.OK, MessageBoxIcon.Error)
    sys.exit()


def which(program):
    # http://stackoverflow.com/a/377028
    def is_exe(fpath):
        return os.path.isfile(fpath) and os.access(fpath, os.X_OK)

    fpath, fname = os.path.split(program)
    if fpath:
        if is_exe(program):
            return program
    else:
        for path in os.environ["PATH"].split(os.pathsep):
            path = path.strip('"')
            exe_file = os.path.join(path, program)
            if is_exe(exe_file):
                return exe_file
    return None

if __name__ == "__main__":
    main()
