# -*- coding: utf-8 -*-
"""
* * * This script is meant to run in IronPython within AEDT. * * *
The script provides for choosing the Python script to execute.

It looks for a reference to a Python interpreter in the ``python_interpreter.bat`` file.

It then uses this Python interpreter to execute the script.
See the declaration of the command variable to see the order in which arguments are passed to the script.

The commands allow the launched script to still reference the project and design that was active when the script
was launched as well as the AEDT instance that has them open.

"""
import os
import sys

from System.Windows.Forms import MessageBox
from System.Windows.Forms import MessageBoxButtons
from System.Windows.Forms import MessageBoxIcon

is_linux = os.name == "posix"
script_name = os.path.splitext(os.path.basename(__file__))[0]

if is_linux:
    import subprocessdotnet as subprocess


def main():
    try:
        version = oDesktop.GetVersion()[2:6].replace(".", "")
        oDesktop.AddMessage("", "", 0, "Toolkit launched. Please wait.")
        # launch file
        python_exe = r"##PYTHON_EXE##"
        pyaedt_script = r"##PYTHON_SCRIPT##"
        python_exe = check_interpreter(python_exe, version)
        python_exe_flag = check_file(python_exe)
        if not python_exe_flag:
            return
        pyaedt_script_flag = check_file(pyaedt_script)
        if not pyaedt_script_flag:
            return
        os.environ["PYAEDT_SCRIPT_PROCESS_ID"] = str(oDesktop.GetProcessID())
        version = str(oDesktop.GetVersion()[:6])
        os.environ["PYAEDT_SCRIPT_VERSION"] = version
        if version > "2023.1":
            os.environ["PYAEDT_SCRIPT_PORT"] = str(oDesktop.GetGrpcServerPort())
        else:
            os.environ["PYAEDT_SCRIPT_PORT"] = str(0)

        if is_linux:
            edt_root = os.path.normpath(oDesktop.GetExeDir())
            os.environ["ANSYSEM_ROOT{}".format(version)] = edt_root
            ld_library_path_dirs_to_add = [
                "{}/commonfiles/CPython/3_7/linx64/Release/python/lib".format(edt_root),
                "{}/commonfiles/CPython/3_10/linx64/Release/python/lib".format(edt_root),
                "{}/common/mono/Linux64/lib64".format(edt_root),
                "{}/Delcross".format(edt_root),
                "{}".format(edt_root),
            ]
            os.environ["LD_LIBRARY_PATH"] = ":".join(ld_library_path_dirs_to_add) + ":" + os.getenv(
                "LD_LIBRARY_PATH", "")

            if version > "2023.1":
                os.environ["TCL_LIBRARY"] = os.path.join("{}/commonfiles/CPython/3_10/linx64/Release/python/lib".format(edt_root), "tcl8.5")
                os.environ["TK_LIBRARY"] = os.path.join("{}/commonfiles/CPython/3_10/linx64/Release/python/lib".format(edt_root), "tk8.5")
                os.environ["TKPATH"] = os.path.join("{}/commonfiles/CPython/3_10/linx64/Release/python/lib".format(edt_root), "tk8.5")
            else:
                os.environ["TCL_LIBRARY"] = os.path.join("{}/commonfiles/CPython/3_7/linx64/Release/python/lib".format(edt_root), "tcl8.5")
                os.environ["TK_LIBRARY"] = os.path.join("{}/commonfiles/CPython/3_7/linx64/Release/python/lib".format(edt_root), "tk8.5")
                os.environ["TKPATH"] = os.path.join("{}/commonfiles/CPython/3_7/linx64/Release/python/lib".format(edt_root), "tk8.5")

            my_env = dict(os.environ.copy())
            command = [python_exe, pyaedt_script]
            subprocess.Popen(command, env=my_env)
        else:
            toolkit_name = r"##TOOLKIT_NAME##"
            runme = "run_pyaedt_toolkit_{0}.cmd".format(toolkit_name)
            edt_temp = oDesktop.GetTempDirectory()
            cmd = '"{0}"'.format(pyaedt_script)
            target = os.path.join(edt_temp, runme)
            my_env = dict(os.environ.copy())
            with open(target, 'w') as cmdfile:
                for env in my_env:
                    cmdfile.write('SET {0}={1}\n'.format(env, my_env[env]))
                cmdfile.write('"{0}" {1}\n'.format(python_exe, cmd))
            oDesktop.RunProgram(runme, edt_temp, edt_temp, "")
    except Exception as e:
        show_error(str(e))


def check_file(file_path):
    if not os.path.isfile(file_path):
        show_error(
            '"{}" does not exist. Install PyAEDT using the Python script installer from the PyAEDT documentation.'.
            format(file_path))
        return False
    return True


def show_error(msg):
    oDesktop.AddMessage("", "", 2, str(msg))
    MessageBox.Show(str(msg), "Error", MessageBoxButtons.OK, MessageBoxIcon.Error)
    sys.exit()


def check_interpreter(interpreter_path, version):
    python_version = "3_10" if version > "231" else "3_7"
    if version > "231" and python_version not in interpreter_path:
        interpreter_path = interpreter_path.replace("3_7", "3_10")
    elif version <= "231" and python_version not in interpreter_path:
        interpreter_path = interpreter_path.replace("3_10", "3_7")
    return interpreter_path


if __name__ == "__main__":
    main()
