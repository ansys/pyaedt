# -*- coding: utf-8 -*-
"""
* * * This script launches a Jupyter Notebook. * * *

This script makes a copy of the referenced Jupyter Notebook script, ``Lib/jupyter_template.ipynb``, to the project
directory and launches it.

"""
import os
import random
import string
import sys

from System.Windows.Forms import MessageBox
from System.Windows.Forms import MessageBoxButtons
from System.Windows.Forms import MessageBoxIcon

is_linux = os.name == "posix"

if is_linux:
    import subprocessdotnet as subprocess
else:
    import subprocess


def main():
    # Launch file
    proj_dir = oDesktop.GetProjectDirectory()
    os.chdir(proj_dir)

    version = oDesktop.GetVersion()[2:6].replace(".", "")
    current_dir = os.path.dirname(os.path.abspath(os.path.realpath(__file__)))
    pyaedt_toolkit_dir = os.path.normpath(os.path.join(current_dir, r"##TOOLKIT_REL_LIB_DIR##"))
    jupyter_exe = r"##JUPYTER_EXE##" % version
    template = os.path.join(pyaedt_toolkit_dir, "jupyter_template.ipynb")
    target = os.path.join(proj_dir, generate_unique_name("pyaedt", ".ipynb", n=3))
    check_file(jupyter_exe)
    check_file(template)
    notebook_dir = os.environ.get("AEDT_NOTEBOOK_DIR",None)

    with open(template, "r") as source:
        with open(target, "w") as t:
            for line in source:
                line = line.replace("PROCESSID", str(oDesktop.GetProcessID())).replace(
                    "AEDTVERSION", oDesktop.GetVersion()[:6]
                )
                t.write(line)
    if is_linux:
        edt_root = os.path.normpath(oDesktop.GetExeDir())
        os.environ["ANSYSEM_ROOT{}".format(version)] = edt_root
        ld_library_path_dirs_to_add = [
            "{}/commonfiles/CPython/3_7/linx64/Release/python/lib".format(edt_root),
            "{}/commonfiles/CPython/3_10/linx64/Release/python/lib".format(edt_root),
            "{}/common/mono/Linux64/lib64".format(edt_root),
            "{}/Delcross".format(edt_root),
            "{}".format(edt_root),
        ]
        os.environ["LD_LIBRARY_PATH"] = ":".join(ld_library_path_dirs_to_add) + ":" + os.getenv("LD_LIBRARY_PATH", "")
        if notebook_dir:
            command = [jupyter_exe, "lab", target,"--notebook-dir",notebook_dir]
        else:
            command = [jupyter_exe, "lab", target]
        subprocess.Popen(command)
    else:
        if notebook_dir:
            command = ['"{}"'.format(jupyter_exe), "lab", '"{}"'.format(target),"--notebook-dir",'"{0}"'.format(notebook_dir)]
        else:
            command = ['"{}"'.format(jupyter_exe), "lab", '"{}"'.format(target)]
        subprocess.Popen(" ".join(command))


def generate_unique_name(rootname, suffix="", n=6):
    char_set = string.ascii_uppercase + string.digits
    unique_name = rootname + "_" + "".join(random.choice(char_set) for _ in range(n))
    if suffix:
        unique_name += suffix
    return unique_name


def check_file(file_path):
    if not os.path.isfile(file_path):
        show_error('"{}" does not exist. Please click on the "Install PyAEDT" button in the Automation ribbon.'.format(
            file_path))


def show_error(msg):
    oDesktop.AddMessage("", "", 2, str(msg))
    MessageBox.Show(str(msg), "Error", MessageBoxButtons.OK, MessageBoxIcon.Error)
    sys.exit()


if __name__ == "__main__":
    main()
