from ..EmitNode import *

class ReadOnlyTouchstoneCouplingNode(EmitNode):
    def __init__(self, oDesign, result_id, node_id):
        self._is_component = False
        EmitNode.__init__(self, oDesign, result_id, node_id)

    def __eq__(self, other):
      return ((self._result_id == other._result_id) and (self._node_id == other._node_id))

    @property
    def parent(self):
        """The parent of this emit node."""
        return self._parent

    @property
    def enabled(self) -> bool:
        """Enabled
        "Enable/Disable coupling."
        "Value should be 'true' or 'false'."
        """
        val = self._get_property('Enabled')
        return val

    @property
    def enable_refinement(self) -> bool:
        """Enable Refinement
        "Enables/disables refined sampling of the frequency domain.."
        "Value should be 'true' or 'false'."
        """
        val = self._get_property('Enable Refinement')
        return val

    @property
    def adaptive_sampling(self) -> bool:
        """Adaptive Sampling
        "Enables/disables adaptive refinement the frequency domain sampling.."
        "Value should be 'true' or 'false'."
        """
        val = self._get_property('Adaptive Sampling')
        return val

    @property
    def refinement_domain(self):
        """Refinement Domain
        "Points to use when refining the frequency domain.."
        "        """
        val = self._get_property('Refinement Domain')
        return val

    @property
    def filename(self) -> str:
        """Filename
        "Name of file with coupling data.."
        "Value should be a full file path."
        """
        val = self._get_property('Filename')
        return val

    @property
    def savant_matched_coupling_file(self) -> str:
        """Savant Matched Coupling File
        "Coupling data generated by Savant and exported as a matched file."
        "        """
        val = self._get_property('Savant Matched Coupling File')
        return val

    @property
    def enable_em_isolation(self) -> bool:
        """Enable EM Isolation
        "Enables/disables EM isolation."
        "Value should be 'true' or 'false'."
        """
        val = self._get_property('Enable EM Isolation')
        return val

    @property
    def port_antenna_assignment(self):
        """Port-Antenna Assignment
        "Maps each port in the coupling file to an antenna in the project."
        "A list of values."
        "        """
        val = self._get_property('Port-Antenna Assignment')
        return val

    @property
    def notes(self) -> str:
        """Notes
        "Expand to view/edit notes stored with the project."
        "        """
        val = self._get_property('Notes')
        return val

