# -*- coding: utf-8 -*-
#
# Copyright(C) 2021 - 2025 ANSYS, Inc. and /or its affiliates.
# SPDX - License - Identifier: MIT
#
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files(the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and /or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions :
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
from ..EmitNode import EmitNode

class TouchstoneCouplingNode(EmitNode):
    def __init__(self, emit_obj, result_id, node_id):
        self._is_component = False
        EmitNode.__init__(self, emit_obj, result_id, node_id)

    @property
    def parent(self):
        """The parent of this emit node."""
        return self._parent

    def rename(self, new_name: str):
        """Rename this node"""
        self._rename(new_name)

    def duplicate(self, new_name: str):
        """Duplicate this node"""
        return self._duplicate(new_name)

    def delete(self):
        """Delete this node"""
        self._delete()

    @property
    def enabled(self) -> bool:
        """Enabled
        Enable/Disable coupling

        Value should be 'true' or 'false'.
        """
        val = self._get_property("Enabled")
        val = (val == 'true')
        return val # type: ignore

    @enabled.setter
    def enabled(self, value: bool):
        self._oRevisionData.SetEmitNodeProperties(self._result_id, 
                                                  self._node_id, 
                                                  [f"Enabled={value}"])

    @property
    def enable_refinement(self) -> bool:
        """Enable Refinement
        Enables/disables refined sampling of the frequency domain.

        Value should be 'true' or 'false'.
        """
        val = self._get_property("Enable Refinement")
        val = (val == 'true')
        return val # type: ignore

    @enable_refinement.setter
    def enable_refinement(self, value: bool):
        self._oRevisionData.SetEmitNodeProperties(self._result_id, 
                                                  self._node_id, 
                                                  [f"Enable Refinement={value}"])

    @property
    def adaptive_sampling(self) -> bool:
        """Adaptive Sampling
        Enables/disables adaptive refinement the frequency domain sampling.

        Value should be 'true' or 'false'.
        """
        val = self._get_property("Adaptive Sampling")
        val = (val == 'true')
        return val # type: ignore

    @adaptive_sampling.setter
    def adaptive_sampling(self, value: bool):
        self._oRevisionData.SetEmitNodeProperties(self._result_id, 
                                                  self._node_id, 
                                                  [f"Adaptive Sampling={value}"])

    @property
    def refinement_domain(self):
        """Refinement Domain
        Points to use when refining the frequency domain.

                """
        val = self._get_property("Refinement Domain")
        return val # type: ignore

    @refinement_domain.setter
    def refinement_domain(self, value):
        self._oRevisionData.SetEmitNodeProperties(self._result_id, 
                                                  self._node_id, 
                                                  [f"Refinement Domain={value}"])

    @property
    def filename(self) -> str:
        """Filename
        Name of file with coupling data.

        Value should be a full file path.
        """
        val = self._get_property("Filename")
        return val # type: ignore

    @filename.setter
    def filename(self, value: str):
        self._oRevisionData.SetEmitNodeProperties(self._result_id, 
                                                  self._node_id, 
                                                  [f"Filename={value}"])

    @property
    def savant_matched_coupling_file(self) -> str:
        """Savant Matched Coupling File
        Coupling data generated by Savant and exported as a matched file

                """
        val = self._get_property("Savant Matched Coupling File")
        return val # type: ignore

    @property
    def enable_em_isolation(self) -> bool:
        """Enable EM Isolation
        Enables/disables EM isolation

        Value should be 'true' or 'false'.
        """
        val = self._get_property("Enable EM Isolation")
        val = (val == 'true')
        return val # type: ignore

    @enable_em_isolation.setter
    def enable_em_isolation(self, value: bool):
        self._oRevisionData.SetEmitNodeProperties(self._result_id, 
                                                  self._node_id, 
                                                  [f"Enable EM Isolation={value}"])

    @property
    def port_antenna_assignment(self):
        """Port-Antenna Assignment
        Maps each port in the coupling file to an antenna in the project

        "A list of values."
                """
        val = self._get_property("Port-Antenna Assignment")
        return val # type: ignore

    @port_antenna_assignment.setter
    def port_antenna_assignment(self, value):
        self._oRevisionData.SetEmitNodeProperties(self._result_id, 
                                                  self._node_id, 
                                                  [f"Port-Antenna Assignment={value}"])

    @property
    def notes(self) -> str:
        """Notes
        Expand to view/edit notes stored with the project

                """
        val = self._get_property("Notes")
        return val # type: ignore

    @notes.setter
    def notes(self, value: str):
        self._oRevisionData.SetEmitNodeProperties(self._result_id, 
                                                  self._node_id, 
                                                  [f"Notes={value}"])

