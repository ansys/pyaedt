
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples\06-Multiphysics\MRI.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_06-Multiphysics_MRI.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_06-Multiphysics_MRI.py:


Multiphysics: HFSS-Mechanical MRI analysis
---------------------------------------------------
The goal of this workshop is to use a coil tuned to 63.8 MHz to determine the temperature
rise in a gel phantom near an implant given a background SAR of 1 W/kg.

Steps to follow
Step 1: Simulate coil loaded by empty phantom:
Scale input to coil ports to produce desired background SAR of 1 W/kg at location that will later contain the implant.
Step 2: Simulate coil loaded by phantom containing implant in proper location:
View SAR in tissue surrounding implant.
Step 3: Thermal simulation:
Link HFSS to transient thermal solver to find temperature rise in tissue near implant vs. time.

.. GENERATED FROM PYTHON SOURCE LINES 17-20

Perform required imports
~~~~~~~~~~~~~~~~~~~~~~~~
Perform required imports.

.. GENERATED FROM PYTHON SOURCE LINES 20-24

.. code-block:: default

    import os.path

    from pyaedt import Hfss, Mechanical, Icepak, downloads








.. GENERATED FROM PYTHON SOURCE LINES 25-29

Set non-graphical mode
~~~~~~~~~~~~~~~~~~~~~~
Set non-graphical mode. `
You can set ``non_graphical`` either to ``True`` or ``False``.

.. GENERATED FROM PYTHON SOURCE LINES 29-32

.. code-block:: default


    non_graphical = False








.. GENERATED FROM PYTHON SOURCE LINES 33-41

Project load
~~~~~~~~~~~~
Open the ANSYS Electronics Desktop 2018.2
Open project background_SAR.aedt
Project contains phantom and airbox
Phantom consists of two objects: phantom and implant_box
Separate objects are used to selectively assign mesh operations
Material properties defined in  this project already contain #electrical and thermal properties.

.. GENERATED FROM PYTHON SOURCE LINES 41-44

.. code-block:: default

    project_path = downloads.download_file(directory="mri")
    hfss = Hfss(os.path.join(project_path, "background_SAR.aedt"), specified_version="2023.2", non_graphical=non_graphical,
                new_desktop_session=True)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Initializing new desktop!




.. GENERATED FROM PYTHON SOURCE LINES 45-52

Insert 3D component
~~~~~~~~~~~~~~~~~~~
The MRI Coil is saved as a separate 3D Component
‒ 3D Components store geometry (including parameters),
material properties, boundary conditions, mesh assignments,
and excitations
‒ 3D Components make it easy to reuse and share parts of a simulation

.. GENERATED FROM PYTHON SOURCE LINES 52-55

.. code-block:: default


    hfss.modeler.insert_3d_component(os.path.join(project_path, "coil.a3dcomp"))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <pyaedt.modeler.cad.components_3d.UserDefinedComponent object at 0x000001D983FF0070>



.. GENERATED FROM PYTHON SOURCE LINES 56-62

Expression Chache
~~~~~~~~~~~~~~~~~
 On the expression cache tab, define additional convergence criteria for self impedance of the four coil
ports
‒ Set each of these convergence criteria to 2.5 ohm
For this demo number of passes is limited to 2 to reduce simulation time.

.. GENERATED FROM PYTHON SOURCE LINES 62-75

.. code-block:: default


    im_traces = hfss.get_traces_for_plot(get_mutual_terms=False, category="im(Z", first_element_filter="Coil1_p*")

    hfss.setups[0].enable_expression_cache(
        report_type="Modal Solution Data",
        expressions=im_traces,
        isconvergence=True,
        isrelativeconvergence=False,
        conv_criteria=2.5,
        use_cache_for_freq=False)
    hfss.setups[0].props["MaximumPasses"] = 2
    im_traces





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    ['im(Z(Coil1_p4:1,Coil1_p4:1))', 'im(Z(Coil1_p1:1,Coil1_p1:1))', 'im(Z(Coil1_p3:1,Coil1_p3:1))', 'im(Z(Coil1_p2:1,Coil1_p2:1))']



.. GENERATED FROM PYTHON SOURCE LINES 76-83

Edit Sources
~~~~~~~~~~~~
The 3D Component of the MRI Coil contains all the ports,
but the sources for these ports are not yet defined.
Browse to and select sources.csv.
These sources were determined by tuning this coil at 63.8 MHz.
Notice the “*input_scale” multiplier to allow quick adjustment of the coil excitation power.

.. GENERATED FROM PYTHON SOURCE LINES 83-86

.. code-block:: default


    hfss.edit_sources_from_file(os.path.join(project_path, "sources.csv"))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    True



.. GENERATED FROM PYTHON SOURCE LINES 87-90

Run Simulation
~~~~~~~~~~~~~~
Save and analyze the project.

.. GENERATED FROM PYTHON SOURCE LINES 90-94

.. code-block:: default


    hfss.save_project(os.path.join(project_path, "solved.aedt"))
    hfss.analyze(num_cores=6)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    True



.. GENERATED FROM PYTHON SOURCE LINES 95-100

Plot SAR on Cut Plane in Phantom
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Ensure that the SAR averaging method is set to Gridless
Plot averagedSAR on GlobalYZ plane
Draw Point1 at origin of the implant coordinate system

.. GENERATED FROM PYTHON SOURCE LINES 100-107

.. code-block:: default


    hfss.sar_setup(-1, Average_SAR_method=1, TissueMass=1, MaterialDensity=1, )
    hfss.post.create_fieldplot_cutplane("implant:YZ", "Average_SAR", filter_objects=["implant_box"])

    hfss.modeler.set_working_coordinate_system("implant")
    hfss.modeler.create_point([0, 0, 0], name="Point1")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <pyaedt.modeler.cad.elements3d.Point object at 0x000001D9A65AFF70>



.. GENERATED FROM PYTHON SOURCE LINES 108-114

Adjust Input Power to MRI Coil
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
The goal is to adjust the MRI coil’s input power, so that the averageSAR at Point1 is 1 W/kg
Note that SAR and input power are linearly related
To determine required input, calculate
input_scale = 1/AverageSAR at Point1

.. GENERATED FROM PYTHON SOURCE LINES 114-122

.. code-block:: default



    sol_data = hfss.post.get_solution_data("Average_SAR", primary_sweep_variable="Freq", context="Point1",
                                           report_category="Fields")
    sol_data.data_real()

    hfss["input_scale"] = 1 / sol_data.data_real()[0]








.. GENERATED FROM PYTHON SOURCE LINES 123-129

Phantom with Implant
~~~~~~~~~~~~~~~~~~~~
Import implant geometry.
Subtract rod from implant_box.
Assign titanium to the imported object rod.
Analyze the project.

.. GENERATED FROM PYTHON SOURCE LINES 129-137

.. code-block:: default


    hfss.modeler.import_3d_cad(os.path.join(project_path, "implant_rod.sat"))

    hfss.modeler["implant_box"].subtract("rod", keep_originals=True)
    hfss.modeler["rod"].material_name = "titanium"
    hfss.analyze(num_cores=6)
    hfss.save_project()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    True



.. GENERATED FROM PYTHON SOURCE LINES 138-142

Thermal Simulation
~~~~~~~~~~~~~~~~~~
Initialize a new Mechanical Transient Thermal analysis.
Mechanical Transient Thermal is available in AEDT from 2023 R2 as a Beta feature.

.. GENERATED FROM PYTHON SOURCE LINES 142-145

.. code-block:: default


    mech = Mechanical(solution_type="Transient Thermal", specified_version="2023.2")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Returning found desktop with PID 11976!




.. GENERATED FROM PYTHON SOURCE LINES 146-149

Copy geometries
~~~~~~~~~~~~~~~
Copy bodies from the HFSS project. 3D Component will not be copied.

.. GENERATED FROM PYTHON SOURCE LINES 149-152

.. code-block:: default


    mech.copy_solid_bodies_from(hfss)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    True



.. GENERATED FROM PYTHON SOURCE LINES 153-157

Link sources to EM losses
~~~~~~~~~~~~~~~~~~~~~~~~~
Link sources to the EM losses.
Assign external convection.

.. GENERATED FROM PYTHON SOURCE LINES 157-167

.. code-block:: default


    exc = mech.assign_em_losses(
        designname=hfss.design_name,
        setupname=hfss.setups[0].name,
        sweepname="LastAdaptive",
        map_frequency=hfss.setups[0].props["Frequency"],
        surface_objects=mech.get_all_conductors_names(),
    )
    mech.assign_uniform_convection(mech.modeler["Region"].faces, convection_value=1)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <pyaedt.modules.Boundary.BoundaryObject object at 0x000001D9AA2796F0>



.. GENERATED FROM PYTHON SOURCE LINES 168-172

Create Setup
~~~~~~~~~~~~
Create a new setup and edit properties.
Simuation will be for 60 seconds.

.. GENERATED FROM PYTHON SOURCE LINES 172-185

.. code-block:: default


    setup = mech.create_setup()
    # setup.add_mesh_link("backgroundSAR")
    # mech.create_dataset1d_design("PowerMap", [0, 239, 240, 360], [1, 1, 0, 0])
    # exc.props["LossMultiplier"] = "pwl(PowerMap,Time)"

    mech.modeler.set_working_coordinate_system("implant")
    mech.modeler.create_point([0, 0, 0], name="Point1")
    setup.props["Stop Time"] = 60
    setup.props["Time Step"] = "10s"
    setup.props["SaveFieldsType"] = "Every N Steps"
    setup.props["N Steps"] = "2"








.. GENERATED FROM PYTHON SOURCE LINES 186-189

Analyze Mechanical
~~~~~~~~~~~~~~~~~~
Analyze the project.

.. GENERATED FROM PYTHON SOURCE LINES 189-192

.. code-block:: default


    mech.analyze(num_cores=6)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    True



.. GENERATED FROM PYTHON SOURCE LINES 193-197

Plot Fields
~~~~~~~~~~~
Plot Temperature on cut plane.
Plot Temperature on point.

.. GENERATED FROM PYTHON SOURCE LINES 197-207

.. code-block:: default



    mech.post.create_fieldplot_cutplane("implant:YZ", "Temperature", filter_objects=["implant_box"],
                                        intrinsincDict={"Time": "10s"})
    mech.save_project()

    data = mech.post.get_solution_data("Temperature", primary_sweep_variable="Time", context="Point1",
                                       report_category="Fields")
    data.plot()




.. image-sg:: /examples/06-Multiphysics/images/sphx_glr_MRI_001.png
   :alt: Simulation Results Plot
   :srcset: /examples/06-Multiphysics/images/sphx_glr_MRI_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <Figure size 2000x1000 with 1 Axes>



.. GENERATED FROM PYTHON SOURCE LINES 208-211

Thermal Simulation
~~~~~~~~~~~~~~~~~~
Initialize a new Icepak Transient Thermal analysis.

.. GENERATED FROM PYTHON SOURCE LINES 211-215

.. code-block:: default


    ipk = Icepak(solution_type="Transient", specified_version="2023.2")
    ipk.design_solutions.problem_type = "TemperatureOnly"





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Returning found desktop with PID 11976!




.. GENERATED FROM PYTHON SOURCE LINES 216-219

Copy geometries
~~~~~~~~~~~~~~~
Copy bodies from the HFSS project. 3D Component will not be copied.

.. GENERATED FROM PYTHON SOURCE LINES 219-223

.. code-block:: default


    ipk.modeler.delete("Region")
    ipk.copy_solid_bodies_from(hfss)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    True



.. GENERATED FROM PYTHON SOURCE LINES 224-228

Link sources to EM losses
~~~~~~~~~~~~~~~~~~~~~~~~~
Link sources to the EM losses.
Assign external convection.

.. GENERATED FROM PYTHON SOURCE LINES 228-237

.. code-block:: default


    exc = ipk.assign_em_losses(
        designname=hfss.design_name,
        setupname=hfss.setups[0].name,
        sweepname="LastAdaptive",
        map_frequency=hfss.setups[0].props["Frequency"],
        surface_objects=ipk.get_all_conductors_names(),
    )








.. GENERATED FROM PYTHON SOURCE LINES 238-242

Create Setup
~~~~~~~~~~~~
Create a new setup and edit properties.
Simuation will be for 60 seconds.

.. GENERATED FROM PYTHON SOURCE LINES 242-250

.. code-block:: default


    setup = ipk.create_setup()

    setup.props["Stop Time"] = 60
    setup.props["N Steps"] = 2
    setup.props["Time Step"] = 5
    setup.props['Convergence Criteria - Energy'] = 1e-12








.. GENERATED FROM PYTHON SOURCE LINES 251-254

Mesh Region
~~~~~~~~~~~
Create a new mesh region and change accuracy level to 4.

.. GENERATED FROM PYTHON SOURCE LINES 254-264

.. code-block:: default



    bound = ipk.modeler["implant_box"].bounding_box
    mesh_box = ipk.modeler.create_box(bound[:3], [bound[3] - bound[0], bound[4] - bound[1], bound[5] - bound[2]])
    mesh_box.model = False
    mesh_region = ipk.mesh.assign_mesh_region([mesh_box.name])
    mesh_region.UserSpecifiedSettings = False
    mesh_region.Level = 4
    mesh_region.update()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    True



.. GENERATED FROM PYTHON SOURCE LINES 265-268

Point Monitor
~~~~~~~~~~~~~
Create a new point monitor.

.. GENERATED FROM PYTHON SOURCE LINES 268-273

.. code-block:: default


    ipk.modeler.set_working_coordinate_system("implant")
    ipk.monitor.assign_point_monitor([0, 0, 0], monitor_name="Point1")
    ipk.assign_openings(ipk.modeler["Region"].top_face_z)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <pyaedt.modules.Boundary.BoundaryObject object at 0x000001D9AA1A2380>



.. GENERATED FROM PYTHON SOURCE LINES 274-279

Analyze and plot fields
~~~~~~~~~~~~~~~~~~~~~~~
Analyze the project.
Plot Temperature on cut plane.
Plot Temperature on monitor point.

.. GENERATED FROM PYTHON SOURCE LINES 279-289

.. code-block:: default


    ipk.analyze(num_cores=6)
    ipk.post.create_fieldplot_cutplane("implant:YZ", "Temperature", filter_objects=["implant_box"],
                                       intrinsincDict={"Time": "0s"})
    ipk.save_project()

    data = ipk.post.get_solution_data("Point1.Temperature", primary_sweep_variable="Time", report_category="Monitor")
    data.plot()

    ipk.release_desktop(False)



.. image-sg:: /examples/06-Multiphysics/images/sphx_glr_MRI_002.png
   :alt: Simulation Results Plot
   :srcset: /examples/06-Multiphysics/images/sphx_glr_MRI_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    True




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (17 minutes 38.305 seconds)


.. _sphx_glr_download_examples_06-Multiphysics_MRI.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: MRI.py <MRI.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: MRI.ipynb <MRI.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
