
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples\03-Maxwell\Maxwell2D_Electrostatic.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_03-Maxwell_Maxwell2D_Electrostatic.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_03-Maxwell_Maxwell2D_Electrostatic.py:


Maxwell 2D Electrostatic analysis
---------------------------------
This example shows how you can use PyAEDT to create a Maxwell 2D electrostatic analysis.
It shows how to create the geometry, load material properties from an Excel file and
set up the mesh settings. Moreover, it focuses on post-processing operations, in particular how to
plot field line traces, relevant for an electrostatic analysis.

.. GENERATED FROM PYTHON SOURCE LINES 11-14

Perform required imports
~~~~~~~~~~~~~~~~~~~~~~~~
Perform required imports.

.. GENERATED FROM PYTHON SOURCE LINES 14-17

.. code-block:: default


    import pyaedt








.. GENERATED FROM PYTHON SOURCE LINES 18-22

Initialize Maxwell 2D
~~~~~~~~~~~~~~~~~~~~~
Initialize Maxwell 2D, providing the version, path to the project, and the design
name and type.

.. GENERATED FROM PYTHON SOURCE LINES 22-31

.. code-block:: default


    desktopVersion = '2023.2'

    sName = 'MySetupAuto'
    sType = 'Electrostatic'
    dName = 'Design1'
    pName = pyaedt.generate_unique_project_name()
    non_graphical = False








.. GENERATED FROM PYTHON SOURCE LINES 32-35

Download .xlsx file
~~~~~~~~~~~~~~~~~~~
Set local temporary folder to export the .xlsx file to.

.. GENERATED FROM PYTHON SOURCE LINES 35-38

.. code-block:: default


    file_name_xlsx = pyaedt.downloads.download_file("field_line_traces", "my_copper.xlsx")








.. GENERATED FROM PYTHON SOURCE LINES 39-42

Initialize dictionaries
~~~~~~~~~~~~~~~~~~~~~~~
Initialize dictionaries that contain all the definitions for the design variables.

.. GENERATED FROM PYTHON SOURCE LINES 42-60

.. code-block:: default


    geom_params_circle = {
        'circle_x0': '-10mm',
        'circle_y0': '0mm',
        'circle_z0': '0mm',
        'circle_axis': 'Z',
        'circle_radius': '1mm'
    }

    geom_params_rectangle = {
        'r_x0': '1mm',
        'r_y0': '5mm',
        'r_z0': '0mm',
        'r_axis': 'Z',
        'r_dx': '-1mm',
        'r_dy': '-10mm'
    }








.. GENERATED FROM PYTHON SOURCE LINES 61-64

Launch Maxwell 2D
~~~~~~~~~~~~~~~~~
Launch Maxwell 2D and save the project.

.. GENERATED FROM PYTHON SOURCE LINES 64-73

.. code-block:: default


    M2D = pyaedt.Maxwell2d(projectname=pName,
                           specified_version=desktopVersion,
                           designname=dName,
                           solution_type=sType,
                           new_desktop_session=True,
                           non_graphical=non_graphical
                           )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Initializing new desktop!




.. GENERATED FROM PYTHON SOURCE LINES 74-77

Create object to access 2D modeler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Create the object ``mod2D`` to access the 2D modeler easily.

.. GENERATED FROM PYTHON SOURCE LINES 77-82

.. code-block:: default


    mod2D = M2D.modeler
    mod2D.delete()
    mod2D.model_units = "mm"








.. GENERATED FROM PYTHON SOURCE LINES 83-86

Define variables from dictionaries
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Define design variables from the created dictionaries.

.. GENERATED FROM PYTHON SOURCE LINES 86-92

.. code-block:: default


    for k, v in geom_params_circle.items():
        M2D[k] = v
    for k, v in geom_params_rectangle.items():
        M2D[k] = v








.. GENERATED FROM PYTHON SOURCE LINES 93-96

Read materials from .xslx file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Read materials from .xslx file into and set into design.

.. GENERATED FROM PYTHON SOURCE LINES 96-99

.. code-block:: default


    mats = M2D.materials.import_materials_from_excel(file_name_xlsx)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    C:\actions-runner\_work\pyaedt\pyaedt\testenv\lib\site-packages\pyaedt\modules\MaterialLib.py:863: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
      and val[keys.index(prop)]
    C:\actions-runner\_work\pyaedt\pyaedt\testenv\lib\site-packages\pyaedt\modules\MaterialLib.py:864: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
      and not (isinstance(val[keys.index(prop)], float) and math.isnan(val[keys.index(prop)]))
    C:\actions-runner\_work\pyaedt\pyaedt\testenv\lib\site-packages\pyaedt\modules\MaterialLib.py:866: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
      props[prop] = float(val[keys.index(prop)])




.. GENERATED FROM PYTHON SOURCE LINES 100-104

Create design geometries
~~~~~~~~~~~~~~~~~~~~~~~~
Create rectangle and a circle and assign the material read from the .xlsx file.
Create two new polylines and a region.

.. GENERATED FROM PYTHON SOURCE LINES 104-123

.. code-block:: default


    rect = mod2D.create_rectangle(position=['r_x0', 'r_y0', 'r_z0'],
                                  dimension_list=['r_dx', 'r_dy', 0],
                                  name='Ground', matname=mats[0])
    rect.color = (0, 0, 255)  # rgb
    rect.solve_inside = False

    circle = mod2D.create_circle(position=['circle_x0', 'circle_y0', 'circle_z0'], radius='circle_radius',
                                 num_sides='0', is_covered=True, name='Electrode', matname=mats[0])
    circle.color = (0, 0, 255)  # rgb
    circle.solve_inside = False

    poly1_points = [[-9, 2, 0], [-4, 2, 0], [2, -2, 0],[8, 2, 0]]
    poly2_points = [[-9, 0, 0], [9, 0, 0]]
    poly1_id = mod2D.create_polyline(position_list=poly1_points,segment_type='Spline', name='Poly1')
    poly2_id = mod2D.create_polyline(position_list=poly2_points, name='Poly2')
    mod2D.split([poly1_id, poly2_id], 'YZ', sides='NegativeOnly')
    mod2D.create_region([20, 100, 20, 100])





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <pyaedt.modeler.cad.object3d.Object3d object at 0x000001D9A18021D0>



.. GENERATED FROM PYTHON SOURCE LINES 124-127

Define excitations
~~~~~~~~~~~~~~~~~~
Assign voltage excitations to rectangle and circle.

.. GENERATED FROM PYTHON SOURCE LINES 127-131

.. code-block:: default


    M2D.assign_voltage(rect.id, amplitude=0, name='Ground')
    M2D.assign_voltage(circle.id, amplitude=50e6, name='50kV')





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <pyaedt.modules.Boundary.BoundaryObject object at 0x000001D9A1803580>



.. GENERATED FROM PYTHON SOURCE LINES 132-135

Create initial mesh settings
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Assign a surface mesh to the rectangle.

.. GENERATED FROM PYTHON SOURCE LINES 135-138

.. code-block:: default


    M2D.mesh.assign_surface_mesh_manual(names=['Ground'], surf_dev=0.001)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <pyaedt.modules.Mesh.MeshOperation object at 0x000001D9A1803610>



.. GENERATED FROM PYTHON SOURCE LINES 139-142

Create, validate and analyze the setup
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Create, update, validate and analyze the setup.

.. GENERATED FROM PYTHON SOURCE LINES 142-149

.. code-block:: default


    setup = M2D.create_setup(setupname=sName)
    setup.props['PercentError'] = 0.5
    setup.update()
    M2D.validate_simple()
    M2D.analyze_setup(sName)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    True



.. GENERATED FROM PYTHON SOURCE LINES 150-154

Evaluate the E Field tangential component
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Evaluate the E Field tangential component along the given polylines.
Add these operations to the Named Expression list in Field Calculator.

.. GENERATED FROM PYTHON SOURCE LINES 154-168

.. code-block:: default


    fields = M2D.odesign.GetModule('FieldsReporter')
    fields.CalcStack("clear")
    fields.EnterQty("E")
    fields.EnterEdge("Poly1")
    fields.CalcOp("Tangent")
    fields.CalcOp("Dot")
    fields.AddNamedExpression("e_tan_poly1", "Fields")
    fields.EnterQty("E")
    fields.EnterEdge("Poly2")
    fields.CalcOp("Tangent")
    fields.CalcOp("Dot")
    fields.AddNamedExpression("e_tan_poly2", "Fields")








.. GENERATED FROM PYTHON SOURCE LINES 169-174

Create Field Line Traces Plot
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Create Field Line Traces Plot specifying as seeding faces
the ground, the electrode and the region
and as ``In surface objects`` only the region.

.. GENERATED FROM PYTHON SOURCE LINES 174-179

.. code-block:: default


    plot = M2D.post.create_fieldplot_line_traces(["Ground", "Electrode", "Region"],
                                                 "Region",
                                                 plot_name="LineTracesTest")








.. GENERATED FROM PYTHON SOURCE LINES 180-184

Update Field Line Traces Plot
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Update field line traces plot.
Update seeding points number, line style and line width.

.. GENERATED FROM PYTHON SOURCE LINES 184-190

.. code-block:: default


    plot.SeedingPointsNumber = 20
    plot.LineStyle = "Cylinder"
    plot.LineWidth = 3
    plot.update()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    True



.. GENERATED FROM PYTHON SOURCE LINES 191-194

Save project and close AEDT
~~~~~~~~~~~~~~~~~~~~~~~~~~~
Save the project and close AEDT.

.. GENERATED FROM PYTHON SOURCE LINES 194-197

.. code-block:: default


    M2D.save_project()
    M2D.release_desktop()




.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    True




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (1 minutes 5.960 seconds)


.. _sphx_glr_download_examples_03-Maxwell_Maxwell2D_Electrostatic.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: Maxwell2D_Electrostatic.py <Maxwell2D_Electrostatic.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: Maxwell2D_Electrostatic.ipynb <Maxwell2D_Electrostatic.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
