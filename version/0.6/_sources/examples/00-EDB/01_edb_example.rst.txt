
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples\00-EDB\01_edb_example.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_00-EDB_01_edb_example.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_00-EDB_01_edb_example.py:


EDB: Siwave analysis from EDB setup
-----------------------------------
This example shows how you can use EDB to interact with a layout.

.. GENERATED FROM PYTHON SOURCE LINES 7-10

Perform required imports
~~~~~~~~~~~~~~~~~~~~~~~~
Perform required imports.

.. GENERATED FROM PYTHON SOURCE LINES 10-27

.. code-block:: default


    import shutil

    import os
    import time
    import pyaedt

    temp_folder = pyaedt.generate_unique_folder_name()
    example_path = pyaedt.downloads.download_aedb(temp_folder)

    targetfile = os.path.dirname(example_path)

    siwave_file = os.path.join(os.path.dirname(targetfile), "Galileo.siw")
    print(targetfile)
    aedt_file = targetfile[:-4] + "aedt"






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    D:\Temp\pyaedt_prj_9SZ\edb/Galileo.aedb




.. GENERATED FROM PYTHON SOURCE LINES 28-31

Launch EDB
~~~~~~~~~~
Launch the :class:`pyaedt.Edb` class, using EDB 2023 R1 and SI units.

.. GENERATED FROM PYTHON SOURCE LINES 31-36

.. code-block:: default

    edb_version = "2023.1"
    if os.path.exists(aedt_file):
        os.remove(aedt_file)
    edb = pyaedt.Edb(edbpath=targetfile, edbversion=edb_version)








.. GENERATED FROM PYTHON SOURCE LINES 37-41

Compute nets and components
~~~~~~~~~~~~~~~~~~~~~~~~~~~
Computes nets and components.
There are queries for nets, stackups, layers, components, and geometries.

.. GENERATED FROM PYTHON SOURCE LINES 41-47

.. code-block:: default


    print("Nets {}".format(len(edb.nets.netlist)))
    start = time.time()
    print("Components {}".format(len(edb.components.components.keys())))
    print("elapsed time = ", time.time() - start)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Nets 432
    Components 531
    elapsed time =  0.0




.. GENERATED FROM PYTHON SOURCE LINES 48-54

Get pin position
~~~~~~~~~~~~~~~~
Get the position for a specific pin.
The next section shows how to get all pins for a specific component and
the positions of each of them.
Each pin is a list of ``[X, Y]`` coordinate positions.

.. GENERATED FROM PYTHON SOURCE LINES 54-59

.. code-block:: default


    pins = edb.components["U2"].pins
    for pin in edb.components["U2"].pins.values():
        print(pin.position)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [0.08144438899999999, 0.0313309]
    [0.082944411, 0.0313309]
    [0.08144438899999999, 0.0324739]
    [0.082944411, 0.0324739]
    [0.081944388, 0.0313309]
    [0.082444412, 0.0313309]
    [0.081944388, 0.0324739]
    [0.082444412, 0.0324739]
    [0.081407, 0.0319024]
    [0.0829818, 0.0319024]




.. GENERATED FROM PYTHON SOURCE LINES 60-63

Get all nets connected to a component
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Get all nets connected to a specific component.

.. GENERATED FROM PYTHON SOURCE LINES 63-66

.. code-block:: default


    edb.components.get_component_net_connection_info("U2")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    {'refdes': ['U2', 'U2', 'U2', 'U2', 'U2', 'U2', 'U2', 'U2', 'U2', 'U2'], 'pin_name': ['1', '4', '9', '6', '2', '3', '8', '7', '10', '5'], 'net_name': ['IO0_MUX', 'IO1_GPIO', 'LVL_RXD', 'IO1', 'IO0_GPIO', 'GND', 'VSHLD_S5', 'LVL_TXD', 'IO0', 'IO1_MUX']}



.. GENERATED FROM PYTHON SOURCE LINES 67-70

Compute rats
~~~~~~~~~~~~
Computes rats.

.. GENERATED FROM PYTHON SOURCE LINES 70-73

.. code-block:: default


    rats = edb.components.get_rats()








.. GENERATED FROM PYTHON SOURCE LINES 74-79

Get all DC-connected net lists through inductance
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Get all DC-connected net lists through inductance.
The inputs needed are ground net lists. The returned list contains all nets
connected to a ground through an inductor.

.. GENERATED FROM PYTHON SOURCE LINES 79-84

.. code-block:: default


    GROUND_NETS = ["GND", "PGND"]
    dc_connected_net_list = edb.nets.get_dcconnected_net_list(GROUND_NETS)
    print(dc_connected_net_list)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [{'BST_V1P5_S5', 'V1P5_S5'}, {'BST_V1P0_S0', 'V1P0_S0'}, {'SW_RESET_N_SHLD', 'RESET_N_SHLD'}, {'I2C_SCL', 'SLT0_SCL'}, {'I2C_SDA', 'SLT0_SDA'}, {'V3P3_RTC', 'BST_V3P3_S5', 'V3P3_S5'}, {'RSVD_12', 'RSVD_11'}, {'RSVD_7', 'RSVD_8'}, {'RSVD_1', 'RSVD_0'}, {'RSVD_3', 'RSVD_2'}, {'RSVD_10', 'RSVD_9'}, {'RMII_REF_CLK_R', 'RMII_REF_CLK_OUT'}]




.. GENERATED FROM PYTHON SOURCE LINES 85-88

Get power tree based on a specific net
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Get the power tree based on a specific net.

.. GENERATED FROM PYTHON SOURCE LINES 88-95

.. code-block:: default


    VRM = "U3A1"
    OUTPUT_NET = "BST_V1P0_S0"
    powertree_df, component_list_columns, net_group = edb.nets.get_powertree(OUTPUT_NET, GROUND_NETS)
    for el in powertree_df:
        print(el)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ['C4A2', '1', 'BST_V1P0_S0', 'Capacitor', '602433-057', '1']
    ['L4B1', '1', 'BST_V1P0_S0', 'Inductor', 'A32422-019', '1']
    ['U3A1', '36', 'BST_V1P0_S0', 'IC', 'G43225-001', '36-37']
    ['U3A1', '37', 'BST_V1P0_S0', 'IC', 'G43225-001', '36-37']
    ['U2A5', 'Y14', 'V1P0_S0', 'IC', 'IPD031-201', 'Y14-AB14-AD14-V14-Y20-Y18-Y16-AB20-AB18-T18-V20-V18-V16']
    ['U2A5', 'AB14', 'V1P0_S0', 'IC', 'IPD031-201', 'Y14-AB14-AD14-V14-Y20-Y18-Y16-AB20-AB18-T18-V20-V18-V16']
    ['U2A5', 'AD14', 'V1P0_S0', 'IC', 'IPD031-201', 'Y14-AB14-AD14-V14-Y20-Y18-Y16-AB20-AB18-T18-V20-V18-V16']
    ['U2A5', 'V14', 'V1P0_S0', 'IC', 'IPD031-201', 'Y14-AB14-AD14-V14-Y20-Y18-Y16-AB20-AB18-T18-V20-V18-V16']
    ['U2A5', 'Y20', 'V1P0_S0', 'IC', 'IPD031-201', 'Y14-AB14-AD14-V14-Y20-Y18-Y16-AB20-AB18-T18-V20-V18-V16']
    ['U2A5', 'Y18', 'V1P0_S0', 'IC', 'IPD031-201', 'Y14-AB14-AD14-V14-Y20-Y18-Y16-AB20-AB18-T18-V20-V18-V16']
    ['U2A5', 'Y16', 'V1P0_S0', 'IC', 'IPD031-201', 'Y14-AB14-AD14-V14-Y20-Y18-Y16-AB20-AB18-T18-V20-V18-V16']
    ['U2A5', 'AB20', 'V1P0_S0', 'IC', 'IPD031-201', 'Y14-AB14-AD14-V14-Y20-Y18-Y16-AB20-AB18-T18-V20-V18-V16']
    ['U2A5', 'AB18', 'V1P0_S0', 'IC', 'IPD031-201', 'Y14-AB14-AD14-V14-Y20-Y18-Y16-AB20-AB18-T18-V20-V18-V16']
    ['U2A5', 'T18', 'V1P0_S0', 'IC', 'IPD031-201', 'Y14-AB14-AD14-V14-Y20-Y18-Y16-AB20-AB18-T18-V20-V18-V16']
    ['U2A5', 'V20', 'V1P0_S0', 'IC', 'IPD031-201', 'Y14-AB14-AD14-V14-Y20-Y18-Y16-AB20-AB18-T18-V20-V18-V16']
    ['U2A5', 'V18', 'V1P0_S0', 'IC', 'IPD031-201', 'Y14-AB14-AD14-V14-Y20-Y18-Y16-AB20-AB18-T18-V20-V18-V16']
    ['U2A5', 'V16', 'V1P0_S0', 'IC', 'IPD031-201', 'Y14-AB14-AD14-V14-Y20-Y18-Y16-AB20-AB18-T18-V20-V18-V16']
    ['C2L14', '1', 'V1P0_S0', 'Capacitor', 'A36096-066', '1']
    ['R2L19', '1', 'V1P0_S0', 'Resistor', 'E41735-001', '1']
    ['C3L22', '1', 'V1P0_S0', 'Capacitor', 'A36096-108', '1']
    ['C3B10', '1', 'V1P0_S0', 'Capacitor', '602433-081', '1']
    ['C2B2', '1', 'V1P0_S0', 'Capacitor', '602433-081', '1']
    ['C3L28', '1', 'V1P0_S0', 'Capacitor', 'C83410-012', '1']
    ['C3L17', '1', 'V1P0_S0', 'Capacitor', 'C83410-012', '1']
    ['C3L15', '1', 'V1P0_S0', 'Capacitor', 'C83410-012', '1']
    ['C3L18', '1', 'V1P0_S0', 'Capacitor', 'C83410-012', '1']
    ['C3L20', '1', 'V1P0_S0', 'Capacitor', 'C83410-012', '1']
    ['C3L26', '1', 'V1P0_S0', 'Capacitor', 'C83410-012', '1']
    ['C3L24', '1', 'V1P0_S0', 'Capacitor', 'C83410-012', '1']
    ['C3L29', '1', 'V1P0_S0', 'Capacitor', 'C83410-012', '1']
    ['C3B9', '1', 'V1P0_S0', 'Capacitor', 'C97875-001', '1']
    ['C3B11', '1', 'V1P0_S0', 'Capacitor', 'C97875-001', '1']
    ['FB3L1', '2', 'V1P0_S0', 'Other', 'G22224-001', '2']
    ['L4B1', '2', 'V1P0_S0', 'Inductor', 'A32422-019', '2']
    ['C2B12', '1', 'V1P0_S0', 'Capacitor', 'E16347-001', '1']
    ['C3B17', '1', 'V1P0_S0', 'Capacitor', 'E16347-001', '1']




.. GENERATED FROM PYTHON SOURCE LINES 96-100

Delete all RLCs with only one pin
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Delete all RLCs with only one pin. This method provides a useful way of
removing components not needed in the simulation.

.. GENERATED FROM PYTHON SOURCE LINES 100-103

.. code-block:: default


    edb.components.delete_single_pin_rlc()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    ['R2B29', 'R3M13']



.. GENERATED FROM PYTHON SOURCE LINES 104-107

Delete components
~~~~~~~~~~~~~~~~~
Delete manually one or more components.

.. GENERATED FROM PYTHON SOURCE LINES 107-110

.. code-block:: default


    edb.components.delete("C3B17")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    True



.. GENERATED FROM PYTHON SOURCE LINES 111-114

Delete nets
~~~~~~~~~~~
Delete manually one or more nets.

.. GENERATED FROM PYTHON SOURCE LINES 114-117

.. code-block:: default


    edb.nets.delete("A0_N")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    ['A0_N']



.. GENERATED FROM PYTHON SOURCE LINES 118-121

Get stackup limits
~~~~~~~~~~~~~~~~~~
Get the stackup limits (top and bottom layers and elevations).

.. GENERATED FROM PYTHON SOURCE LINES 121-124

.. code-block:: default


    print(edb.stackup.limits())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ('UNNAMED_000', 0.00203454, 'UNNAMED_012', 0.0)




.. GENERATED FROM PYTHON SOURCE LINES 125-128

Create coaxial port
~~~~~~~~~~~~~~~~~~~
Create a coaxial port for the HFSS simulation.

.. GENERATED FROM PYTHON SOURCE LINES 128-131

.. code-block:: default


    edb.hfss.create_coax_port_on_component("U2A5", "V1P0_S0")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    ['U2A5_V1P0_S0_Y14', 'U2A5_V1P0_S0_AB14', 'U2A5_V1P0_S0_AD14', 'U2A5_V1P0_S0_V14', 'U2A5_V1P0_S0_Y20', 'U2A5_V1P0_S0_Y18', 'U2A5_V1P0_S0_Y16', 'U2A5_V1P0_S0_AB20', 'U2A5_V1P0_S0_AB18', 'U2A5_V1P0_S0_T18', 'U2A5_V1P0_S0_V20', 'U2A5_V1P0_S0_V18', 'U2A5_V1P0_S0_V16']



.. GENERATED FROM PYTHON SOURCE LINES 132-136

Edit stackup layers and material
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Edit the stackup layers and material. You can change stackup layer
properties with assignment and create materials and assign them to layers.

.. GENERATED FROM PYTHON SOURCE LINES 136-142

.. code-block:: default


    edb.stackup["TOP"].thickness = "75um"
    edb.materials.add_debye_material("My_Debye", 5, 3, 0.02, 0.05, 1e5, 1e9)







.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <Ansys.Ansoft.Edb.Definition.MaterialDef object at 0x000002288104D480>



.. GENERATED FROM PYTHON SOURCE LINES 143-146

Create voltage source and Siwave DCIR analysis
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Create a voltage source and then set up a DCIR analysis.

.. GENERATED FROM PYTHON SOURCE LINES 146-156

.. code-block:: default


    edb.siwave.create_voltage_source_on_net("U2A5", "V1P5_S3", "U2A5", "GND", 3.3, 0, "V1")
    edb.siwave.create_current_source_on_net("U1B5", "V1P5_S3", "U1B5", "GND", 1.0, 0, "I1")
    setup = edb.siwave.add_siwave_dc_analysis("myDCIR_4")
    setup.use_dc_custom_settings = True
    setup.dc_slider_position = 0
    setup.add_source_terminal_to_ground("V1", 1)







.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    True



.. GENERATED FROM PYTHON SOURCE LINES 157-160

Save modifications
~~~~~~~~~~~~~~~~~~
Save modifications.

.. GENERATED FROM PYTHON SOURCE LINES 160-166

.. code-block:: default


    edb.save_edb()
    edb.nets.plot(None, "TOP",plot_components_on_top=True)

    siw_file = edb.solve_siwave()




.. image-sg:: /examples/00-EDB/images/sphx_glr_01_edb_example_001.png
   :alt: Galileo_um
   :srcset: /examples/00-EDB/images/sphx_glr_01_edb_example_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 167-170

Export Siwave Reports
~~~~~~~~~~~~~~~~~~~~~
Export all DC Reports quantities.

.. GENERATED FROM PYTHON SOURCE LINES 170-172

.. code-block:: default

    outputs = edb.export_siwave_dc_results(siw_file, setup.name, )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ['"C:\\Program Files\\AnsysEM\\v231\\Win64\\siwave.exe"', '-embedding', '-RunScriptAndExit', '"D:\\Temp\\pyaedt_prj_9SZ\\edb\\export_results.py"']




.. GENERATED FROM PYTHON SOURCE LINES 173-176

Close EDB
~~~~~~~~~
Close EDB. After EDB is closed, it can be opened by AEDT.

.. GENERATED FROM PYTHON SOURCE LINES 176-179

.. code-block:: default


    edb.close_edb()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    True



.. GENERATED FROM PYTHON SOURCE LINES 180-183

Postprocess in Siwave
~~~~~~~~~~~~~~~~~~~~~
Open Siwave and generate a report. This works on Window only.

.. GENERATED FROM PYTHON SOURCE LINES 183-192

.. code-block:: default


    # from pyaedt import Siwave
    # siwave = Siwave("2023.1")
    # siwave.open_project(siwave_file)
    # report_file = os.path.join(temp_folder,'Galileo.htm')
    #
    # siwave.export_siwave_report("myDCIR_4", report_file)
    # siwave.close_project()
    # siwave.quit_application()








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  11.865 seconds)


.. _sphx_glr_download_examples_00-EDB_01_edb_example.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 01_edb_example.py <01_edb_example.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 01_edb_example.ipynb <01_edb_example.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
