name: Upload Python Package

on: [release]

env:
  # Following env vars when changed will "reset" the mentioned cache,
  # by changing the cache file name. It is rendered as ...-v%RESET_XXX%-...
  # You should go up in number, if you go down (or repeat a previous value)
  # you might end up reusing a previous cache if it haven't been deleted already.
  # It applies 7 days retention policy by default.
  RESET_PIP_CACHE: 0
  PACKAGE_NAME: PyAEDT

jobs:

  testimport:
    name: Smoke Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
        python-version: ['3.7', '3.8', '3.9']

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Linux pip cache
        uses: actions/cache@v2
        if: ${{ runner.os == 'Linux' }}
        with:
          path: ~/.cache/pip
          key: Python-v${{ env.RESET_PIP_CACHE }}-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('setup.py') }}-${{ hashFiles('requirements/requirements_tests.txt') }}
          restore-keys: |
            Python-v${{ env.RESET_PIP_CACHE }}-${{ runner.os }}-${{ matrix.python-version }}
      - name: Window pip cache
        uses: actions/cache@v2
        if: ${{ runner.os == 'Windows' }}
        with:
          path: ~\AppData\Local\pip\Cache
          key: Python-v${{ env.RESET_PIP_CACHE }}-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('setup.py') }}-${{ hashFiles('requirements/requirements_tests*.txt') }}
          restore-keys: |
            Python-v${{ env.RESET_PIP_CACHE }}-${{ runner.os }}-${{ matrix.python-version }}

      - name: Install PyAEDT
        run: pip install .

      - name: Test import
        working-directory: tests
        run: python -c "import pyaedt"

      - name: Retrieve PyAEDT version
        run: |
          echo "::set-output name=PYAEDT_VERSION::$(python -c "from pyaedt import __version__; print(__version__)")"
          echo "PyAEDT version is: $(python -c "from pyaedt import __version__; print(__version__)")"
        id: version

      - name: Generate wheelhouse
        run: pip wheel . -w wheelhouse

      - name: Zip wheelhouse
        uses: vimtor/action-zip@v1
        with:
          files: wheelhouse
          dest: ${{ env.PACKAGE_NAME }}-v${{ steps.version.outputs.PYAEDT_VERSION }}-wheelhouse-${{ runner.os }}-${{ matrix.python-version }}.zip

      - name: Upload Wheelhouse
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.PACKAGE_NAME }}-v${{ steps.version.outputs.PYAEDT_VERSION }}-wheelhouse-${{ runner.os }}-${{ matrix.python-version }}
          path: '*.zip'
          retention-days: 7

  deploy:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install setuptools twine

    - name: Build and publish
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: $(PYPI_TOKEN)
        TWINE_REPOSITORY_URL: "https://upload.pypi.org/legacy/"
      run: |
        python setup.py sdist
        twine upload --skip-existing dist/*

    - name: Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ./**/*.whl
          ./**/*.tar.gz
          ./**/*.pdf
          ./**/*.zip
