# This is a basic workflow to help you get started with Actions

name: CI

env:
  python.version: 3.8
  python.venv: 'testvenv'
# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
    tags:
     - 'v*'
     - v*
  pull_request:
    branches: [ main ]



# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: Windows
    strategy:
      matrix:
        python-version: [3.8]
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: 'Create virtual env'
        run: |
          python -m venv testenv
          testenv\Scripts\Activate.ps1
          python -m pip install pip -U
          python -m pip install wheel setuptools -U
          python -c "import sys; print(sys.executable)"

      - name: 'Install pyaedt'
        run: |
          testenv\Scripts\Activate.ps1
          pip install . --use-feature=in-tree-build
          pip install -r requirements_test.txt
          pip install pytest-azurepipelines
          mkdir tmp
          cd tmp
          python -c "import pyaedt; print('Imported pyaedt')"

      - name: 'Unit testing'
        run: |
          testenv\Scripts\Activate.ps1
          pytest -v --cov=pyaedt --cov=_unittest --cov-config=.coveragerc -cov-report=xml --junitxml=junit/test-results.xml _unittest -p no:faulthandler

      - name: 'Coverage'
        run: |
          testenv\Scripts\Activate.ps1
          coverage xml

      - name: Upload pytest test results
        uses: actions/upload-artifact@v2
        with:
          name: pytest-results
          path: junit/test-results.xml
        # Use always() to always run this step to publish test results when there are test failures
        if: ${{ always() }}

      - name: Upload pytest coverage results
        uses: actions/upload-artifact@v2
        with:
          name: coverage-results
          path: coverage.xml
        # Use always() to always run this step to publish test results when there are test failures
        if: ${{ always() }}

      #- name: Publish Unit Test Results
      #  uses: EnricoMi/publish-unit-test-result-action@v1.19
      #  if: always()
      #  with:
      #    files: junit/test-results.xml

      - name: 'Build and validate source distribution'
        run: |
          testenv\Scripts\Activate.ps1
          python setup.py sdist
          python -m pip install twine
          python -m twine check dist/*

      - name: "Builds and uploads to PyPI"
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
        run: |
          testenv\Scripts\Activate.ps1
          python setup.py sdist
          python -m pip install twine
          python -m twine upload --skip-existing dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
