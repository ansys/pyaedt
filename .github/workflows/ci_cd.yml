name: pull-request
on:
  pull_request:
    types: [opened, synchronize, reopened, labeled]

env:
  ANSYSLMD_LICENSE_FILE: ${{ format('1055@{0}', secrets.LICENSE_SERVER) }}
  MAIN_PYTHON_VERSION: '3.10'
  PACKAGE_NAME: 'pyaedt'
  DOCUMENTATION_CNAME: 'aedt.docs.pyansys.com'
  MEILISEARCH_API_KEY: ${{ secrets.MEILISEARCH_API_KEY }}
  MEILISEARCH_HOST_URL: ${{ vars.MEILISEARCH_HOST_URL }}
  MEILISEARCH_PUBLIC_API_KEY: ${{ secrets.MEILISEARCH_PUBLIC_API_KEY }}
  ON_CI: True

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  labeler:
    name: "Labels"
    permissions:
      contents: read
      pull-requests: write
    runs-on: ubuntu-latest
    if: |
      !contains(github.event.pull_request.labels.*.name, 'ci:skip') &&
      github.event.type != 'labeled'
    steps:

     - name: "Checkout repository"
       uses: actions/checkout@v4

     - name: "Sync labels"
       uses: micnncim/action-label-syncer@v1
       env:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

     - name: "Label pull-request"
       uses: actions/labeler@v5.0.0
       with:
        repo-token: ${{ secrets.GITHUB_TOKEN }}

  style:
    name: "Style checks"
    runs-on: ubuntu-latest
    needs: labeler
    if: |
      !contains(github.event.pull_request.labels.*.name, 'ci:skip') &&
      !contains(github.event.pull_request.labels.*.name, 'style:skip')
    steps:

      - name: "Style of branch name"
        if: |
          !contains(github.event.pull_request.labels.*.name, 'style:branch')
        uses: ansys/actions/branch-name-style@v6

      - name: "Style of pull-request title"
        if: |
          !contains(github.event.pull_request.labels.*.name, 'style:branch')
        uses: ansys/actions/commit-style@v6

      # INFO: 'Style of code' is performed by the pre-commit platform

      # TODO: Update to ansys/actions/doc-style@v6
      - name: "Style of doc"
        if: |
          !contains(github.event.pull_request.labels.*.name, 'style:docs')
        uses: ansys/actions/doc-style@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          vale-config: "doc/.vale.ini"
          vale-version: "2.29.6"

  # TODO: Update to ansys/actions/doc-build@v6 once we remove examples
  # TODO: Allow conditional build of sections in docs via env vars
  doc-build-without-examples:
    name: Documentation build without examples
    runs-on: ubuntu-latest
    if: |
      !contains(github.event.pull_request.labels.*.name, 'ci:skip') &&
      !contains(github.event.pull_request.labels.*.name, 'docs:skip') &&
      !contains(github.event.pull_request.labels.*.name, 'docs:examples')
    needs: style
    steps:

      - name: "Checkout project"
        uses: actions/checkout@v4

      - name: "Setup Python"
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

      - name: "Install system dependencies"
        run: |
          sudo apt update
          sudo apt install -y \
            texlive-latex-extra latexmk texlive-xetex texlive-fonts-extra \
            graphviz

      - name: "Install project dependencies"
        run: |
          python pip install --upgrade pip
          python pip install .[doc-no-examples]

      # TODO: Update this step once pyaedt-examples is ready
      - name: "Build HTML documentation without examples"
        run: |
          make -C doc clean
          make -C doc html-no-examples

      # Verify that sphinx generates no warnings
      - name: Check for warnings
        run: |
          python doc/print_errors.py

      - name: "Upload HTML documentation without examples artifact"
        uses: actions/upload-artifact@v3
        with:
          name: documentation-no-examples-html
          path: doc/_build/html
          retention-days: 7

      - name: "Build PDF documentation without examples"
        run: |
          make -C doc pdf-no-examples

      - name: "Upload PDF documentation without examples artifact"
        uses: actions/upload-artifact@v3
        with:
          name: documentation-no-examples-pdf
          path: doc/_build/latex/PyAEDT-Documentation-*.pdf
          retention-days: 7

  tests-smoke:
    name: "Smoke tests and wheelhouse"
    runs-on: ${{ matrix.os }}
    if: |
      !contains(github.event.pull_request.labels.*.name, 'ci:skip') &&
      !contains(github.event.pull_request.labels.*.name, 'tests:skip') &&
      !contains(github.event.pull_request.labels.*.name, 'tests:smoke:skip')
    needs: style
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ['3.7', '3.8', '3.9', '3.10', '3.11']
        target: ['all', 'installer']
        exclude:
          - python-version: '3.7'
            target: 'installer'
    steps:
      - uses: ansys/actions/build-wheelhouse@v6
        with:
          library-name: ${{ env.PACKAGE_NAME }}
          operating-system: ${{ matrix.os }}
          python-version: ${{ matrix.python-version }}
          target: ${{ matrix.target }}

  test-solvers-linux:
    name: "Linux / Tests / Solvers"
    needs: tests-smoke
    runs-on: [ self-hosted, Linux, pyaedt ]
    env:
      ANSYSEM_ROOT241: '/opt/AnsysEM/v241/Linux64'
      ANS_NODEPCHECK: '1'
    steps:

      - name: "Checkout project"
        uses: actions/checkout@v4

      - name: "Setup Python ${{ env.MAIN_PYTHON_VERSION }}"
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

      - name: "Create a virtual environment"
        run: |
          python -m venv .venv
          source .venv/bin/activate
          python -m pip install --upgrade \
            --trusted-host pypi.org \
            --trusted-host pypi.python.org \
            --trusted-host files.pythonhosted.org \
            pip

      - name: "Install tests dependencies"
        run: |
          source .venv/bin/activate
          python -m pip install .[tests] pytest-azurepipelines

      - name: "Run solvers tests"
        run: |
          export LD_LIBRARY_PATH=${{ env.ANSYSEM_ROOT241 }}/common/mono/Linux64/lib64:${{ env.ANSYSEM_ROOT241 }}/Delcross:$LD_LIBRARY_PATH
          source .venv/bin/activate
          pytest --durations=50 -v --cov=pyaedt --cov-report=xml --cov-report=html --junitxml=junit/test-results.xml _unittest_solvers

      - name: "Upload solvers tests coverage"
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          name: codecov-system-solver-tests
          file: ./coverage.xml
          flags: system,solver

      - name: "Upload solvers tests results"
        uses: actions/upload-artifact@v3
        with:
          name: pytest-solver-results
          path: junit/test-results.xml
        if: ${{ always() }}

# # =================================================================================================
# # vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv    RUNNING ON SELF-HOSTED RUNNER    vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
# # =================================================================================================

  test-windows:
    name: Testing and coverage (Windows)
    needs: tests-smoke
    runs-on: [ self-hosted, Windows, pyaedt ]
    steps:
      - name: Install Git and checkout project
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

      - name: Create virtual environment
        run: |
          python -m venv .venv
          .venv\Scripts\Activate.ps1
          python -m pip install pip -U
          python -m pip install wheel setuptools -U
          python -c "import sys; print(sys.executable)"

      - name: Install pyaedt and tests dependencies
        run: |
          .venv\Scripts\Activate.ps1
          pip install .[tests]
          pip install pytest-azurepipelines

      - name: Install CI dependencies (e.g. vtk-osmesa)
        run: |
          .venv\Scripts\Activate.ps1
          # Uninstall conflicting dependencies
          pip uninstall --yes vtk
          pip install --extra-index-url https://wheels.vtk.org vtk-osmesa==9.2.20230527.dev0

      - name: Run tests on _unittest
        uses: nick-fields/retry@v3
        env:
          PYTHONMALLOC: malloc
        with:
          max_attempts: 2
          retry_on: error
          timeout_minutes: 50
          command: |
            .venv\Scripts\Activate.ps1
            pytest -n 4 --dist loadfile --durations=50 -v --cov=pyaedt --cov-report=xml --cov-report=html --junitxml=junit/test-results.xml _unittest

      - uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          name: codecov-system-tests
          file: ./coverage.xml
          flags: system

      - name: Upload pytest test results
        uses: actions/upload-artifact@v3
        with:
          name: pytest-results
          path: junit/test-results.xml
        if: ${{ always() }}

# # =================================================================================================
# # vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv    RUNNING ON SELF-HOSTED RUNNER    vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
# # =================================================================================================

  # TODO: Si if we can use ansys/actions
  test-linux:
    name: Testing and coverage (Linux)
    needs: tests-smoke
    runs-on: [ self-hosted, Linux, pyaedt ]
    env:
      ANSYSEM_ROOT241: '/opt/AnsysEM/v241/Linux64'
      ANS_NODEPCHECK: '1'
    steps:
      - name: Install Git and checkout project
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

      - name: Create virtual environment
        run: |
          export LD_LIBRARY_PATH=${{ env.ANSYSEM_ROOT241 }}/common/mono/Linux64/lib64:${{ env.ANSYSEM_ROOT241 }}/Delcross:$LD_LIBRARY_PATH
          python -m venv .venv
          source .venv/bin/activate
          python -m pip install --trusted-host pypi.org --trusted-host pypi.python.org --trusted-host files.pythonhosted.org pip -U
          python -m pip install --trusted-host pypi.org --trusted-host pypi.python.org --trusted-host files.pythonhosted.org wheel setuptools -U
          python -c "import sys; print(sys.executable)"

      - name: Install pyaedt and tests dependencies
        run: |
          export LD_LIBRARY_PATH=${{ env.ANSYSEM_ROOT241 }}/common/mono/Linux64/lib64:${{ env.ANSYSEM_ROOT241 }}/Delcross:$LD_LIBRARY_PATH
          source .venv/bin/activate
          pip install .[tests]
          pip install pytest-azurepipelines

      - name: Install CI dependencies (e.g. vtk-osmesa)
        run: |
          source .venv/bin/activate
          # Uninstall conflicting dependencies
          pip uninstall --yes vtk
          pip install --extra-index-url https://wheels.vtk.org vtk-osmesa==9.2.20230527.dev0

      - name: Run tests on _unittest
        uses: nick-fields/retry@v3
        with:
          max_attempts: 2
          retry_on: error
          timeout_minutes: 50
          command: |
            export LD_LIBRARY_PATH=${{ env.ANSYSEM_ROOT241 }}/common/mono/Linux64/lib64:${{ env.ANSYSEM_ROOT241 }}/Delcross:$LD_LIBRARY_PATH
            source .venv/bin/activate
            pytest -n 4 --dist loadfile --durations=50 -v --cov=pyaedt --cov-report=xml --cov-report=html --junitxml=junit/test-results.xml _unittest

      - uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          name: codecov-system-solver-tests
          file: ./coverage.xml
          flags: system,solver

      - name: Upload pytest test results
        uses: actions/upload-artifact@v3
        with:
          name: pytest-solver-results
          path: junit/test-results.xml
        if: ${{ always() }}

  tests-windows-solvers:
    name: "Windows / Tests / Solvers"
    needs: tests-smoke
    runs-on: [ self-hosted, Windows, pyaedt ]
    if: | 
      !contains(github.event.pull_request.labels.*.name, 'ci:skip') &&
      !contains(github.event.pull_request.labels.*.name, 'tests:skip') &&
      !contains(github.event.pull_request.labels.*.name, 'tests:solvers:skip')
    steps:

      - name: "Checkout project"
        uses: actions/checkout@v4

      - name: "Setup Python ${{ env.MAIN_PYTHON_VERSION }}"
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

      - name: "Create virtual environment"
        run: |
          python -m venv .venv
          .venv\Scripts\Activate.ps1
          python -m pip install pip --upgrade pip

      - name: "Install ${{ env.PACKAGE_NAME }} dependencies"
        run: |
          .venv\Scripts\Activate.ps1
          python -m pip install .[tests] pytest-azurepipelines

      - name: "Install CI dependencies"
        run: |
          .venv\Scripts\Activate.ps1
          # Uninstall conflicting dependencies
          pip uninstall --yes vtk
          pip install --extra-index-url https://wheels.vtk.org vtk-osmesa==9.2.20230527.dev0

      - name: "Run solvers tests"
        env:
          PYTHONMALLOC: malloc
        run: |
          .venv\Scripts\Activate.ps1
          pytest --durations=50 -v --cov=pyaedt --cov-report=xml --cov-report=html --junitxml=junit/test-results.xml _unittest_solvers

      - name: "Upload solvers tests coverage"
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          name: codecov-system-solver-tests
          file: ./coverage.xml
          flags: system,solver

      - name: "Upload solvers tests results"
        uses: actions/upload-artifact@v3
        if: ${{ always() }}
        with:
          name: pytest-solver-results
          path: junit/test-results.xml

  tests-windows-ironpython:
    name: "Windows / Tests / IronPython"
    needs: tests-smoke
    runs-on: [ self-hosted, Windows, pyaedt ]
    if: | 
      !contains(github.event.pull_request.labels.*.name, 'ci:skip') &&
      !contains(github.event.pull_request.labels.*.name, 'tests:skip') &&
      !contains(github.event.pull_request.labels.*.name, 'tests:iron:skip')
    steps:

      - name: "Checkout project"
        uses: actions/checkout@v4

      - name: "Tests IronPython"
        timeout-minutes: 5
        run: |
          $processA = start-process 'cmd' -ArgumentList '/c .\_unittest_ironpython\run_unittests_batchmode.cmd' -PassThru
          $processA.WaitForExit()

      - name: "Get logger content"
        run: |
          get-content .\_unittest_ironpython\pyaedt_unit_test_ironpython.log

      - name: "Check for errors"
        run: |
          $test_errors_failures = Select-String -Path .\_unittest_ironpython\pyaedt_unit_test_ironpython.log -Pattern "TextTestResult errors="
          if ($test_errors_failures -ne $null)
          {
            exit 1
          }

  build-library:
    name: "Build library"
    needs: [test-windows, test-solvers-windows, test-ironpython-windows, test-linux, test-solvers-linux, doc-build]
    runs-on: ubuntu-latest
    steps:
      - uses: ansys/actions/build-library@v6
        with:
          library-name: ${{ env.PACKAGE_NAME }}
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
