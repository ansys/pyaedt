name: CI_PreRelease

env:
  python.version: '3.8'
  python.venv: 'testvenv'
  # Following env vars when changed will "reset" the mentioned cache,
  # by changing the cache file name. It is rendered as ...-v%RESET_XXX%-...
  # You should go up in number, if you go down (or repeat a previous value)
  # you might end up reusing a previous cache if it haven't been deleted already.
  # It applies 7 days retention policy by default.
  RESET_PIP_CACHE: 0
  PACKAGE_NAME: PyAEDT
# Controls when the workflow will run
on:
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
      tags:
        description: 'Linux CPython daily'
  schedule:  # UTC at 0300
    - cron:  '0 3 * * *'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: [pre_release]
    strategy:
      matrix:
        python-version: ['3.8']
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: 'Create virtual env'
        run: |
          python -m venv testenv
          testenv\Scripts\Activate.ps1
          python -m pip install pip -U
          python -m pip install wheel setuptools -U
          python -c "import sys; print(sys.executable)"

      - name: 'Install pyaedt'
        run: |
          testenv\Scripts\Activate.ps1
          pip install .[tests]
          pip install pytest-azurepipelines
          Copy-Item -Path "C:\actions-runner\opengl32.dll" -Destination "testenv\Lib\site-packages\vtkmodules" -Force
          Copy-Item -Path "C:\actions-runner\local_config.json" -Destination "_unittest" -Force
          mkdir tmp
          cd tmp
          python -c "import pyaedt; print('Imported pyaedt')"

      # - name: "Check licences of packages"
      #   uses: pyansys/pydpf-actions/check-licenses@v2.0

      - name: 'Unit testing'
        timeout-minutes: 60
        run: |
          testenv\Scripts\Activate.ps1
          Set-Item -Path env:PYTHONMALLOC -Value "malloc"
          pytest --tx 6*popen --durations=50 --dist loadfile -v --cov=pyaedt  --cov-report=xml --junitxml=junit/test-results.xml --cov-report=html _unittest

      - uses: codecov/codecov-action@v3
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        if: matrix.python-version == '3.8'
        name: 'Upload coverage to Codecov'

      - name: Upload pytest test results
        uses: actions/upload-artifact@v4
        with:
          name: pytest-results
          path: junit/test-results.xml
        # Use always() to always run this step to publish test results when there are test failures
        if: ${{ always() }}

