# This is a basic workflow to help you get started with Actions

name: FullDocumentation

env:
  python.version: 3.8
  python.venv: 'testvenv'
# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    tags:
     - v*
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
      tags:
        description: 'Test scenario tags'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  full_documentation:
    # The type of runner that the job will run on
    runs-on: [Windows, pyaedt]
    strategy:
      matrix:
        python-version: [3.8]
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v3

      # used for documentation deployment
      - name: Get Bot Application Token
        id: get_workflow_token
        uses: peter-murray/workflow-application-token-action@v2
        with:
          application_id: ${{ secrets.BOT_APPLICATION_ID }}
          application_private_key: ${{ secrets.BOT_APPLICATION_PRIVATE_KEY }}

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: 'Create virtual env'
        run: |
          python -m venv testenv
          testenv\Scripts\Activate.ps1
          python -m pip install pip -U
          python -m pip install wheel setuptools -U
          python -c "import sys; print(sys.executable)"

      - name: 'Install pyaedt'
        run: |
          testenv\Scripts\Activate.ps1
          pip install -r requirements.txt
          pip install -r requirements_docs.txt
          Copy-Item -Path "C:\actions-runner\opengl32.dll" -Destination "testenv\Lib\site-packages\vtkmodules" -Force

      - name: Retrieve PyAEDT version
        id: version
        run: |
          testenv\Scripts\Activate.ps1
          echo "::set-output name=PYAEDT_VERSION::$(python -c "from pyaedt import __version__; print(__version__)")"
          echo "PyAEDT version is: $(python -c "from pyaedt import __version__; print(__version__)")"


        #if: startsWith(github.event.ref, 'refs/heads/main') != true

      - name: 'Create Documentations'
        run: |
          testenv\Scripts\Activate.ps1
          sphinx-build -j auto -b html -a doc/source doc/_build/html 

      - name: ' Deploy on aedt.docs.pyansys.com'
        id: deploy
        continue-on-error: true
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
        working-directory: doc/_build/html
        run: |
          git init
          git checkout -b master
          git config --local user.name "maxcapodi78"
          git config --local user.email "massimo.capodiferro@ansys.com"
          New-Item -ItemType file .nojekyll
          New-Item -ItemType file CNAME
          Add-Content CNAME "aedt.docs.pyansys.com"
          git add .
          git commit -m "Documentation generated by PyAedt Build"
          git remote add origin https://${{ secrets.PYAEDT_DOCS }}@github.com/pyansys/PyAEDT-docs
          git push -u origin master --force

        # Retry the deployment in case some network issue prevented git to push
        # the modifications properly. It happened in the past.
      - name: Deploy Second try
        if: steps.deploy.outcome != 'success' && github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
        working-directory: doc/_build/html
        run: |
          git init
          git checkout -b master
          git config --local user.name "maxcapodi78"
          git config --local user.email "massimo.capodiferro@ansys.com"
          New-Item -ItemType file .nojekyll
          New-Item -ItemType file CNAME
          Add-Content CNAME "aedt.docs.pyansys.com"
          git add .
          git commit -m "Documentation generated by PyAedt Build"
          git remote add origin https://${{ secrets.PYAEDT_DOCS }}@github.com/pyansys/PyAEDT-docs
          git push -u origin master --force

  full_documentation_json:
    # The type of runner that the job will run on
    runs-on: [Windows, pyaedt]
    strategy:
      matrix:
        python-version: [3.8]
    steps:
      - uses: actions/checkout@v3

      # used for documentation deployment
      - name: Get Bot Application Token
        id: get_workflow_token
        uses: peter-murray/workflow-application-token-action@v2
        with:
          application_id: ${{ secrets.BOT_APPLICATION_ID }}
          application_private_key: ${{ secrets.BOT_APPLICATION_PRIVATE_KEY }}

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: 'Install requirements'
        run: |
          python -m venv jsondoc
          jsondoc\Scripts\Activate.ps1
          python -m pip install pip -U
          python -m pip install wheel setuptools -U
          python -c "import sys; print(sys.executable)"
          pip install -r requirements.txt
          pip install -r requirements_docs.txt

      - name: Build json documentation
        run: |
          # Export the documentation files to JSON files.
          jsondoc\Scripts\Activate.ps1
          sphinx-build -M json doc/source doc-json -j auto -D release=${{ steps.version.outputs.PYAEDT_VERSION }} -D version=${{ steps.version.outputs.PYAEDT_VERSION }} -w build_errors.txt -N;

      - name: Flatten the generated nested files into a single directory
        run: |
          echo Flattening a nested directory
          mkdir -p doc-flatten-json;
          # Move all the JSON file to the flatten directory.
          JSON_FILES=$(find doc-json/json -type f -name "*.fjson" -o -name "*.json*");
          for filename in $JSON_FILES
          do
              x=${filename#./};
              y=${x// /-};
              mv -n ${x// /\ } "./doc-flatten-json/${y////-}";
          done
          # echo Make sure all the file has .json extensions instead of the .fjson
          # for file in doc-flatten-json/*.fjson ; do mv -- "$file" "${file%.fjson}.json" ; done;
          # Move all static image files to the JSON flatten folder.
          mv -n doc-json/json/_images doc-flatten-json/_images;

      - name: zip the flattened JSON directory
        run: |
          zip -r pyaedt-doc-flatten-json.zip doc-flatten-json;
          mkdir pyaedt-doc-flatten-json;
          mv pyaedt-doc-flatten-json-v${{ steps.version.outputs.PYAEDT_VERSION }}.zip pyaedt-doc-flatten-json;
          echo Clean up build directories after the process is completed.
          rm -rf doc-json doc-flatten-json;

      # - name: Upload json Documentation
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: pyaedt-doc-flatten-json-v${{ steps.version.outputs.PYAEDT_VERSION }}.zip
      #     path: pyaedt-doc-flatten-json-v${{ steps.version.outputs.PYAEDT_VERSION }}.zip
      #     retention-days: 7

      - name: Deploy
        uses: JamesIves/github-pages-deploy-action@v4.4.0
        with:
          repository-name: pyansys/devportal-doc-archive
          branch: drupal
          folder: pyaedt-doc-flatten-json
          token: ${{ steps.get_workflow_token.outputs.token }}
          clean: false

      # Verify that sphinx generates no warnings
      - name: Check for warnings
        run: |
          python doc/print_errors.py