# This is a basic workflow to help you get started with Actions

name: FullDocumentation

env:
  python.version: '3.10'
  python.venv: 'testvenv'
  DOCUMENTATION_CNAME: 'aedt.docs.pyansys.com'
  MEILISEARCH_API_KEY: ${{ secrets.MEILISEARCH_API_KEY }}
  MEILISEARCH_HOST_URL: https://backend.search.pyansys.com
  MEILISEARCH_PUBLIC_API_KEY: ${{ secrets.MEILISEARCH_PUBLIC_API_KEY }}
# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    tags:
     - v*
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
      tags:
        description: 'Test scenario tags'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  full_documentation:
    # The type of runner that the job will run on
    name: full_documentation
    runs-on: [windows-latest, pyaedt]
    timeout-minutes: 480
    strategy:
      matrix:
        python-version: ['3.10']
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: 'Create virtual env'
        run: |
          python -m venv testenv
          testenv\Scripts\Activate.ps1
          python -m pip install pip -U
          python -m pip install wheel setuptools -U
          python -c "import sys; print(sys.executable)"

      - name: 'Install pyaedt'
        run: |
          testenv\Scripts\Activate.ps1
          pip install .[doc]
          Copy-Item -Path "C:\actions-runner\opengl32.dll" -Destination "testenv\Lib\site-packages\vtkmodules" -Force

      - name: Retrieve PyAEDT version
        id: version
        run: |
          testenv\Scripts\Activate.ps1
          echo "::set-output name=PYAEDT_VERSION::$(python -c "from pyaedt import __version__; print(__version__)")"
          echo "PyAEDT version is: $(python -c "from pyaedt import __version__; print(__version__)")"

      - name: Create HTML Documentations
        run: |
          testenv\Scripts\Activate.ps1
          sphinx-build -j auto --color -b html -a doc/source doc/_build/html

#      - name: Create PDF Documentations
#        run: |
#            testenv\Scripts\Activate.ps1
#            .\doc\make.bat pdf

      - name: Upload HTML documentation artifact
        uses: actions/upload-artifact@v3
        with:
          name: documentation-html
          path: doc/_build/html
          retention-days: 7

      - name: Upload HTML documentation artifact
        uses: actions/upload-artifact@v3
        with:
          name: documentation-html-edb
          path: doc/_build/html/EDBAPI
          retention-days: 7

#      - name: Upload PDF documentation artifact
#        uses: actions/upload-artifact@v3
#        with:
#          name: documentation-pdf
#          path: doc/_build/pdf
#          retention-days: 7

#      - name: Release
#        uses: softprops/action-gh-release@v1
#        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
#        with:
#          generate_release_notes: true
#          files: |
#            doc/_build/pdf

  doc-deploy-stable:
    name: Deploy stable documentation
    runs-on: ubuntu-latest
    needs: full_documentation
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    steps:
      - name: Deploy the stable documentation
        uses: ansys/actions/doc-deploy-stable@v4
        with:
          cname: ${{ env.DOCUMENTATION_CNAME }}
          token: ${{ secrets.GITHUB_TOKEN }}
          python-version: ${{ matrix.python-version }}

  
  doc-index-stable:
    name: "Deploy stable docs index"
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    runs-on: ubuntu-latest
    needs: doc-deploy-stable
    
    steps:
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4

      - name: Display structure of downloaded files
        run: ls -R

      - name: Install the package requirements
        run: pip install -e .
      
      - name: Get the version to PyMeilisearch
        run: |
          VERSION=$(python -c "from pyaedt import __version__; print('.'.join(__version__.split('.')[:2]))")
          VERSION_MEILI=$(python -c "from pyaedt import __version__; print('-'.join(__version__.split('.')[:2]))")
          echo "Calculated VERSION: $VERSION"
          echo "Calculated VERSION_MEILI: $VERSION_MEILI"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "VERSION_MEILI=$VERSION_MEILI" >> $GITHUB_ENV

      - name: "Deploy the stable documentation index for PyAEDT API"
        uses: ansys/actions/doc-deploy-index@v4
        with:
          cname: ${{ env.DOCUMENTATION_CNAME }}/version/${{ env.VERSION }}
          index-name: pyaedt-v${{ env.VERSION_MEILI }}
          host-url: ${{ vars.MEILISEARCH_HOST_URL }}
          api-key: ${{ env.MEILISEARCH_API_KEY }}
          pymeilisearchopts: --stop_urls \"EDBAPI\" # Add EDB API as another index.

      - name: "Deploy the stable documentation index for EDB API"
        uses: ansys/actions/doc-deploy-index@v4
        with:
          cname: ${{ env.DOCUMENTATION_CNAME }}/version/${{ env.VERSION }}/EDBAPI/
          index-name: pyedb-v${{ env.VERSION_MEILI }}
          host-url: ${{ vars.MEILISEARCH_HOST_URL }}
          api-key: ${{ env.MEILISEARCH_API_KEY }}
          doc-artifact-name: documentation-html-edb # Add only EDB API as page in this index.
          pymeilisearchopts: --port 8001 #serve in another port
