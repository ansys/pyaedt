name: Documentation Build

on: [pull_request, workflow_dispatch]

env:
  # Following env vars when changed will "reset" the mentioned cache,
  # by changing the cache file name. It is rendered as ...-v%RESET_XXX%-...
  # You should go up in number, if you go down (or repeat a previous value)
  # you might end up reusing a previous cache if it haven't been deleted already.
  # It applies 7 days retention policy by default.
  RESET_EXAMPLES_CACHE: 3
  RESET_DOC_BUILD_CACHE: 3
  RESET_AUTOSUMMARY_CACHE: 3


concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  docs-style:
    name: Documentation Style Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
  
      - name: Running Vale
        uses: errata-ai/vale-action@reviewdog
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          files: doc
          reporter: github-pr-check
          level: error
          filter_mode: nofilter
          fail_on_error: true
          vale_flags: "--config=doc/.vale.ini"

  test_documentation:
    # The type of runner that the job will run on
    name: full_documentation
    runs-on: [windows-latest, pyaedt]
    strategy:
      matrix:
        python-version: ['3.10']
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: 'Create virtual env'
        run: |
          python -m venv testenv
          testenv\Scripts\Activate.ps1
          python -m pip install pip -U
          python -m pip install wheel setuptools -U
          python -c "import sys; print(sys.executable)"

      - name: 'Install pyaedt'
        run: |
          testenv\Scripts\Activate.ps1
          pip install .[doc]
          Copy-Item -Path "C:\actions-runner\opengl32.dll" -Destination "testenv\Lib\site-packages\vtkmodules" -Force

      - name: Retrieve PyAEDT version
        id: version
        run: |
          testenv\Scripts\Activate.ps1
          echo "::set-output name=PYAEDT_VERSION::$(python -c "from pyaedt import __version__; print(__version__)")"
          echo "PyAEDT version is: $(python -c "from pyaedt import __version__; print(__version__)")"

      - name: Create PDF Documentations
        run: |
            testenv\Scripts\Activate.ps1
            sphinx-build -j auto --color -b pdf -a doc/source doc/_build/pdf
    
  docs_build:
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.8

      - name: Install pyaedt
        run: |
          pip install .[doc]

      - name: Verify pyaedt can be imported
        run: python -c "import pyaedt"

      - name: Retrieve PyAEDT version
        id: version
        run: |
          echo "::set-output name=PYAEDT_VERSION::$(python -c "from pyaedt import __version__; print(__version__)")"
          echo "PyAEDT version is: $(python -c "from pyaedt import __version__; print(__version__)")"

      # - name: Cache docs build directory
      #   uses: actions/cache@v3
      #   with:
      #     path: doc/build
      #     key: doc-build-v${{ env.RESET_DOC_BUILD_CACHE }}-${{ steps.version.outputs.PYAEDT_VERSION }}-${{ github.sha }}
      #     restore-keys: |
      #       doc-build-v${{ env.RESET_DOC_BUILD_CACHE }}-${{ steps.version.outputs.PYAEDT_VERSION }}
      # - name: Cache autosummary
      #   uses: actions/cache@v3
      #   with:
      #     path: doc/source/**/_autosummary/*.rst
      #     key: autosummary-v${{ env.RESET_AUTOSUMMARY_CACHE }}-${{ steps.version.outputs.PYAEDT_VERSION }}-${{ github.sha }}
      #     restore-keys: |
      #       autosummary-v${{ env.RESET_AUTOSUMMARY_CACHE }}-${{ steps.version.outputs.PYAEDT_VERSION }}

      - name: Install doc build requirements
        run: |
          sudo apt install graphviz

      # run doc build, without creating the examples directory
      # note that we have to add the examples file here since it won't
      # be created as gallery is disabled on linux.
      - name: Documentation Build
        run: |
          make -C doc clean
          mkdir doc/source/examples -p
          echo $'Examples\n========' > doc/source/examples/index.rst
          make -C doc html SPHINXOPTS="-j auto -w build_errors.txt -N"

      # Verify that sphinx generates no warnings
      - name: Check for warnings
        run: |
          python doc/print_errors.py

#      - name: Upload Documentation
#        uses: actions/upload-artifact@v3
#        with:
#          name: Documentation
#          path: doc/_build/html
#          retention-days: 7
